/**
 * Creates hooks to install a driver and a plugin and starts an Appium server w/ the given extensions.
 * @param {E2ESetupOpts} opts
 * @returns {void}
 */
export function pluginE2EHarness(opts: E2ESetupOpts): void;
export type E2ESetupOpts = {
    /**
     * - Path to Appium home directory
     */
    appiumHome?: string | undefined;
    /**
     * - Mocha "before all" hook function
     */
    before: Mocha.HookFunction;
    /**
     * - Mocha "after all" hook function
     */
    after: Mocha.HookFunction;
    /**
     * - Arguments to pass to Appium server
     */
    serverArgs?: any;
    /**
     * - Source of driver to install
     */
    driverSource: import('appium/types').InstallType & string;
    /**
     * - Package name of driver to install
     */
    driverPackage?: string | undefined;
    /**
     * - Name of driver to install
     */
    driverName: string;
    /**
     * - Spec of driver to install
     */
    driverSpec: string;
    /**
     * - Source of plugin to install
     */
    pluginSource: import('appium/types').InstallType & string;
    /**
     * - Package name of plugin to install
     */
    pluginPackage?: string | undefined;
    /**
     * - Spec of plugin to install
     */
    pluginSpec: string;
    /**
     * - Name of plugin to install
     */
    pluginName: string;
    /**
     * - Port to use for Appium server
     */
    port?: number | undefined;
    /**
     * - Host to use for Appium server
     */
    host?: string | undefined;
};
export type AppiumServer = import('@appium/types').AppiumServer;
export type AppiumEnv = import('appium/types').AppiumEnv;
//# sourceMappingURL=plugin-e2e-harness.d.ts.map