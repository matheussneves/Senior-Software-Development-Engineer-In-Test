"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SandboxStore = void 0;
exports.verifySandbox = verifySandbox;
exports.withSandbox = withSandbox;

require("source-map-support/register");

var _sinon = _interopRequireDefault(require("sinon"));

var _lodash = _interopRequireDefault(require("lodash"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _mockUtils = require("./mock-utils");

function withSandbox(mockDefs, fn) {
  if (!_lodash.default.isEmpty(mockDefs.mocks)) {
    mockDefs = mockDefs.mocks;
  }

  return () => {
    const sbx = new SandboxStore();
    beforeEach(function beforeEach() {
      sbx.createSandbox(mockDefs);
    });
    afterEach(function afterEach() {
      sbx.reset();
    });
    fn(sbx);
  };
}

function verifySandbox(sbxOrMocks) {
  sbxOrMocks.verify();
}

class SandboxStore {
  mocks;
  sandbox;

  constructor(sandbox) {
    this.sandbox = sandbox;
  }

  createSandbox(mocks = {}) {
    this.sandbox = this.sandbox ?? _sinon.default.createSandbox().usingPromise(_bluebird.default);
    this.mocks = new _mockUtils.MockStore(this.sandbox).createMocks(mocks);
  }

  verify() {
    if (!this.sandbox) {
      throw new ReferenceError('Cannot verify mocks before they are created; call `createMocks()` first');
    }

    this.sandbox.verify();
  }

  reset() {
    var _this$mocks;

    (_this$mocks = this.mocks) === null || _this$mocks === void 0 ? void 0 : _this$mocks.reset();
    delete this.sandbox;
  }

}

exports.SandboxStore = SandboxStore;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ3aXRoU2FuZGJveCIsIm1vY2tEZWZzIiwiZm4iLCJfIiwiaXNFbXB0eSIsIm1vY2tzIiwic2J4IiwiU2FuZGJveFN0b3JlIiwiYmVmb3JlRWFjaCIsImNyZWF0ZVNhbmRib3giLCJhZnRlckVhY2giLCJyZXNldCIsInZlcmlmeVNhbmRib3giLCJzYnhPck1vY2tzIiwidmVyaWZ5Iiwic2FuZGJveCIsImNvbnN0cnVjdG9yIiwic2lub24iLCJ1c2luZ1Byb21pc2UiLCJCIiwiTW9ja1N0b3JlIiwiY3JlYXRlTW9ja3MiLCJSZWZlcmVuY2VFcnJvciJdLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9zYW5kYm94LXV0aWxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzaW5vbiBmcm9tICdzaW5vbic7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IHtNb2NrU3RvcmV9IGZyb20gJy4vbW9jay11dGlscyc7XG5cbi8qKlxuICogQHRlbXBsYXRlIHtSZWNvcmQ8c3RyaW5nLGFueT58e21vY2tzOiBSZWNvcmQ8c3RyaW5nLGFueT59fSBNb2Nrc1xuICogQHBhcmFtIHtNb2Nrc30gbW9ja0RlZnNcbiAqIEBwYXJhbSB7KHNhbmRib3hTdG9yZTogU2FuZGJveFN0b3JlKSA9PiB2b2lkfSBmblxuICogQHJldHVybnMgeygpID0+IHZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3aXRoU2FuZGJveChtb2NrRGVmcywgZm4pIHtcbiAgLy8gYmFja3dhcmRzLWNvbXBhdFxuICBpZiAoIV8uaXNFbXB0eShtb2NrRGVmcy5tb2NrcykpIHtcbiAgICBtb2NrRGVmcyA9IG1vY2tEZWZzLm1vY2tzO1xuICB9XG4gIHJldHVybiAoKSA9PiB7XG4gICAgLyoqIEB0eXBlIHtTYW5kYm94U3RvcmV9ICovXG4gICAgY29uc3Qgc2J4ID0gbmV3IFNhbmRib3hTdG9yZSgpO1xuICAgIGJlZm9yZUVhY2goZnVuY3Rpb24gYmVmb3JlRWFjaCgpIHtcbiAgICAgIHNieC5jcmVhdGVTYW5kYm94KG1vY2tEZWZzKTtcbiAgICB9KTtcbiAgICBhZnRlckVhY2goZnVuY3Rpb24gYWZ0ZXJFYWNoKCkge1xuICAgICAgc2J4LnJlc2V0KCk7XG4gICAgfSk7XG4gICAgZm4oc2J4KTtcbiAgfTtcbn1cblxuLyoqXG4gKiBDb252ZW5pZW5jZSBmdW5jdGlvbiBmb3IgY2FsbGluZyB7QGxpbmtjb2RlIFNhbmRib3hTdG9yZS52ZXJpZnl9LlxuICogQHBhcmFtIHtTYW5kYm94U3RvcmV8TW9ja1N0b3JlfSBzYnhPck1vY2tzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2ZXJpZnlTYW5kYm94KHNieE9yTW9ja3MpIHtcbiAgc2J4T3JNb2Nrcy52ZXJpZnkoKTtcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUge1JlY29yZDxzdHJpbmcsYW55Pn0gTW9ja3NcbiAqL1xuZXhwb3J0IGNsYXNzIFNhbmRib3hTdG9yZSB7XG4gIC8qKiBAdHlwZSB7TW9ja1N0b3JlPFJlY29yZDxzdHJpbmcsYW55Pj59ICovXG4gIG1vY2tzO1xuXG4gIC8qKiBAdHlwZSB7U2lub25TYW5kYm94fHVuZGVmaW5lZH0gKi9cbiAgc2FuZGJveDtcblxuICAvKipcbiAgICogVXNlcyBhIHNhbmRib3ggaWYgb25lIGlzIHByb3ZpZGVkXG4gICAqIEBwYXJhbSB7U2lub25TYW5kYm94fSBbc2FuZGJveF1cbiAgICovXG4gIGNvbnN0cnVjdG9yKHNhbmRib3gpIHtcbiAgICB0aGlzLnNhbmRib3ggPSBzYW5kYm94O1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7TW9ja3N9IG1vY2tzXG4gICAqL1xuICBjcmVhdGVTYW5kYm94KG1vY2tzID0gLyoqIEB0eXBlIHtNb2Nrc30gKi8gKHt9KSkge1xuICAgIHRoaXMuc2FuZGJveCA9IHRoaXMuc2FuZGJveCA/PyBzaW5vbi5jcmVhdGVTYW5kYm94KCkudXNpbmdQcm9taXNlKEIpO1xuICAgIHRoaXMubW9ja3MgPSBuZXcgTW9ja1N0b3JlKHRoaXMuc2FuZGJveCkuY3JlYXRlTW9ja3MobW9ja3MpO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxzIHtAbGlua2NvZGUgU2lub25TYW5kYm94LnZlcmlmeX0gb24gdGhlIGBzYW5kYm94YCBwcm9wLCBpZiBpdCBleGlzdHNcbiAgICovXG4gIHZlcmlmeSgpIHtcbiAgICBpZiAoIXRoaXMuc2FuZGJveCkge1xuICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFxuICAgICAgICAnQ2Fubm90IHZlcmlmeSBtb2NrcyBiZWZvcmUgdGhleSBhcmUgY3JlYXRlZDsgY2FsbCBgY3JlYXRlTW9ja3MoKWAgZmlyc3QnXG4gICAgICApO1xuICAgIH1cbiAgICB0aGlzLnNhbmRib3gudmVyaWZ5KCk7XG4gIH1cblxuICByZXNldCgpIHtcbiAgICB0aGlzLm1vY2tzPy5yZXNldCgpO1xuICAgIGRlbGV0ZSB0aGlzLnNhbmRib3g7XG4gIH1cbn1cblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdzaW5vbicpLlNpbm9uU2FuZGJveH0gU2lub25TYW5kYm94XG4gKi9cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQVFPLFNBQVNBLFdBQVQsQ0FBcUJDLFFBQXJCLEVBQStCQyxFQUEvQixFQUFtQztFQUV4QyxJQUFJLENBQUNDLGVBQUEsQ0FBRUMsT0FBRixDQUFVSCxRQUFRLENBQUNJLEtBQW5CLENBQUwsRUFBZ0M7SUFDOUJKLFFBQVEsR0FBR0EsUUFBUSxDQUFDSSxLQUFwQjtFQUNEOztFQUNELE9BQU8sTUFBTTtJQUVYLE1BQU1DLEdBQUcsR0FBRyxJQUFJQyxZQUFKLEVBQVo7SUFDQUMsVUFBVSxDQUFDLFNBQVNBLFVBQVQsR0FBc0I7TUFDL0JGLEdBQUcsQ0FBQ0csYUFBSixDQUFrQlIsUUFBbEI7SUFDRCxDQUZTLENBQVY7SUFHQVMsU0FBUyxDQUFDLFNBQVNBLFNBQVQsR0FBcUI7TUFDN0JKLEdBQUcsQ0FBQ0ssS0FBSjtJQUNELENBRlEsQ0FBVDtJQUdBVCxFQUFFLENBQUNJLEdBQUQsQ0FBRjtFQUNELENBVkQ7QUFXRDs7QUFNTSxTQUFTTSxhQUFULENBQXVCQyxVQUF2QixFQUFtQztFQUN4Q0EsVUFBVSxDQUFDQyxNQUFYO0FBQ0Q7O0FBS00sTUFBTVAsWUFBTixDQUFtQjtFQUV4QkYsS0FBSztFQUdMVSxPQUFPOztFQU1QQyxXQUFXLENBQUNELE9BQUQsRUFBVTtJQUNuQixLQUFLQSxPQUFMLEdBQWVBLE9BQWY7RUFDRDs7RUFLRE4sYUFBYSxDQUFDSixLQUFLLEdBQXlCLEVBQS9CLEVBQW9DO0lBQy9DLEtBQUtVLE9BQUwsR0FBZSxLQUFLQSxPQUFMLElBQWdCRSxjQUFBLENBQU1SLGFBQU4sR0FBc0JTLFlBQXRCLENBQW1DQyxpQkFBbkMsQ0FBL0I7SUFDQSxLQUFLZCxLQUFMLEdBQWEsSUFBSWUsb0JBQUosQ0FBYyxLQUFLTCxPQUFuQixFQUE0Qk0sV0FBNUIsQ0FBd0NoQixLQUF4QyxDQUFiO0VBQ0Q7O0VBS0RTLE1BQU0sR0FBRztJQUNQLElBQUksQ0FBQyxLQUFLQyxPQUFWLEVBQW1CO01BQ2pCLE1BQU0sSUFBSU8sY0FBSixDQUNKLHlFQURJLENBQU47SUFHRDs7SUFDRCxLQUFLUCxPQUFMLENBQWFELE1BQWI7RUFDRDs7RUFFREgsS0FBSyxHQUFHO0lBQUE7O0lBQ04sb0JBQUtOLEtBQUwsNERBQVlNLEtBQVo7SUFDQSxPQUFPLEtBQUtJLE9BQVo7RUFDRDs7QUF0Q3VCIn0=