"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.UiAutomator2Server = exports.SERVER_TEST_PACKAGE_ID = exports.SERVER_PACKAGE_ID = exports.INSTRUMENTATION_TARGET = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _driver = require("appium/driver");

var _asyncbox = require("asyncbox");

var _appiumUiautomator2Server = require("appium-uiautomator2-server");

var _support = require("appium/support");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _helpers = _interopRequireDefault(require("./helpers"));

var _axios = _interopRequireDefault(require("axios"));

var _path = _interopRequireDefault(require("path"));

const REQD_PARAMS = ['adb', 'tmpDir', 'host', 'systemPort', 'devicePort', 'disableWindowAnimation'];
const SERVER_LAUNCH_TIMEOUT = 30000;
const SERVER_INSTALL_RETRIES = 20;
const SERVICES_LAUNCH_TIMEOUT = 30000;
const SERVER_PACKAGE_ID = 'io.appium.uiautomator2.server';
exports.SERVER_PACKAGE_ID = SERVER_PACKAGE_ID;
const SERVER_TEST_PACKAGE_ID = `${SERVER_PACKAGE_ID}.test`;
exports.SERVER_TEST_PACKAGE_ID = SERVER_TEST_PACKAGE_ID;
const INSTRUMENTATION_TARGET = `${SERVER_TEST_PACKAGE_ID}/androidx.test.runner.AndroidJUnitRunner`;
exports.INSTRUMENTATION_TARGET = INSTRUMENTATION_TARGET;

const instrumentationLogger = _support.logger.getLogger('Instrumentation');

class UIA2Proxy extends _driver.JWProxy {
  async proxyCommand(url, method, body = null) {
    if (this.didInstrumentationExit) {
      throw new _driver.errors.InvalidContextError(`'${method} ${url}' cannot be proxied to UiAutomator2 server because ` + 'the instrumentation process is not running (probably crashed). ' + 'Check the server log and/or the logcat output for more details');
    }

    return await super.proxyCommand(url, method, body);
  }

}

class UiAutomator2Server {
  constructor(log, opts = {}) {
    for (let req of REQD_PARAMS) {
      if (!opts || !_support.util.hasValue(opts[req])) {
        throw new Error(`Option '${req}' is required!`);
      }

      this[req] = opts[req];
    }

    this.log = log;
    this.disableSuppressAccessibilityService = opts.disableSuppressAccessibilityService;
    const proxyOpts = {
      log,
      server: this.host,
      port: this.systemPort,
      keepAlive: true
    };

    if (opts.readTimeout && opts.readTimeout > 0) {
      proxyOpts.timeout = opts.readTimeout;
    }

    this.jwproxy = new UIA2Proxy(proxyOpts);
    this.proxyReqRes = this.jwproxy.proxyReqRes.bind(this.jwproxy);
    this.proxyCommand = this.jwproxy.command.bind(this.jwproxy);
    this.jwproxy.didInstrumentationExit = false;
  }

  async installServerApk(installTimeout = SERVER_INSTALL_RETRIES * 1000) {
    const tmpRoot = await _support.tempDir.openDir();

    const packageInfosMapper = async ({
      appPath,
      appId
    }) => {
      if (await _helpers.default.isWriteable(appPath)) {
        return {
          appPath,
          appId
        };
      }

      this.log.info(`Server package at '${appPath}' is not writeable. ` + `Will copy it into the temporary location at '${tmpRoot}' as a workaround. ` + `Consider making this file writeable manually in order to improve the performance of session startup.`);

      const dstPath = _path.default.resolve(tmpRoot, _path.default.basename(appPath));

      await _support.fs.copyFile(appPath, dstPath);
      return {
        appPath: dstPath,
        appId
      };
    };

    try {
      const packagesInfo = await _bluebird.default.all(_bluebird.default.map([{
        appPath: _appiumUiautomator2Server.SERVER_APK_PATH,
        appId: SERVER_PACKAGE_ID
      }, {
        appPath: _appiumUiautomator2Server.TEST_APK_PATH,
        appId: SERVER_TEST_PACKAGE_ID
      }], packageInfosMapper));
      let shouldUninstallServerPackages = false;
      let shouldInstallServerPackages = false;

      for (const {
        appId,
        appPath
      } of packagesInfo) {
        if (appId === SERVER_TEST_PACKAGE_ID) {
          const isAppInstalled = await this.adb.isAppInstalled(appId);

          if (!(await this.adb.checkApkCert(appPath, appId))) {
            await _helpers.default.signApp(this.adb, appPath);
            shouldUninstallServerPackages = shouldUninstallServerPackages || isAppInstalled;
            shouldInstallServerPackages = true;
          }

          if (!isAppInstalled) {
            shouldInstallServerPackages = true;
          }

          continue;
        }

        const appState = await this.adb.getApplicationInstallState(appPath, appId);
        this.log.debug(`${appId} installation state: ${appState}`);

        if (await this.adb.checkApkCert(appPath, appId)) {
          shouldUninstallServerPackages = shouldUninstallServerPackages || [this.adb.APP_INSTALL_STATE.OLDER_VERSION_INSTALLED, this.adb.APP_INSTALL_STATE.NEWER_VERSION_INSTALLED].includes(appState);
        } else {
          await _helpers.default.signApp(this.adb, appPath);
          shouldUninstallServerPackages = shouldUninstallServerPackages || ![this.adb.APP_INSTALL_STATE.NOT_INSTALLED].includes(appState);
        }

        shouldInstallServerPackages = shouldInstallServerPackages || shouldUninstallServerPackages || [this.adb.APP_INSTALL_STATE.NOT_INSTALLED].includes(appState);
      }

      this.log.info(`Server packages are ${shouldInstallServerPackages ? '' : 'not '}going to be (re)installed`);

      if (shouldInstallServerPackages && shouldUninstallServerPackages) {
        this.log.info('Full packages reinstall is going to be performed');
      }

      for (const {
        appId,
        appPath
      } of packagesInfo) {
        if (shouldUninstallServerPackages) {
          try {
            await this.adb.uninstallApk(appId);
          } catch (err) {
            this.log.warn(`Error uninstalling '${appId}': ${err.message}`);
          }
        }

        if (shouldInstallServerPackages) {
          await this.adb.install(appPath, {
            noIncremental: true,
            replace: true,
            timeout: installTimeout,
            timeoutCapName: 'uiautomator2ServerInstallTimeout'
          });
        }
      }
    } finally {
      await _support.fs.rimraf(tmpRoot);
    }

    await this.verifyServicesAvailability();
  }

  async verifyServicesAvailability() {
    this.log.debug(`Waiting up to ${SERVICES_LAUNCH_TIMEOUT}ms for services to be available`);
    let isPmServiceAvailable = false;
    let pmOutput = '';
    let pmError = null;

    try {
      await (0, _asyncbox.waitForCondition)(async () => {
        if (!isPmServiceAvailable) {
          pmError = null;
          pmOutput = '';

          try {
            pmOutput = await this.adb.shell(['pm', 'list', 'instrumentation']);
          } catch (e) {
            pmError = e;
          }

          if (pmOutput.includes('Could not access the Package Manager')) {
            pmError = new Error(`Problem running Package Manager: ${pmOutput}`);
            pmOutput = '';
          } else if (pmOutput.includes(INSTRUMENTATION_TARGET)) {
            pmOutput = '';
            this.log.debug(`Instrumentation target '${INSTRUMENTATION_TARGET}' is available`);
            isPmServiceAvailable = true;
          } else if (!pmError) {
            pmError = new Error('The instrumentation target is not listed by Package Manager');
          }
        }

        return isPmServiceAvailable;
      }, {
        waitMs: SERVICES_LAUNCH_TIMEOUT,
        intervalMs: 1000
      });
    } catch (err) {
      this.log.error(`Unable to find instrumentation target '${INSTRUMENTATION_TARGET}': ${(pmError || {}).message}`);

      if (pmOutput) {
        this.log.debug('Available targets:');

        for (const line of pmOutput.split('\n')) {
          this.log.debug(`    ${line.replace('instrumentation:', '')}`);
        }
      }
    }
  }

  async startSession(caps) {
    await this.cleanupAutomationLeftovers();

    if (caps.skipServerInstallation) {
      this.log.info(`'skipServerInstallation' is set. Attempting to use UIAutomator2 server from the device`);
    } else {
      this.log.info(`Starting UIAutomator2 server ${_appiumUiautomator2Server.version}`);
      this.log.info(`Using UIAutomator2 server from '${_appiumUiautomator2Server.SERVER_APK_PATH}' and test from '${_appiumUiautomator2Server.TEST_APK_PATH}'`);
    }

    const timeout = caps.uiautomator2ServerLaunchTimeout || SERVER_LAUNCH_TIMEOUT;
    const timer = new _support.timing.Timer().start();
    let retries = 0;
    const maxRetries = 2;
    const delayBetweenRetries = 3000;

    while (retries < maxRetries) {
      this.log.info(`Waiting up to ${timeout}ms for UiAutomator2 to be online...`);
      this.jwproxy.didInstrumentationExit = false;
      await this.startInstrumentationProcess();

      if (!this.jwproxy.didInstrumentationExit) {
        try {
          await (0, _asyncbox.waitForCondition)(async () => {
            try {
              await this.jwproxy.command('/status', 'GET');
              return true;
            } catch (err) {
              return this.jwproxy.didInstrumentationExit;
            }
          }, {
            waitMs: timeout,
            intervalMs: 1000
          });
        } catch (err) {
          this.log.errorAndThrow(`The instrumentation process cannot be initialized within ${timeout}ms timeout. ` + 'Make sure the application under test does not crash and investigate the logcat output. ' + `You could also try to increase the value of 'uiautomator2ServerLaunchTimeout' capability`);
        }
      }

      if (!this.jwproxy.didInstrumentationExit) {
        break;
      }

      retries++;

      if (retries >= maxRetries) {
        this.log.errorAndThrow('The instrumentation process cannot be initialized. ' + 'Make sure the application under test does not crash and investigate the logcat output.');
      }

      this.log.warn(`The instrumentation process has been unexpectedly terminated. ` + `Retrying UiAutomator2 startup (#${retries} of ${maxRetries - 1})`);
      await this.cleanupAutomationLeftovers(true);
      await _bluebird.default.delay(delayBetweenRetries);
    }

    this.log.debug(`The initialization of the instrumentation process took ` + `${timer.getDuration().asMilliSeconds.toFixed(0)}ms`);
    await this.jwproxy.command('/session', 'POST', {
      capabilities: {
        firstMatch: [caps],
        alwaysMatch: {}
      }
    });
  }

  async startInstrumentationProcess() {
    const cmd = ['am', 'instrument', '-w'];

    if (this.disableWindowAnimation) {
      cmd.push('--no-window-animation');
    }

    if (_lodash.default.isBoolean(this.disableSuppressAccessibilityService)) {
      cmd.push('-e', 'DISABLE_SUPPRESS_ACCESSIBILITY_SERVICES', this.disableSuppressAccessibilityService);
    }

    cmd.push('-e', 'disableAnalytics', true);
    cmd.push(INSTRUMENTATION_TARGET);
    const instrumentationProcess = this.adb.createSubProcess(['shell', ...cmd]);
    instrumentationProcess.on('output', (stdout, stderr) => {
      const output = _lodash.default.trim(stdout || stderr);

      if (output) {
        instrumentationLogger.debug(output);
      }
    });
    instrumentationProcess.on('exit', code => {
      instrumentationLogger.debug(`The process has exited with code ${code}`);
      this.jwproxy.didInstrumentationExit = true;
    });
    await instrumentationProcess.start(0);
  }

  async deleteSession() {
    this.log.debug('Deleting UiAutomator2 server session');

    try {
      await this.jwproxy.command('/', 'DELETE');
    } catch (err) {
      this.log.warn(`Did not get confirmation UiAutomator2 deleteSession worked; ` + `Error was: ${err}`);
    }
  }

  async cleanupAutomationLeftovers(strictCleanup = false) {
    this.log.debug(`Performing ${strictCleanup ? 'strict' : 'shallow'} cleanup of automation leftovers`);

    try {
      const {
        value
      } = (await (0, _axios.default)({
        url: `http://${this.host}:${this.systemPort}/sessions`,
        timeout: 500
      })).data;
      const activeSessionIds = value.map(({
        id
      }) => id).filter(Boolean);

      if (activeSessionIds.length) {
        this.log.debug(`The following obsolete sessions are still running: ${JSON.stringify(activeSessionIds)}`);
        this.log.debug(`Cleaning up ${_support.util.pluralize('obsolete session', activeSessionIds.length, true)}`);
        await _bluebird.default.all(activeSessionIds.map(id => _axios.default.delete(`http://${this.host}:${this.systemPort}/session/${id}`)));
        await _bluebird.default.delay(1000);
      } else {
        this.log.debug('No obsolete sessions have been detected');
      }
    } catch (e) {
      this.log.debug(`No obsolete sessions have been detected (${e.message})`);
    }

    try {
      await this.adb.forceStop(SERVER_TEST_PACKAGE_ID);
    } catch (ignore) {}

    if (!strictCleanup) {
      return;
    }

    try {
      await this.adb.killProcessesByName('uiautomator');
    } catch (ignore) {}
  }

}

exports.UiAutomator2Server = UiAutomator2Server;
var _default = UiAutomator2Server;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
