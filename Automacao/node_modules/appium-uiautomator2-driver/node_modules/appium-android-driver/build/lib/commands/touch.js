"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.helpers = exports.default = exports.commands = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _androidHelpers = _interopRequireDefault(require("../android-helpers"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _driver = require("appium/driver");

var _asyncbox = require("asyncbox");

var _support = require("appium/support");

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;

function getCoordDefault(val) {
  return _support.util.hasValue(val) ? val : 0.5;
}

function getSwipeTouchDuration(waitGesture) {
  let duration = 0.8;

  if (typeof waitGesture.options.ms !== 'undefined' && waitGesture.options.ms) {
    duration = waitGesture.options.ms / 1000;

    if (duration === 0) {
      duration = 0.1;
    }
  }

  return duration;
}

commands.doTouchAction = async function doTouchAction(action, opts = {}) {
  const {
    element,
    x,
    y,
    count,
    ms,
    duration
  } = opts;

  switch (action) {
    case 'tap':
      return await this.tap(null, x, y, count);

    case 'press':
      return await this.touchDown(null, x, y);

    case 'release':
      return await this.touchUp(element, x, y);

    case 'moveTo':
      return await this.touchMove(null, x, y);

    case 'wait':
      return await _bluebird.default.delay(ms);

    case 'longPress':
      return await this.touchLongClick(null, x, y, duration || 1000);

    case 'cancel':
      this.log.warn('Cancel action currently has no effect');
      break;

    default:
      this.log.errorAndThrow(`unknown action ${action}`);
  }
};

helpers.doTouchDrag = async function doTouchDrag(gestures) {
  let longPress = gestures[0];
  let moveTo = gestures[1];
  let startX = longPress.options.x || 0,
      startY = longPress.options.y || 0,
      endX = moveTo.options.x || 0,
      endY = moveTo.options.y || 0;

  if (longPress.options.element) {
    let {
      x,
      y
    } = await this.getLocationInView(longPress.options.element);
    startX += x || 0;
    startY += y || 0;
  }

  if (moveTo.options.element) {
    let {
      x,
      y
    } = await this.getLocationInView(moveTo.options.element);
    endX += x || 0;
    endY += y || 0;
  }

  let apiLevel = await this.adb.getApiLevel();
  let duration = apiLevel >= 5 ? 2 : 1;

  if (longPress.options && longPress.options.duration) {
    duration = Math.max(longPress.options.duration / 1000, duration);
  }

  return await this.drag(startX, startY, endX, endY, duration, 1, longPress.options.element, moveTo.options.element);
};

helpers.fixRelease = async function fixRelease(gestures) {
  let release = _lodash.default.last(gestures);

  release.options = release.options || {};

  if (release.options.element || release.options.x && release.options.y) {
    return;
  }

  gestures = _lodash.default.clone(gestures);
  let ref = null;

  for (let gesture of gestures.reverse()) {
    let opts = gesture.options;

    if (opts.element || opts.x && opts.y) {
      ref = gesture;
      break;
    }
  }

  if (ref) {
    let opts = ref.options;

    if (opts.element) {
      let loc = await this.getLocationInView(opts.element);

      if (opts.x && opts.y) {
        release.options = {
          x: loc.x + opts.x,
          y: loc.y + opts.y
        };
      } else {
        let size = await this.getSize(opts.element);
        release.options = {
          x: loc.x + size.width / 2,
          y: loc.y + size.height / 2
        };
      }
    } else {
      release.options = _lodash.default.pick(opts, 'x', 'y');
    }
  }

  return release;
};

helpers.performGesture = async function performGesture(gesture) {
  try {
    return await this.doTouchAction(gesture.action, gesture.options || {});
  } catch (e) {
    if ((0, _driver.isErrorType)(e, _driver.errors.NoSuchElementError) && gesture.action === 'release' && gesture.options.element) {
      delete gesture.options.element;
      this.log.debug(`retrying release without element opts: ${gesture.options}.`);
      return await this.doTouchAction(gesture.action, gesture.options || {});
    }

    throw e;
  }
};

commands.getSwipeOptions = async function getSwipeOptions(gestures, touchCount = 1) {
  let startX = getCoordDefault(gestures[0].options.x),
      startY = getCoordDefault(gestures[0].options.y),
      endX = getCoordDefault(gestures[2].options.x),
      endY = getCoordDefault(gestures[2].options.y),
      duration = getSwipeTouchDuration(gestures[1]),
      element = gestures[0].options.element,
      destElement = gestures[2].options.element || gestures[0].options.element;

  if (_support.util.hasValue(destElement)) {
    let locResult = await this.getLocationInView(destElement);
    let sizeResult = await this.getSize(destElement);
    let offsetX = Math.abs(endX) < 1 && Math.abs(endX) > 0 ? sizeResult.width * endX : endX;
    let offsetY = Math.abs(endY) < 1 && Math.abs(endY) > 0 ? sizeResult.height * endY : endY;
    endX = locResult.x + offsetX;
    endY = locResult.y + offsetY;

    if (_support.util.hasValue(element)) {
      let firstElLocation = await this.getLocationInView(element);
      endX -= firstElLocation.x;
      endY -= firstElLocation.y;
    }
  }

  return {
    startX,
    startY,
    endX,
    endY,
    duration,
    touchCount,
    element
  };
};

commands.performTouch = async function performTouch(gestures) {
  if (gestures.length === 4 && gestures[0].action === 'press' && gestures[1].action === 'wait' && gestures[2].action === 'moveTo' && gestures[3].action === 'release') {
    let swipeOpts = await this.getSwipeOptions(gestures);
    return await this.swipe(swipeOpts.startX, swipeOpts.startY, swipeOpts.endX, swipeOpts.endY, swipeOpts.duration, swipeOpts.touchCount, swipeOpts.element);
  }

  let actions = _lodash.default.map(gestures, 'action');

  if (actions[0] === 'longPress' && actions[1] === 'moveTo' && actions[2] === 'release') {
    return await this.doTouchDrag(gestures);
  } else {
    if (actions.length === 2) {
      if (_lodash.default.head(actions) === 'press' && _lodash.default.last(actions) === 'release') {
        actions[0] = 'tap';
        gestures[0].action = 'tap';
      }

      if ((_lodash.default.head(actions) === 'tap' || _lodash.default.head(actions) === 'longPress') && _lodash.default.last(actions) === 'release') {
        gestures.pop();
        actions.pop();
      }
    } else {
      if (actions[0] === 'longPress') {
        actions = ['press', 'wait', ...actions.slice(1)];
        let press = gestures.shift();
        press.action = 'press';
        let wait = {
          action: 'wait',
          options: {
            ms: press.options.duration || 1000
          }
        };
        delete press.options.duration;
        gestures = [press, wait, ...gestures];
      }
    }

    let fixedGestures = await this.parseTouch(gestures, false);

    if (actions[actions.length - 1] === 'release') {
      actions[actions.length - 1] = await this.fixRelease(gestures);
    }

    for (let g of fixedGestures) {
      await this.performGesture(g);
    }
  }
};

helpers.parseTouch = async function parseTouch(gestures, multi) {
  if (multi && _lodash.default.last(gestures).action === 'release') {
    gestures.pop();
  }

  let touchStateObjects = await (0, _asyncbox.asyncmap)(gestures, async gesture => {
    let options = gesture.options || {};

    if (_lodash.default.includes(['press', 'moveTo', 'tap', 'longPress'], gesture.action)) {
      options.offset = false;
      let elementId = gesture.options.element;

      if (elementId) {
        let pos = await this.getLocationInView(elementId);

        if (gesture.options.x || gesture.options.y) {
          options.x = pos.x + (gesture.options.x || 0);
          options.y = pos.y + (gesture.options.y || 0);
        } else {
          const {
            width,
            height
          } = await this.getSize(elementId);
          options.x = pos.x + width / 2;
          options.y = pos.y + height / 2;
        }

        let touchStateObject = {
          action: gesture.action,
          options,
          timeOffset: 0.005
        };
        return touchStateObject;
      } else {
        options.x = gesture.options.x || 0;
        options.y = gesture.options.y || 0;
        let touchStateObject = {
          action: gesture.action,
          options,
          timeOffset: 0.005
        };
        return touchStateObject;
      }
    } else {
      let offset = 0.005;

      if (gesture.action === 'wait') {
        options = gesture.options;
        offset = parseInt(gesture.options.ms, 10) / 1000;
      }

      let touchStateObject = {
        action: gesture.action,
        options,
        timeOffset: offset
      };
      return touchStateObject;
    }
  }, false);
  let prevPos = null,
      time = 0;

  for (let state of touchStateObjects) {
    if (_lodash.default.isUndefined(state.options.x) && _lodash.default.isUndefined(state.options.y) && prevPos !== null) {
      state.options.x = prevPos.x;
      state.options.y = prevPos.y;
    }

    if (state.options.offset && prevPos) {
      state.options.x += prevPos.x;
      state.options.y += prevPos.y;
    }

    delete state.options.offset;

    if (!_lodash.default.isUndefined(state.options.x) && !_lodash.default.isUndefined(state.options.y)) {
      prevPos = state.options;
    }

    if (multi) {
      let timeOffset = state.timeOffset;
      time += timeOffset;
      state.time = _androidHelpers.default.truncateDecimals(time, 3);

      if (!_lodash.default.isUndefined(state.options.x) && !_lodash.default.isUndefined(state.options.y)) {
        state.touch = {
          x: state.options.x,
          y: state.options.y
        };
      }

      delete state.options;
    }

    delete state.timeOffset;
  }

  return touchStateObjects;
};

commands.performMultiAction = async function performMultiAction(actions, elementId) {
  if (actions.length === 1) {
    throw new Error('Multi Pointer Gestures need at least two actions. ' + 'Use Touch Actions for a single action.');
  }

  const states = await (0, _asyncbox.asyncmap)(actions, async action => await this.parseTouch(action, true), false);
  return await this.doPerformMultiAction(elementId, states);
};

commands.doPerformMultiAction = async function doPerformMultiAction(elementId, states) {
  let opts;

  if (elementId) {
    opts = {
      elementId,
      actions: states
    };
    return await this.bootstrap.sendAction('element:performMultiPointerGesture', opts);
  } else {
    opts = {
      actions: states
    };
    return await this.bootstrap.sendAction('performMultiPointerGesture', opts);
  }
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
