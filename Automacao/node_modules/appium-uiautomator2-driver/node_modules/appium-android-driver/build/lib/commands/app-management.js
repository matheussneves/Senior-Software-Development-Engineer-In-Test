"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _asyncbox = require("asyncbox");

var _support = require("appium/support");

var _androidHelpers = require("../android-helpers");

var _driver = require("appium/driver");

const APP_EXTENSIONS = ['.apk', '.apks'];
const RESOLVER_ACTIVITY_NAME = 'android/com.android.internal.app.ResolverActivity';
let commands = {};
exports.commands = commands;

commands.isAppInstalled = async function isAppInstalled(appId) {
  return await this.adb.isAppInstalled(appId);
};

commands.queryAppState = async function queryAppState(appId) {
  this.log.info(`Querying the state of '${appId}'`);

  if (!(await this.adb.isAppInstalled(appId))) {
    return _androidHelpers.APP_STATE.NOT_INSTALLED;
  }

  if (!(await this.adb.processExists(appId))) {
    return _androidHelpers.APP_STATE.NOT_RUNNING;
  }

  const appIdRe = new RegExp(`\\b${_lodash.default.escapeRegExp(appId)}/`);

  for (const line of (await this.adb.dumpWindows()).split('\n')) {
    if (appIdRe.test(line) && ['mCurrentFocus', 'mFocusedApp'].some(x => line.includes(x))) {
      return _androidHelpers.APP_STATE.RUNNING_IN_FOREGROUND;
    }
  }

  return _androidHelpers.APP_STATE.RUNNING_IN_BACKGROUND;
};

commands.activateApp = async function activateApp(appId) {
  this.log.debug(`Activating '${appId}'`);
  const apiLevel = await this.adb.getApiLevel();

  if (apiLevel < 24) {
    const cmd = ['monkey', '-p', appId, '-c', 'android.intent.category.LAUNCHER', '1'];
    let output = '';

    try {
      output = await this.adb.shell(cmd);
      this.log.debug(`Command stdout: ${output}`);
    } catch (e) {
      this.log.errorAndThrow(`Cannot activate '${appId}'. Original error: ${e.message}`);
    }

    if (output.includes('monkey aborted')) {
      this.log.errorAndThrow(`Cannot activate '${appId}'. Are you sure it is installed?`);
    }

    return;
  }

  let activityName = await this.adb.resolveLaunchableActivity(appId);

  if (activityName === RESOLVER_ACTIVITY_NAME) {
    this.log.debug(`The launchable activity name of '${appId}' was resolved to '${activityName}'. ` + `Switching the resolver to not use cmd`);
    activityName = await this.adb.resolveLaunchableActivity(appId, {
      preferCmd: false
    });
  }

  const stdout = await this.adb.shell(['am', apiLevel < 26 ? 'start' : 'start-activity', '-a', 'android.intent.action.MAIN', '-c', 'android.intent.category.LAUNCHER', '-f', '0x10200000', '-n', activityName]);
  this.log.debug(stdout);

  if (/^error:/mi.test(stdout)) {
    throw new Error(`Cannot activate '${appId}'. Original error: ${stdout}`);
  }
};

commands.removeApp = async function removeApp(appId, options = {}) {
  return await this.adb.uninstallApk(appId, options);
};

commands.terminateApp = async function terminateApp(appId, options = {}) {
  this.log.info(`Terminating '${appId}'`);

  if (!(await this.adb.processExists(appId))) {
    this.log.info(`The app '${appId}' is not running`);
    return false;
  }

  await this.adb.forceStop(appId);
  const timeout = _support.util.hasValue(options.timeout) && !isNaN(options.timeout) ? parseInt(options.timeout, 10) : 500;

  try {
    await (0, _asyncbox.waitForCondition)(async () => (await this.queryAppState(appId)) <= _androidHelpers.APP_STATE.NOT_RUNNING, {
      waitMs: timeout,
      intervalMs: 100
    });
  } catch (e) {
    this.log.errorAndThrow(`'${appId}' is still running after ${timeout}ms timeout`);
  }

  this.log.info(`'${appId}' has been successfully terminated`);
  return true;
};

commands.installApp = async function installApp(appPath, options = {}) {
  const localPath = await this.helpers.configureApp(appPath, APP_EXTENSIONS);
  await this.adb.install(localPath, options);
};

commands.mobileClearApp = async function mobileClearApp(opts = {}) {
  const {
    appId
  } = opts;

  if (!appId) {
    throw new _driver.errors.InvalidArgumentError(`The 'appId' argument is required`);
  }

  await this.adb.clear(appId);
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
