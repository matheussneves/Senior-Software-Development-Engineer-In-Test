"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSessionHelpers = createSessionHelpers;
exports.driverE2ETestSuite = driverE2ETestSuite;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _driver = require("appium/driver");

var _axios = _interopRequireDefault(require("axios"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _helpers = require("./helpers");

var _chai = _interopRequireDefault(require("chai"));

var _sinon = _interopRequireDefault(require("sinon"));

const should = _chai.default.should();

function createSessionHelpers(port, address = _helpers.TEST_HOST) {
  const createAppiumTestURL = (0, _helpers.createAppiumURL)(address, port);
  const createSessionURL = createAppiumTestURL(_lodash.default, '');
  const newSessionURL = createAppiumTestURL('', 'session');
  return {
    newSessionURL,
    createAppiumTestURL,
    postCommand: async (sessionId, cmdName, data = {}, config = {}) => {
      var _response$data;

      const url = createAppiumTestURL(sessionId, cmdName);
      const response = await _axios.default.post(url, data, config);
      return (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.value;
    },
    getCommand: async (sessionIdOrCmdName, cmdNameOrConfig, config = {}) => {
      var _response$data2;

      if (!_lodash.default.isString(cmdNameOrConfig)) {
        config = cmdNameOrConfig;
        cmdNameOrConfig = sessionIdOrCmdName;
        sessionIdOrCmdName = '';
      }

      const response = await (0, _axios.default)({
        url: createAppiumTestURL(sessionIdOrCmdName, cmdNameOrConfig),
        validateStatus: null,
        ...config
      });
      return (_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.value;
    },
    startSession: async (data, config = {}) => {
      var _response$data3;

      data = _lodash.default.defaultsDeep(data, {
        capabilities: {
          alwaysMatch: {},
          firstMatch: [{}]
        }
      });
      const response = await _axios.default.post(newSessionURL, data, config);
      return (_response$data3 = response.data) === null || _response$data3 === void 0 ? void 0 : _response$data3.value;
    },
    endSession: async sessionId => await _axios.default.delete(createSessionURL(sessionId), {
      validateStatus: null
    }),
    getSession: async sessionId => {
      var _response$data4;

      const response = await (0, _axios.default)({
        url: createSessionURL(sessionId),
        validateStatus: null
      });
      return (_response$data4 = response.data) === null || _response$data4 === void 0 ? void 0 : _response$data4.value;
    }
  };
}

function driverE2ETestSuite(DriverClass, defaultCaps = {}) {
  let address = defaultCaps['appium:address'] ?? _helpers.TEST_HOST;
  let port = defaultCaps['appium:port'];
  const className = DriverClass.name || '(unknown driver)';
  describe(`BaseDriver E2E (as ${className})`, function () {
    let baseServer;
    let d;
    let newSessionURL;
    let startSession;
    let getSession;
    let endSession;
    let getCommand;
    let postCommand;
    before(async function () {
      port = port ?? (await (0, _helpers.getTestPort)());
      defaultCaps = { ...defaultCaps,
        'appium:port': port
      };
      d = new DriverClass({
        port,
        address
      });
      baseServer = await (0, _driver.server)({
        routeConfiguringFunction: (0, _driver.routeConfiguringFunction)(d),
        port,
        hostname: address
      });
      ({
        startSession,
        getSession,
        endSession,
        newSessionURL,
        getCommand,
        postCommand
      } = createSessionHelpers(port, address));
    });
    after(async function () {
      await baseServer.close();
    });
    describe('session handling', function () {
      it('should handle idempotency while creating sessions', async function () {
        const sessionIds = [];
        let times = 0;

        do {
          const {
            sessionId
          } = await startSession({
            capabilities: {
              alwaysMatch: defaultCaps
            }
          }, {
            headers: {
              'X-Idempotency-Key': '123456'
            },
            simple: false,
            resolveWithFullResponse: true
          });
          sessionIds.push(sessionId);
          times++;
        } while (times < 2);

        _lodash.default.uniq(sessionIds).length.should.equal(1);

        const {
          status,
          data
        } = await endSession(sessionIds[0]);
        status.should.equal(200);
        should.equal(data.value, null);
      });
      it('should handle idempotency while creating parallel sessions', async function () {
        const reqs = [];
        let times = 0;

        do {
          reqs.push(startSession({
            capabilities: {
              alwaysMatch: defaultCaps
            }
          }, {
            headers: {
              'X-Idempotency-Key': '12345'
            }
          }));
          times++;
        } while (times < 2);

        const sessionIds = _lodash.default.map(await _bluebird.default.all(reqs), 'sessionId');

        _lodash.default.uniq(sessionIds).length.should.equal(1);

        const {
          status,
          data
        } = await endSession(sessionIds[0]);
        status.should.equal(200);
        should.equal(data.value, null);
      });
      it('should create session and retrieve a session id, then delete it', async function () {
        let {
          status,
          data
        } = await _axios.default.post(newSessionURL, {
          capabilities: {
            alwaysMatch: defaultCaps
          }
        });
        status.should.equal(200);
        should.exist(data.value.sessionId);
        data.value.capabilities.platformName.should.equal(defaultCaps.platformName);
        data.value.capabilities.deviceName.should.equal(defaultCaps['appium:deviceName']);
        ({
          status,
          data
        } = await endSession(d.sessionId));
        status.should.equal(200);
        should.equal(data.value, null);
        should.equal(d.sessionId, null);
      });
    });
    it.skip('should throw NYI for commands not implemented', async function () {});
    describe('command timeouts', function () {
      let originalFindElement, originalFindElements;

      async function startTimeoutSession(timeout) {
        const caps = _lodash.default.cloneDeep(defaultCaps);

        caps['appium:newCommandTimeout'] = timeout;
        return await startSession({
          capabilities: {
            alwaysMatch: caps
          }
        });
      }

      before(function () {
        originalFindElement = d.findElement;

        d.findElement = function () {
          return 'foo';
        }.bind(d);

        originalFindElements = d.findElements;

        d.findElements = async function () {
          await _bluebird.default.delay(200);
          return ['foo'];
        }.bind(d);
      });
      after(function () {
        d.findElement = originalFindElement;
        d.findElements = originalFindElements;
      });
      it('should set a default commandTimeout', async function () {
        let newSession = await startTimeoutSession();
        d.newCommandTimeoutMs.should.be.above(0);
        await endSession(newSession.sessionId);
      });
      it('should timeout on commands using commandTimeout cap', async function () {
        let newSession = await startTimeoutSession(0.25);
        const sessionId = d.sessionId;
        await postCommand(sessionId, 'element', {
          using: 'name',
          value: 'foo'
        });
        await _bluebird.default.delay(400);
        const value = await getSession(sessionId);
        should.equal(value.error, 'invalid session id');
        should.equal(d.sessionId, null);
        const resp = (await endSession(newSession.sessionId)).data.value;
        should.equal(resp === null || resp === void 0 ? void 0 : resp.error, 'invalid session id');
      });
      it('should not timeout with commandTimeout of false', async function () {
        let newSession = await startTimeoutSession(0.1);
        let start = Date.now();
        const value = await postCommand(d.sessionId, 'elements', {
          using: 'name',
          value: 'foo'
        });
        (Date.now() - start).should.be.above(150);
        value.should.eql(['foo']);
        await endSession(newSession.sessionId);
      });
      it('should not timeout with commandTimeout of 0', async function () {
        var _value$platformName;

        d.newCommandTimeoutMs = 2;
        let newSession = await startTimeoutSession(0);
        await postCommand(d.sessionId, 'element', {
          using: 'name',
          value: 'foo'
        });
        await _bluebird.default.delay(400);
        const value = await getSession(d.sessionId);
        (_value$platformName = value.platformName) === null || _value$platformName === void 0 ? void 0 : _value$platformName.should.equal(defaultCaps.platformName);
        const resp = (await endSession(newSession.sessionId)).data.value;
        should.equal(resp, null);
        d.newCommandTimeoutMs = 60 * 1000;
      });
      it('should not timeout if its just the command taking awhile', async function () {
        let newSession = await startTimeoutSession(0.25);
        const {
          sessionId
        } = d;
        await postCommand(d.sessionId, 'element', {
          using: 'name',
          value: 'foo'
        });
        await _bluebird.default.delay(400);
        const value = await getSession(sessionId);
        value.error.should.equal('invalid session id');
        should.equal(d.sessionId, null);
        const resp = (await endSession(newSession.sessionId)).data.value;
        resp.error.should.equal('invalid session id');
      });
      it('should not have a timer running before or after a session', async function () {
        should.not.exist(d.noCommandTimer);
        let newSession = await startTimeoutSession(0.25);
        newSession.sessionId.should.equal(d.sessionId);
        should.exist(d.noCommandTimer);
        await endSession(newSession.sessionId);
        should.not.exist(d.noCommandTimer);
      });
    });
    describe('settings api', function () {
      before(function () {
        d.settings = new _driver.DeviceSettings({
          ignoreUnimportantViews: false
        });
      });
      it('should be able to get settings object', function () {
        d.settings.getSettings().ignoreUnimportantViews.should.be.false;
      });
      it('should not reject when `updateSettings` method is not provided', async function () {
        await d.settings.update({
          ignoreUnimportantViews: true
        }).should.not.be.rejected;
      });
      it('should reject for invalid update object', async function () {
        await d.settings.update('invalid json').should.be.rejectedWith('JSON');
      });
    });
    describe('unexpected exits', function () {
      let sandbox;
      beforeEach(function () {
        sandbox = _sinon.default.createSandbox();
      });
      afterEach(function () {
        sandbox.restore();
      });
      it('should reject a current command when the driver crashes', async function () {
        sandbox.stub(d, 'getStatus').callsFake(async function () {
          await _bluebird.default.delay(5000);
        });
        const reqPromise = getCommand('status', {
          validateStatus: null
        });
        await _bluebird.default.delay(100);
        const shutdownEventPromise = new _bluebird.default((resolve, reject) => {
          setTimeout(() => reject(new Error('onUnexpectedShutdown event is expected to be fired within 5 seconds timeout')), 5000);
          d.onUnexpectedShutdown(resolve);
        });
        d.startUnexpectedShutdown(new Error('Crashytimes'));
        const value = await reqPromise;
        value.message.should.contain('Crashytimes');
        await shutdownEventPromise;
      });
    });
    describe('event timings', function () {
      it('should not add timings if not using opt-in cap', async function () {
        const session = await startSession({
          capabilities: {
            alwaysMatch: defaultCaps
          }
        });
        const res = await getSession(session.sessionId);
        should.not.exist(res.events);
        await endSession(session.sessionId);
      });
      it('should add start session timings', async function () {
        var _res$events, _res$events2, _res$events3, _res$events4;

        const caps = { ...defaultCaps,
          'appium:eventTimings': true
        };
        const session = await startSession({
          capabilities: {
            alwaysMatch: caps
          }
        });
        const res = await getSession(session.sessionId);
        should.exist(res.events);
        should.exist((_res$events = res.events) === null || _res$events === void 0 ? void 0 : _res$events.newSessionRequested);
        should.exist((_res$events2 = res.events) === null || _res$events2 === void 0 ? void 0 : _res$events2.newSessionStarted);
        (_res$events3 = res.events) === null || _res$events3 === void 0 ? void 0 : _res$events3.newSessionRequested[0].should.be.a('number');
        (_res$events4 = res.events) === null || _res$events4 === void 0 ? void 0 : _res$events4.newSessionStarted[0].should.be.a('number');
        await endSession(session.sessionId);
      });
    });
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,