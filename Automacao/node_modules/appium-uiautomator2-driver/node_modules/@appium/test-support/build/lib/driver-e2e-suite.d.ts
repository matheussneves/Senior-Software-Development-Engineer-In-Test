/**
 * Creates some helper functions for E2E tests to manage sessions.
 * @template [CommandData=unknown]
 * @template [ResponseData=any]
 * @param {number} port - Port on which the server is running. Typically this will be retrieved via `get-port` beforehand
 * @param {string} [address] - Address/host on which the server is running. Defaults to {@linkcode TEST_HOST}
 * @returns {SessionHelpers<CommandData, ResponseData>}
 */
export function createSessionHelpers<CommandData = unknown, ResponseData = any>(port: number, address?: string | undefined): SessionHelpers<CommandData, ResponseData>;
/**
 * Creates E2E test suites for a driver.
 * @template {Driver} P
 * @param {DriverClass<P>} DriverClass
 * @param {AppiumW3CCapabilities} [defaultCaps]
 */
export function driverE2ETestSuite<P extends import("@appium/types").Driver>(DriverClass: DriverClass<P>, defaultCaps?: Partial<import("@wdio/types/build/Capabilities").Capabilities & import("@wdio/types/build/Capabilities").AppiumW3CCapabilities & {
    [x: `${string}:${string}`]: any;
}> | undefined): void;
/**
 * A {@linkcode DriverClass }, except using the base {@linkcode Driver } type instead of `ExternalDriver`.
 * This allows the suite to work for `BaseDriver`.
 */
export type DriverClass<P extends import("@appium/types").Driver> = import('@appium/types').DriverClass<P>;
export type Capabilities = import('@appium/types').Capabilities;
export type Driver = import('@appium/types').Driver;
export type DriverStatic = import('@appium/types').DriverStatic;
export type AppiumW3CCapabilities = import('@appium/types').AppiumW3CCapabilities;
export type AxiosRequestConfig = import('axios').AxiosRequestConfig;
export type SingularSessionData = import('@appium/types').SingularSessionData;
export type AxiosResponse<T, D> = import('axios').AxiosResponse<T, D>;
export type NewSessionData = {
    capabilities: import('type-fest').RequireAtLeastOne<import('@appium/types').W3CCapabilities, 'firstMatch' | 'alwaysMatch'>;
};
export type NewSessionResponse = {
    /**
     * ,
     */
    sessionId: string;
    capabilities: import('@appium/types').Capabilities;
};
/**
 * Some E2E helpers for making requests and managing sessions
 * See {@linkcode createSessionHelpers }
 */
export type SessionHelpers<CommandData = unknown, ResponseData = any> = {
    /**
     * - URL to create a new session. Can be used with raw `axios` requests to fully inspect raw response.  Mostly, this will not be used.
     */
    newSessionURL: string;
    /**
     * - Begin a session
     */
    startSession: (data: NewSessionData, config?: AxiosRequestConfig) => Promise<NewSessionResponse>;
    /**
     * - End a session. _Note: resolves with raw response object_
     */
    endSession: (sessionId: string) => Promise<AxiosResponse<{
        value: {
            error?: string;
        } | null;
    }, {
        validateStatus: null;
    }>>;
    /**
     * - Get info about a session
     */
    getSession: (sessionId: string) => Promise<SingularSessionData>;
    /**
     * - Send an arbitrary command via `POST`.
     */
    postCommand: (sessionId: string, cmdName: string, data?: CommandData, config?: AxiosRequestConfig) => Promise<ResponseData>;
    /**
     * - Send an arbitrary command via `GET`. Optional `sessionId`.
     */
    getCommand: (sessionIdOrCmdName: string, cmdNameOrConfig: string | AxiosRequestConfig, config?: AxiosRequestConfig) => Promise<ResponseData>;
};
//# sourceMappingURL=driver-e2e-suite.d.ts.map