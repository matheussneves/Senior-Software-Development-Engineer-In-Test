"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "DEFAULT_ADB_EXEC_TIMEOUT", {
  enumerable: true,
  get: function () {
    return _helpers.DEFAULT_ADB_EXEC_TIMEOUT;
  }
});
exports.default = void 0;
exports.getAndroidBinaryPath = getAndroidBinaryPath;

require("source-map-support/register");

var _path = _interopRequireDefault(require("path"));

var _logger = _interopRequireDefault(require("../logger.js"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _support = require("@appium/support");

var _helpers = require("../helpers");

var _teen_process = require("teen_process");

var _asyncbox = require("asyncbox");

var _lodash = _interopRequireDefault(require("lodash"));

var _semver = _interopRequireDefault(require("semver"));

let systemCallMethods = {};
const DEFAULT_ADB_REBOOT_RETRIES = 90;
const LINKER_WARNING_REGEXP = /^WARNING: linker.+$/m;
const ADB_RETRY_ERROR_PATTERNS = [/protocol fault \(no status\)/i, /error: device ('.+' )?not found/i, /error: device still connecting/i];
const BINARY_VERSION_PATTERN = /^Version ([\d.]+)-(\d+)/m;
const BRIDGE_VERSION_PATTERN = /^Android Debug Bridge version ([\d.]+)/m;
const CERTS_ROOT = '/system/etc/security/cacerts';
const SDK_BINARY_ROOTS = ['platform-tools', 'emulator', ['cmdline-tools', 'latest', 'bin'], 'tools', ['tools', 'bin'], '.'];
const MIN_DELAY_ADB_API_LEVEL = 28;
const REQUIRED_SERVICES = ['activity', 'package', 'mount'];

systemCallMethods.getSdkBinaryPath = async function getSdkBinaryPath(binaryName) {
  return await this.getBinaryFromSdkRoot(binaryName);
};

systemCallMethods.getBinaryNameForOS = _lodash.default.memoize(function getBinaryNameForOSMemorize(binaryName) {
  return getBinaryNameForOS(binaryName);
});

function getBinaryNameForOS(binaryName) {
  if (!_support.system.isWindows()) {
    return binaryName;
  }

  if (['android', 'apksigner', 'apkanalyzer'].includes(binaryName)) {
    return `${binaryName}.bat`;
  }

  if (!_path.default.extname(binaryName)) {
    return `${binaryName}.exe`;
  }

  return binaryName;
}

systemCallMethods.getBinaryFromSdkRoot = async function getBinaryFromSdkRoot(binaryName) {
  if (this.binaries[binaryName]) {
    return this.binaries[binaryName];
  }

  const fullBinaryName = this.getBinaryNameForOS(binaryName);
  const binaryLocs = getSdkBinaryLocationCandidates(this.sdkRoot, fullBinaryName);
  let buildToolsDirs = await (0, _helpers.getBuildToolsDirs)(this.sdkRoot);

  if (this.buildToolsVersion) {
    buildToolsDirs = buildToolsDirs.filter(x => _path.default.basename(x) === this.buildToolsVersion);

    if (_lodash.default.isEmpty(buildToolsDirs)) {
      _logger.default.info(`Found no build tools whose version matches to '${this.buildToolsVersion}'`);
    } else {
      _logger.default.info(`Using build tools at '${buildToolsDirs}'`);
    }
  }

  binaryLocs.push(..._lodash.default.flatten(buildToolsDirs.map(dir => [_path.default.resolve(dir, fullBinaryName), _path.default.resolve(dir, 'lib', fullBinaryName)])));
  let binaryLoc = null;

  for (const loc of binaryLocs) {
    if (await _support.fs.exists(loc)) {
      binaryLoc = loc;
      break;
    }
  }

  if (_lodash.default.isNull(binaryLoc)) {
    throw new Error(`Could not find '${fullBinaryName}' in ${JSON.stringify(binaryLocs)}. ` + `Do you have Android Build Tools ${this.buildToolsVersion ? `v ${this.buildToolsVersion} ` : ''}` + `installed at '${this.sdkRoot}'?`);
  }

  _logger.default.info(`Using '${fullBinaryName}' from '${binaryLoc}'`);

  this.binaries[binaryName] = binaryLoc;
  return binaryLoc;
};

function getSdkBinaryLocationCandidates(sdkRoot, fullBinaryName) {
  return SDK_BINARY_ROOTS.map(x => _path.default.resolve(sdkRoot, ...(_lodash.default.isArray(x) ? x : [x]), fullBinaryName));
}

async function getAndroidBinaryPath(binaryName) {
  const fullBinaryName = getBinaryNameForOS(binaryName);
  const sdkRoot = (0, _helpers.getSdkRootFromEnv)();
  const binaryLocs = getSdkBinaryLocationCandidates(sdkRoot, fullBinaryName);

  for (const loc of binaryLocs) {
    if (await _support.fs.exists(loc)) {
      return loc;
    }
  }

  throw new Error(`Could not find '${fullBinaryName}' in ${JSON.stringify(binaryLocs)}. ` + `Do you have Android Build Tools installed at '${sdkRoot}'?`);
}

systemCallMethods.getBinaryFromPath = async function getBinaryFromPath(binaryName) {
  if (this.binaries[binaryName]) {
    return this.binaries[binaryName];
  }

  const fullBinaryName = this.getBinaryNameForOS(binaryName);

  try {
    const binaryLoc = await _support.fs.which(fullBinaryName);

    _logger.default.info(`Using '${fullBinaryName}' from '${binaryLoc}'`);

    this.binaries[binaryName] = binaryLoc;
    return binaryLoc;
  } catch (e) {
    throw new Error(`Could not find '${fullBinaryName}' in PATH. Please set the ANDROID_HOME ` + `or ANDROID_SDK_ROOT environment variables to the correct Android SDK root directory path.`);
  }
};

systemCallMethods.getConnectedDevices = async function getConnectedDevices(opts = {}) {
  _logger.default.debug('Getting connected devices');

  const args = [...this.executable.defaultArgs, 'devices'];

  if (opts.verbose) {
    args.push('-l');
  }

  let stdout;

  try {
    ({
      stdout
    } = await (0, _teen_process.exec)(this.executable.path, args));
  } catch (e) {
    throw new Error(`Error while getting connected devices. Original error: ${e.message}`);
  }

  const listHeader = 'List of devices';
  const startingIndex = stdout.indexOf(listHeader);

  if (startingIndex < 0) {
    throw new Error(`Unexpected output while trying to get devices: ${stdout}`);
  }

  stdout = stdout.slice(startingIndex);
  let excludedLines = [listHeader, 'adb server', '* daemon'];

  if (!this.allowOfflineDevices) {
    excludedLines.push('offline');
  }

  const devices = stdout.split('\n').map(_lodash.default.trim).filter(line => line && !excludedLines.some(x => line.includes(x))).map(line => {
    const [udid, state, ...description] = line.split(/\s+/);
    const device = {
      udid,
      state
    };

    if (opts.verbose) {
      for (const entry of description) {
        if (entry.includes(':')) {
          const [key, value] = entry.split(':');
          device[key] = value;
        }
      }
    }

    return device;
  });

  if (_lodash.default.isEmpty(devices)) {
    _logger.default.debug('No connected devices have been detected');
  } else {
    _logger.default.debug(`Connected devices: ${JSON.stringify(devices)}`);
  }

  return devices;
};

systemCallMethods.getDevicesWithRetry = async function getDevicesWithRetry(timeoutMs = 20000) {
  const timer = new _support.timing.Timer().start();

  _logger.default.debug('Trying to find a connected android device');

  const getDevices = async () => {
    if (timer.getDuration().asMilliSeconds > timeoutMs) {
      throw new Error(`Could not find a connected Android device in ${timer.getDuration().asMilliSeconds.toFixed(0)}ms.`);
    }

    try {
      const devices = await this.getConnectedDevices();

      if (devices.length > 0) {
        return devices;
      }
    } catch (ign) {}

    _logger.default.debug('Could not find online devices');

    try {
      await this.reconnect();
    } catch (ign) {
      await this.restartAdb();
    }

    await (0, _asyncbox.sleep)(200);
    return await getDevices();
  };

  return await getDevices();
};

systemCallMethods.reconnect = async function reconnect(target = 'offline') {
  _logger.default.debug(`Reconnecting adb (target ${target})`);

  const args = ['reconnect'];

  if (target) {
    args.push(target);
  }

  try {
    await this.adbExec(args);
  } catch (e) {
    throw new Error(`Cannot reconnect adb. Original error: ${e.stderr || e.message}`);
  }
};

systemCallMethods.restartAdb = async function restartAdb() {
  if (this.suppressKillServer) {
    _logger.default.debug(`Not restarting abd since 'suppressKillServer' is on`);

    return;
  }

  _logger.default.debug('Restarting adb');

  try {
    await this.killServer();
    await this.adbExec(['start-server']);
  } catch (e) {
    _logger.default.error(`Error killing ADB server, going to see if it's online anyway`);
  }
};

systemCallMethods.killServer = async function killServer() {
  _logger.default.debug(`Killing adb server on port '${this.adbPort}'`);

  await this.adbExec(['kill-server'], {
    exclusive: true
  });
};

systemCallMethods.resetTelnetAuthToken = _lodash.default.memoize(async function resetTelnetAuthToken() {
  const homeFolderPath = process.env[process.platform === 'win32' ? 'USERPROFILE' : 'HOME'];

  if (!homeFolderPath) {
    _logger.default.warn(`Cannot find the path to user home folder. Ignoring resetting of emulator's telnet authentication token`);

    return false;
  }

  const dstPath = _path.default.resolve(homeFolderPath, '.emulator_console_auth_token');

  _logger.default.debug(`Overriding ${dstPath} with an empty string to avoid telnet authentication for emulator commands`);

  try {
    await _support.fs.writeFile(dstPath, '');
  } catch (e) {
    _logger.default.warn(`Error ${e.message} while resetting the content of ${dstPath}. Ignoring resetting of emulator's telnet authentication token`);

    return false;
  }

  return true;
});

systemCallMethods.adbExecEmu = async function adbExecEmu(cmd) {
  await this.verifyEmulatorConnected();
  await this.resetTelnetAuthToken();
  await this.adbExec(['emu', ...cmd]);
};

let isExecLocked = false;
systemCallMethods.EXEC_OUTPUT_FORMAT = Object.freeze({
  STDOUT: 'stdout',
  FULL: 'full'
});

systemCallMethods.adbExec = async function adbExec(cmd, opts = {}) {
  if (!cmd) {
    throw new Error('You need to pass in a command to adbExec()');
  }

  opts = _lodash.default.cloneDeep(opts);
  opts.timeout = opts.timeout || this.adbExecTimeout || _helpers.DEFAULT_ADB_EXEC_TIMEOUT;
  opts.timeoutCapName = opts.timeoutCapName || 'adbExecTimeout';
  const {
    outputFormat = this.EXEC_OUTPUT_FORMAT.STDOUT
  } = opts;
  cmd = _lodash.default.isArray(cmd) ? cmd : [cmd];
  let adbRetried = false;

  const execFunc = async () => {
    try {
      const args = [...this.executable.defaultArgs, ...cmd];

      _logger.default.debug(`Running '${this.executable.path} ` + (args.find(arg => /\s+/.test(arg)) ? _support.util.quote(args) : args.join(' ')) + `'`);

      let {
        stdout,
        stderr
      } = await (0, _teen_process.exec)(this.executable.path, args, opts);
      stdout = stdout.replace(LINKER_WARNING_REGEXP, '').trim();
      return outputFormat === this.EXEC_OUTPUT_FORMAT.FULL ? {
        stdout,
        stderr
      } : stdout;
    } catch (e) {
      const errText = `${e.message}, ${e.stdout}, ${e.stderr}`;

      if (ADB_RETRY_ERROR_PATTERNS.some(p => p.test(errText))) {
        _logger.default.info(`Error sending command, reconnecting device and retrying: ${cmd}`);

        await (0, _asyncbox.sleep)(1000);
        await this.getDevicesWithRetry();

        if (adbRetried) {
          adbRetried = true;
          return await execFunc();
        }
      }

      if (e.code === 0 && e.stdout) {
        return e.stdout.replace(LINKER_WARNING_REGEXP, '').trim();
      }

      if (_lodash.default.isNull(e.code)) {
        e.message = `Error executing adbExec. Original error: '${e.message}'. ` + `Try to increase the ${opts.timeout}ms adb execution timeout represented by '${opts.timeoutCapName}' capability`;
      } else {
        e.message = `Error executing adbExec. Original error: '${e.message}'; ` + `Command output: ${e.stderr || e.stdout || '<empty>'}`;
      }

      throw e;
    }
  };

  if (isExecLocked) {
    _logger.default.debug('Waiting until the other exclusive ADB command is completed');

    await (0, _asyncbox.waitForCondition)(() => !isExecLocked, {
      waitMs: Number.MAX_SAFE_INTEGER,
      intervalMs: 10
    });

    _logger.default.debug('Continuing with the current ADB command');
  }

  if (opts.exclusive) {
    isExecLocked = true;
  }

  try {
    return await execFunc();
  } finally {
    if (opts.exclusive) {
      isExecLocked = false;
    }
  }
};

systemCallMethods.shell = async function shell(cmd, opts = {}) {
  const {
    privileged
  } = opts;
  const cmdArr = _lodash.default.isArray(cmd) ? cmd : [cmd];
  const fullCmd = ['shell'];

  if (privileged) {
    _logger.default.info(`'adb shell ${_support.util.quote(cmdArr)}' requires root access`);

    if (await this.isRoot()) {
      _logger.default.info('The device already had root access');

      fullCmd.push(...cmdArr);
    } else {
      fullCmd.push('su', 'root', _support.util.quote(cmdArr));
    }
  } else {
    fullCmd.push(...cmdArr);
  }

  return await this.adbExec(fullCmd, opts);
};

systemCallMethods.createSubProcess = function createSubProcess(args = []) {
  args = [...this.executable.defaultArgs, ...args];

  _logger.default.debug(`Creating ADB subprocess with args: ${JSON.stringify(args)}`);

  return new _teen_process.SubProcess(this.getAdbPath(), args);
};

systemCallMethods.getAdbServerPort = function getAdbServerPort() {
  return this.adbPort;
};

systemCallMethods.getEmulatorPort = async function getEmulatorPort() {
  _logger.default.debug('Getting running emulator port');

  if (this.emulatorPort !== null) {
    return this.emulatorPort;
  }

  try {
    let devices = await this.getConnectedDevices();
    let port = this.getPortFromEmulatorString(devices[0].udid);

    if (port) {
      return port;
    } else {
      throw new Error(`Emulator port not found`);
    }
  } catch (e) {
    throw new Error(`No devices connected. Original error: ${e.message}`);
  }
};

systemCallMethods.getPortFromEmulatorString = function getPortFromEmulatorString(emStr) {
  let portPattern = /emulator-(\d+)/;

  if (portPattern.test(emStr)) {
    return parseInt(portPattern.exec(emStr)[1], 10);
  }

  return false;
};

systemCallMethods.getConnectedEmulators = async function getConnectedEmulators(opts = {}) {
  _logger.default.debug('Getting connected emulators');

  try {
    let devices = await this.getConnectedDevices(opts);
    let emulators = [];

    for (let device of devices) {
      let port = this.getPortFromEmulatorString(device.udid);

      if (port) {
        device.port = port;
        emulators.push(device);
      }
    }

    _logger.default.debug(`${_support.util.pluralize('emulator', emulators.length, true)} connected`);

    return emulators;
  } catch (e) {
    throw new Error(`Error getting emulators. Original error: ${e.message}`);
  }
};

systemCallMethods.setEmulatorPort = function setEmulatorPort(emPort) {
  this.emulatorPort = emPort;
};

systemCallMethods.setDeviceId = function setDeviceId(deviceId) {
  _logger.default.debug(`Setting device id to ${deviceId}`);

  this.curDeviceId = deviceId;
  let argsHasDevice = this.executable.defaultArgs.indexOf('-s');

  if (argsHasDevice !== -1) {
    this.executable.defaultArgs.splice(argsHasDevice, 2);
  }

  this.executable.defaultArgs.push('-s', deviceId);
};

systemCallMethods.setDevice = function setDevice(deviceObj) {
  let deviceId = deviceObj.udid;
  let emPort = this.getPortFromEmulatorString(deviceId);
  this.setEmulatorPort(emPort);
  this.setDeviceId(deviceId);
};

systemCallMethods.getRunningAVD = async function getRunningAVD(avdName) {
  _logger.default.debug(`Trying to find '${avdName}' emulator`);

  try {
    const emulators = await this.getConnectedEmulators();

    for (const emulator of emulators) {
      this.setEmulatorPort(emulator.port);
      const runningAVDName = await this.execEmuConsoleCommand(['avd', 'name'], {
        port: emulator.port,
        execTimeout: 5000,
        connTimeout: 1000
      });

      if (_lodash.default.toLower(avdName) === _lodash.default.toLower(runningAVDName.trim())) {
        _logger.default.debug(`Found emulator '${avdName}' on port ${emulator.port}`);

        this.setDeviceId(emulator.udid);
        return emulator;
      }
    }

    _logger.default.debug(`Emulator '${avdName}' not running`);

    return null;
  } catch (e) {
    throw new Error(`Error getting AVD. Original error: ${e.message}`);
  }
};

systemCallMethods.getRunningAVDWithRetry = async function getRunningAVDWithRetry(avdName, timeoutMs = 20000) {
  try {
    return await (0, _asyncbox.waitForCondition)(async () => {
      try {
        return await this.getRunningAVD(avdName.replace('@', ''));
      } catch (e) {
        _logger.default.debug(e.message);

        return false;
      }
    }, {
      waitMs: timeoutMs,
      intervalMs: 1000
    });
  } catch (e) {
    throw new Error(`Error getting AVD with retry. Original error: ${e.message}`);
  }
};

systemCallMethods.killAllEmulators = async function killAllEmulators() {
  let cmd, args;

  if (_support.system.isWindows()) {
    cmd = 'TASKKILL';
    args = ['TASKKILL', '/IM', 'emulator.exe'];
  } else {
    cmd = '/usr/bin/killall';
    args = ['-m', 'emulator*'];
  }

  try {
    await (0, _teen_process.exec)(cmd, args);
  } catch (e) {
    throw new Error(`Error killing emulators. Original error: ${e.message}`);
  }
};

systemCallMethods.killEmulator = async function killEmulator(avdName = null, timeout = 60000) {
  if (_support.util.hasValue(avdName)) {
    _logger.default.debug(`Killing avd '${avdName}'`);

    const device = await this.getRunningAVD(avdName);

    if (!device) {
      _logger.default.info(`No avd with name '${avdName}' running. Skipping kill step.`);

      return false;
    }
  } else {
    _logger.default.debug(`Killing avd with id '${this.curDeviceId}'`);

    if (!(await this.isEmulatorConnected())) {
      _logger.default.debug(`Emulator with id '${this.curDeviceId}' not connected. Skipping kill step`);

      return false;
    }
  }

  await this.adbExec(['emu', 'kill']);

  _logger.default.debug(`Waiting up to ${timeout}ms until the emulator '${avdName ? avdName : this.curDeviceId}' is killed`);

  try {
    await (0, _asyncbox.waitForCondition)(async () => {
      try {
        return _support.util.hasValue(avdName) ? !(await this.getRunningAVD(avdName)) : !(await this.isEmulatorConnected());
      } catch (ign) {}

      return false;
    }, {
      waitMs: timeout,
      intervalMs: 2000
    });
  } catch (e) {
    throw new Error(`The emulator '${avdName ? avdName : this.curDeviceId}' is still running after being killed ${timeout}ms ago`);
  }

  _logger.default.info(`Successfully killed the '${avdName ? avdName : this.curDeviceId}' emulator`);

  return true;
};

systemCallMethods.launchAVD = async function launchAVD(avdName, opts = {}) {
  const {
    args = [],
    env = {},
    language,
    country,
    launchTimeout = 60000,
    readyTimeout = 60000,
    retryTimes = 1
  } = opts;

  _logger.default.debug(`Launching Emulator with AVD ${avdName}, launchTimeout ` + `${launchTimeout}ms and readyTimeout ${readyTimeout}ms`);

  const emulatorBinaryPath = await this.getSdkBinaryPath('emulator');

  if (avdName[0] === '@') {
    avdName = avdName.substr(1);
  }

  await this.checkAvdExist(avdName);
  const launchArgs = ['-avd', avdName];
  launchArgs.push(...(0, _helpers.toAvdLocaleArgs)(language, country));
  let isDelayAdbFeatureEnabled = false;

  if (this.allowDelayAdb) {
    const {
      revision
    } = await this.getEmuVersionInfo();

    if (revision && _support.util.compareVersions(revision, '>=', '29.0.7')) {
      try {
        const {
          target
        } = await this.getEmuImageProperties(avdName);
        const apiMatch = /\d+/.exec(target);

        if (apiMatch && parseInt(apiMatch[0], 10) >= MIN_DELAY_ADB_API_LEVEL) {
          launchArgs.push('-delay-adb');
          isDelayAdbFeatureEnabled = true;
        } else {
          throw new Error(`The actual image API version is below ${MIN_DELAY_ADB_API_LEVEL}`);
        }
      } catch (e) {
        _logger.default.info(`The -delay-adb emulator startup detection feature will not be enabled. ` + `Original error: ${e.message}`);
      }
    }
  } else {
    _logger.default.info('The -delay-adb emulator startup detection feature has been explicitly disabled');
  }

  if (!_lodash.default.isEmpty(args)) {
    launchArgs.push(...(_lodash.default.isArray(args) ? args : _support.util.shellParse(`${args}`)));
  }

  _logger.default.debug(`Running '${emulatorBinaryPath}' with args: ${_support.util.quote(launchArgs)}`);

  if (!_lodash.default.isEmpty(env)) {
    _logger.default.debug(`Customized emulator environment: ${JSON.stringify(env)}`);
  }

  const proc = new _teen_process.SubProcess(emulatorBinaryPath, launchArgs, {
    env: Object.assign({}, process.env, env)
  });
  await proc.start(0);
  proc.on('output', (stdout, stderr) => {
    for (let line of (stdout || stderr || '').split('\n').filter(Boolean)) {
      _logger.default.info(`[AVD OUTPUT] ${line}`);
    }
  });
  proc.on('die', (code, signal) => {
    _logger.default.warn(`Emulator avd ${avdName} exited with code ${code}${signal ? `, signal ${signal}` : ''}`);
  });
  await (0, _asyncbox.retry)(retryTimes, async () => await this.getRunningAVDWithRetry(avdName, launchTimeout));
  const timer = new _support.timing.Timer().start();

  if (isDelayAdbFeatureEnabled) {
    try {
      await this.adbExec(['wait-for-device'], {
        timeout: readyTimeout
      });
    } catch (e) {
      throw new Error(`'${avdName}' Emulator has failed to boot: ${e.stderr || e.message}`);
    }
  }

  await this.waitForEmulatorReady(readyTimeout - timer.getDuration().asMilliSeconds);
  return proc;
};

systemCallMethods.getVersion = _lodash.default.memoize(async function getVersion() {
  let stdout;

  try {
    stdout = await this.adbExec('version');
  } catch (e) {
    throw new Error(`Error getting adb version: ${e.stderr || e.message}`);
  }

  const result = {};
  const binaryVersionMatch = BINARY_VERSION_PATTERN.exec(stdout);

  if (binaryVersionMatch) {
    result.binary = {
      version: _semver.default.coerce(binaryVersionMatch[1]),
      build: parseInt(binaryVersionMatch[2], 10)
    };
  }

  const bridgeVersionMatch = BRIDGE_VERSION_PATTERN.exec(stdout);

  if (bridgeVersionMatch) {
    result.bridge = {
      version: _semver.default.coerce(bridgeVersionMatch[1])
    };
  }

  return result;
});

systemCallMethods.waitForEmulatorReady = async function waitForEmulatorReady(timeoutMs = 20000) {
  const requiredServicesRe = REQUIRED_SERVICES.map(name => new RegExp(`\\b${name}:`));
  let services;

  try {
    await (0, _asyncbox.waitForCondition)(async () => {
      try {
        services = await this.shell(['service', 'list']);
        return requiredServicesRe.every(pattern => pattern.test(services));
      } catch (err) {
        _logger.default.debug(`Waiting for emulator startup. Intermediate error: ${err.message}`);

        return false;
      }
    }, {
      waitMs: timeoutMs,
      intervalMs: 3000
    });
  } catch (e) {
    if (services) {
      _logger.default.debug(`Recently listed services:\n${services}`);
    }

    const missingServices = _lodash.default.zip(REQUIRED_SERVICES, requiredServicesRe).filter(([, pattern]) => !pattern.test(services)).map(([name]) => name);

    throw new Error(`Emulator is not ready within ${timeoutMs}ms ` + `(${missingServices} service${missingServices.length === 1 ? ' is' : 's are'} not running)`);
  }
};

systemCallMethods.waitForDevice = async function waitForDevice(appDeviceReadyTimeout = 30) {
  this.appDeviceReadyTimeout = appDeviceReadyTimeout;
  const retries = 3;
  const timeout = parseInt(this.appDeviceReadyTimeout, 10) * 1000 / retries;
  await (0, _asyncbox.retry)(retries, async () => {
    try {
      await this.adbExec('wait-for-device', {
        timeout
      });
      await this.ping();
    } catch (e) {
      try {
        await this.reconnect();
      } catch (ign) {
        await this.restartAdb();
      }

      await this.getConnectedDevices();
      throw new Error(`Error waiting for the device to be available. Original error: '${e.message}'`);
    }
  });
};

systemCallMethods.reboot = async function reboot(retries = DEFAULT_ADB_REBOOT_RETRIES) {
  const {
    wasAlreadyRooted
  } = await this.root();

  try {
    await this.shell(['stop']);
    await _bluebird.default.delay(2000);
    await this.setDeviceProperty('sys.boot_completed', 0, {
      privileged: false
    });
    await this.shell(['start']);
  } catch (e) {
    const {
      message
    } = e;

    if (message.includes('must be root')) {
      throw new Error(`Could not reboot device. Rebooting requires root access and ` + `attempt to get root access on device failed with error: '${message}'`);
    }

    throw e;
  } finally {
    if (!wasAlreadyRooted) {
      await this.unroot();
    }
  }

  const timer = new _support.timing.Timer().start();
  await (0, _asyncbox.retryInterval)(retries, 1000, async () => {
    if ((await this.getDeviceProperty('sys.boot_completed')) === '1') {
      return;
    }

    const msg = `Reboot is not completed after ${timer.getDuration().asMilliSeconds.toFixed(0)}ms`;

    _logger.default.debug(msg);

    throw new Error(msg);
  });
};

systemCallMethods.changeUserPrivileges = async function changeUserPrivileges(isElevated) {
  const cmd = isElevated ? 'root' : 'unroot';

  const retryIfOffline = async cmdFunc => {
    try {
      return await cmdFunc();
    } catch (err) {
      if (['closed', 'device offline', 'timeout expired'].some(x => (err.stderr || '').toLowerCase().includes(x))) {
        _logger.default.warn(`Attempt to ${cmd} caused ADB to think the device went offline`);

        try {
          await this.reconnect();
        } catch (ign) {
          await this.restartAdb();
        }

        return await cmdFunc();
      } else {
        throw err;
      }
    }
  };

  const isRoot = await retryIfOffline(async () => await this.isRoot());

  if (isRoot && isElevated || !isRoot && !isElevated) {
    return {
      isSuccessful: true,
      wasAlreadyRooted: isRoot
    };
  }

  let wasAlreadyRooted = isRoot;

  try {
    const {
      stdout
    } = await retryIfOffline(async () => await this.adbExec([cmd]));

    _logger.default.debug(stdout);

    if (stdout) {
      if (stdout.includes('adbd cannot run as root')) {
        return {
          isSuccessful: false,
          wasAlreadyRooted
        };
      }

      if (stdout.includes('already running as root')) {
        wasAlreadyRooted = true;
      }
    }

    return {
      isSuccessful: true,
      wasAlreadyRooted
    };
  } catch (err) {
    const {
      stderr = '',
      message
    } = err;

    _logger.default.warn(`Unable to ${cmd} adb daemon. Original error: '${message}'. Stderr: '${stderr}'. Continuing.`);

    return {
      isSuccessful: false,
      wasAlreadyRooted
    };
  }
};

systemCallMethods.root = async function root() {
  return await this.changeUserPrivileges(true);
};

systemCallMethods.unroot = async function unroot() {
  return await this.changeUserPrivileges(false);
};

systemCallMethods.isRoot = async function isRoot() {
  return (await this.shell(['whoami'])).trim() === 'root';
};

systemCallMethods.fileExists = async function fileExists(remotePath) {
  const passFlag = '__PASS__';
  const checkCmd = `[ -e '${remotePath.replace(/'/g, `\\'`)}' ] && echo ${passFlag}`;

  try {
    return _lodash.default.includes(await this.shell([checkCmd]), passFlag);
  } catch (ign) {
    return false;
  }
};

systemCallMethods.ls = async function ls(remotePath, opts = []) {
  try {
    let args = ['ls', ...opts, remotePath];
    let stdout = await this.shell(args);
    let lines = stdout.split('\n');
    return lines.map(l => l.trim()).filter(Boolean).filter(l => l.indexOf('No such file') === -1);
  } catch (err) {
    if (err.message.indexOf('No such file or directory') === -1) {
      throw err;
    }

    return [];
  }
};

systemCallMethods.fileSize = async function fileSize(remotePath) {
  try {
    const files = await this.ls(remotePath, ['-la']);

    if (files.length !== 1) {
      throw new Error(`Remote path is not a file`);
    }

    const match = /[rwxsStT\-+]{10}[\s\d]*\s[^\s]+\s+[^\s]+\s+(\d+)/.exec(files[0]);

    if (!match || _lodash.default.isNaN(parseInt(match[1], 10))) {
      throw new Error(`Unable to parse size from list output: '${files[0]}'`);
    }

    return parseInt(match[1], 10);
  } catch (err) {
    throw new Error(`Unable to get file size for '${remotePath}': ${err.message}`);
  }
};

systemCallMethods.installMitmCertificate = async function installMitmCertificate(cert) {
  const openSsl = await (0, _helpers.getOpenSslForOs)();

  if (!_lodash.default.isBuffer(cert)) {
    cert = Buffer.from(cert, 'base64');
  }

  const tmpRoot = await _support.tempDir.openDir();

  try {
    const srcCert = _path.default.resolve(tmpRoot, 'source.cer');

    await _support.fs.writeFile(srcCert, cert);
    let {
      stdout
    } = await (0, _teen_process.exec)(openSsl, ['x509', '-noout', '-hash', '-in', srcCert]);
    const certHash = stdout.trim();

    _logger.default.debug(`Got certificate hash: ${certHash}`);

    _logger.default.debug('Preparing certificate content');

    ({
      stdout
    } = await (0, _teen_process.exec)(openSsl, ['x509', '-in', srcCert], {
      isBuffer: true
    }));
    let dstCertContent = stdout;
    ({
      stdout
    } = await (0, _teen_process.exec)(openSsl, ['x509', '-in', srcCert, '-text', '-fingerprint', '-noout'], {
      isBuffer: true
    }));
    dstCertContent = Buffer.concat([dstCertContent, stdout]);

    const dstCert = _path.default.resolve(tmpRoot, `${certHash}.0`);

    await _support.fs.writeFile(dstCert, dstCertContent);

    _logger.default.debug('Remounting /system in rw mode');

    await (0, _asyncbox.retryInterval)(5, 2000, async () => await this.adbExec(['remount']));

    _logger.default.debug(`Uploading the generated certificate from '${dstCert}' to '${CERTS_ROOT}'`);

    await this.push(dstCert, CERTS_ROOT);

    _logger.default.debug('Remounting /system to confirm changes');

    await this.adbExec(['remount']);
  } catch (err) {
    throw new Error(`Cannot inject the custom certificate. ` + `Is the certificate properly encoded into base64-string? ` + `Do you have root permissions on the device? ` + `Original error: ${err.message}`);
  } finally {
    await _support.fs.rimraf(tmpRoot);
  }
};

systemCallMethods.isMitmCertificateInstalled = async function isMitmCertificateInstalled(cert) {
  const openSsl = await (0, _helpers.getOpenSslForOs)();

  if (!_lodash.default.isBuffer(cert)) {
    cert = Buffer.from(cert, 'base64');
  }

  const tmpRoot = await _support.tempDir.openDir();
  let certHash;

  try {
    const tmpCert = _path.default.resolve(tmpRoot, 'source.cer');

    await _support.fs.writeFile(tmpCert, cert);
    const {
      stdout
    } = await (0, _teen_process.exec)(openSsl, ['x509', '-noout', '-hash', '-in', tmpCert]);
    certHash = stdout.trim();
  } catch (err) {
    throw new Error(`Cannot retrieve the certificate hash. ` + `Is the certificate properly encoded into base64-string? ` + `Original error: ${err.message}`);
  } finally {
    await _support.fs.rimraf(tmpRoot);
  }

  const dstPath = _path.default.posix.resolve(CERTS_ROOT, `${certHash}.0`);

  _logger.default.debug(`Checking if the certificate is already installed at '${dstPath}'`);

  return await this.fileExists(dstPath);
};

var _default = systemCallMethods;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliL3Rvb2xzL3N5c3RlbS1jYWxscy5qcyIsIm5hbWVzIjpbInN5c3RlbUNhbGxNZXRob2RzIiwiREVGQVVMVF9BREJfUkVCT09UX1JFVFJJRVMiLCJMSU5LRVJfV0FSTklOR19SRUdFWFAiLCJBREJfUkVUUllfRVJST1JfUEFUVEVSTlMiLCJCSU5BUllfVkVSU0lPTl9QQVRURVJOIiwiQlJJREdFX1ZFUlNJT05fUEFUVEVSTiIsIkNFUlRTX1JPT1QiLCJTREtfQklOQVJZX1JPT1RTIiwiTUlOX0RFTEFZX0FEQl9BUElfTEVWRUwiLCJSRVFVSVJFRF9TRVJWSUNFUyIsImdldFNka0JpbmFyeVBhdGgiLCJiaW5hcnlOYW1lIiwiZ2V0QmluYXJ5RnJvbVNka1Jvb3QiLCJnZXRCaW5hcnlOYW1lRm9yT1MiLCJfIiwibWVtb2l6ZSIsImdldEJpbmFyeU5hbWVGb3JPU01lbW9yaXplIiwic3lzdGVtIiwiaXNXaW5kb3dzIiwiaW5jbHVkZXMiLCJwYXRoIiwiZXh0bmFtZSIsImJpbmFyaWVzIiwiZnVsbEJpbmFyeU5hbWUiLCJiaW5hcnlMb2NzIiwiZ2V0U2RrQmluYXJ5TG9jYXRpb25DYW5kaWRhdGVzIiwic2RrUm9vdCIsImJ1aWxkVG9vbHNEaXJzIiwiZ2V0QnVpbGRUb29sc0RpcnMiLCJidWlsZFRvb2xzVmVyc2lvbiIsImZpbHRlciIsIngiLCJiYXNlbmFtZSIsImlzRW1wdHkiLCJsb2ciLCJpbmZvIiwicHVzaCIsImZsYXR0ZW4iLCJtYXAiLCJkaXIiLCJyZXNvbHZlIiwiYmluYXJ5TG9jIiwibG9jIiwiZnMiLCJleGlzdHMiLCJpc051bGwiLCJFcnJvciIsIkpTT04iLCJzdHJpbmdpZnkiLCJpc0FycmF5IiwiZ2V0QW5kcm9pZEJpbmFyeVBhdGgiLCJnZXRTZGtSb290RnJvbUVudiIsImdldEJpbmFyeUZyb21QYXRoIiwid2hpY2giLCJlIiwiZ2V0Q29ubmVjdGVkRGV2aWNlcyIsIm9wdHMiLCJkZWJ1ZyIsImFyZ3MiLCJleGVjdXRhYmxlIiwiZGVmYXVsdEFyZ3MiLCJ2ZXJib3NlIiwic3Rkb3V0IiwiZXhlYyIsIm1lc3NhZ2UiLCJsaXN0SGVhZGVyIiwic3RhcnRpbmdJbmRleCIsImluZGV4T2YiLCJzbGljZSIsImV4Y2x1ZGVkTGluZXMiLCJhbGxvd09mZmxpbmVEZXZpY2VzIiwiZGV2aWNlcyIsInNwbGl0IiwidHJpbSIsImxpbmUiLCJzb21lIiwidWRpZCIsInN0YXRlIiwiZGVzY3JpcHRpb24iLCJkZXZpY2UiLCJlbnRyeSIsImtleSIsInZhbHVlIiwiZ2V0RGV2aWNlc1dpdGhSZXRyeSIsInRpbWVvdXRNcyIsInRpbWVyIiwidGltaW5nIiwiVGltZXIiLCJzdGFydCIsImdldERldmljZXMiLCJnZXREdXJhdGlvbiIsImFzTWlsbGlTZWNvbmRzIiwidG9GaXhlZCIsImxlbmd0aCIsImlnbiIsInJlY29ubmVjdCIsInJlc3RhcnRBZGIiLCJzbGVlcCIsInRhcmdldCIsImFkYkV4ZWMiLCJzdGRlcnIiLCJzdXBwcmVzc0tpbGxTZXJ2ZXIiLCJraWxsU2VydmVyIiwiZXJyb3IiLCJhZGJQb3J0IiwiZXhjbHVzaXZlIiwicmVzZXRUZWxuZXRBdXRoVG9rZW4iLCJob21lRm9sZGVyUGF0aCIsInByb2Nlc3MiLCJlbnYiLCJwbGF0Zm9ybSIsIndhcm4iLCJkc3RQYXRoIiwid3JpdGVGaWxlIiwiYWRiRXhlY0VtdSIsImNtZCIsInZlcmlmeUVtdWxhdG9yQ29ubmVjdGVkIiwiaXNFeGVjTG9ja2VkIiwiRVhFQ19PVVRQVVRfRk9STUFUIiwiT2JqZWN0IiwiZnJlZXplIiwiU1RET1VUIiwiRlVMTCIsImNsb25lRGVlcCIsInRpbWVvdXQiLCJhZGJFeGVjVGltZW91dCIsIkRFRkFVTFRfQURCX0VYRUNfVElNRU9VVCIsInRpbWVvdXRDYXBOYW1lIiwib3V0cHV0Rm9ybWF0IiwiYWRiUmV0cmllZCIsImV4ZWNGdW5jIiwiZmluZCIsImFyZyIsInRlc3QiLCJ1dGlsIiwicXVvdGUiLCJqb2luIiwicmVwbGFjZSIsImVyclRleHQiLCJwIiwiY29kZSIsIndhaXRGb3JDb25kaXRpb24iLCJ3YWl0TXMiLCJOdW1iZXIiLCJNQVhfU0FGRV9JTlRFR0VSIiwiaW50ZXJ2YWxNcyIsInNoZWxsIiwicHJpdmlsZWdlZCIsImNtZEFyciIsImZ1bGxDbWQiLCJpc1Jvb3QiLCJjcmVhdGVTdWJQcm9jZXNzIiwiU3ViUHJvY2VzcyIsImdldEFkYlBhdGgiLCJnZXRBZGJTZXJ2ZXJQb3J0IiwiZ2V0RW11bGF0b3JQb3J0IiwiZW11bGF0b3JQb3J0IiwicG9ydCIsImdldFBvcnRGcm9tRW11bGF0b3JTdHJpbmciLCJlbVN0ciIsInBvcnRQYXR0ZXJuIiwicGFyc2VJbnQiLCJnZXRDb25uZWN0ZWRFbXVsYXRvcnMiLCJlbXVsYXRvcnMiLCJwbHVyYWxpemUiLCJzZXRFbXVsYXRvclBvcnQiLCJlbVBvcnQiLCJzZXREZXZpY2VJZCIsImRldmljZUlkIiwiY3VyRGV2aWNlSWQiLCJhcmdzSGFzRGV2aWNlIiwic3BsaWNlIiwic2V0RGV2aWNlIiwiZGV2aWNlT2JqIiwiZ2V0UnVubmluZ0FWRCIsImF2ZE5hbWUiLCJlbXVsYXRvciIsInJ1bm5pbmdBVkROYW1lIiwiZXhlY0VtdUNvbnNvbGVDb21tYW5kIiwiZXhlY1RpbWVvdXQiLCJjb25uVGltZW91dCIsInRvTG93ZXIiLCJnZXRSdW5uaW5nQVZEV2l0aFJldHJ5Iiwia2lsbEFsbEVtdWxhdG9ycyIsImtpbGxFbXVsYXRvciIsImhhc1ZhbHVlIiwiaXNFbXVsYXRvckNvbm5lY3RlZCIsImxhdW5jaEFWRCIsImxhbmd1YWdlIiwiY291bnRyeSIsImxhdW5jaFRpbWVvdXQiLCJyZWFkeVRpbWVvdXQiLCJyZXRyeVRpbWVzIiwiZW11bGF0b3JCaW5hcnlQYXRoIiwic3Vic3RyIiwiY2hlY2tBdmRFeGlzdCIsImxhdW5jaEFyZ3MiLCJ0b0F2ZExvY2FsZUFyZ3MiLCJpc0RlbGF5QWRiRmVhdHVyZUVuYWJsZWQiLCJhbGxvd0RlbGF5QWRiIiwicmV2aXNpb24iLCJnZXRFbXVWZXJzaW9uSW5mbyIsImNvbXBhcmVWZXJzaW9ucyIsImdldEVtdUltYWdlUHJvcGVydGllcyIsImFwaU1hdGNoIiwic2hlbGxQYXJzZSIsInByb2MiLCJhc3NpZ24iLCJvbiIsIkJvb2xlYW4iLCJzaWduYWwiLCJyZXRyeSIsIndhaXRGb3JFbXVsYXRvclJlYWR5IiwiZ2V0VmVyc2lvbiIsInJlc3VsdCIsImJpbmFyeVZlcnNpb25NYXRjaCIsImJpbmFyeSIsInZlcnNpb24iLCJzZW12ZXIiLCJjb2VyY2UiLCJidWlsZCIsImJyaWRnZVZlcnNpb25NYXRjaCIsImJyaWRnZSIsInJlcXVpcmVkU2VydmljZXNSZSIsIm5hbWUiLCJSZWdFeHAiLCJzZXJ2aWNlcyIsImV2ZXJ5IiwicGF0dGVybiIsImVyciIsIm1pc3NpbmdTZXJ2aWNlcyIsInppcCIsIndhaXRGb3JEZXZpY2UiLCJhcHBEZXZpY2VSZWFkeVRpbWVvdXQiLCJyZXRyaWVzIiwicGluZyIsInJlYm9vdCIsIndhc0FscmVhZHlSb290ZWQiLCJyb290IiwiQiIsImRlbGF5Iiwic2V0RGV2aWNlUHJvcGVydHkiLCJ1bnJvb3QiLCJyZXRyeUludGVydmFsIiwiZ2V0RGV2aWNlUHJvcGVydHkiLCJtc2ciLCJjaGFuZ2VVc2VyUHJpdmlsZWdlcyIsImlzRWxldmF0ZWQiLCJyZXRyeUlmT2ZmbGluZSIsImNtZEZ1bmMiLCJ0b0xvd2VyQ2FzZSIsImlzU3VjY2Vzc2Z1bCIsImZpbGVFeGlzdHMiLCJyZW1vdGVQYXRoIiwicGFzc0ZsYWciLCJjaGVja0NtZCIsImxzIiwibGluZXMiLCJsIiwiZmlsZVNpemUiLCJmaWxlcyIsIm1hdGNoIiwiaXNOYU4iLCJpbnN0YWxsTWl0bUNlcnRpZmljYXRlIiwiY2VydCIsIm9wZW5Tc2wiLCJnZXRPcGVuU3NsRm9yT3MiLCJpc0J1ZmZlciIsIkJ1ZmZlciIsImZyb20iLCJ0bXBSb290IiwidGVtcERpciIsIm9wZW5EaXIiLCJzcmNDZXJ0IiwiY2VydEhhc2giLCJkc3RDZXJ0Q29udGVudCIsImNvbmNhdCIsImRzdENlcnQiLCJyaW1yYWYiLCJpc01pdG1DZXJ0aWZpY2F0ZUluc3RhbGxlZCIsInRtcENlcnQiLCJwb3NpeCJdLCJzb3VyY2VSb290IjoiLi4vLi4vLi4iLCJzb3VyY2VzIjpbImxpYi90b29scy9zeXN0ZW0tY2FsbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgbG9nIGZyb20gJy4uL2xvZ2dlci5qcyc7XG5pbXBvcnQgQiBmcm9tICdibHVlYmlyZCc7XG5pbXBvcnQgeyBzeXN0ZW0sIGZzLCB1dGlsLCB0ZW1wRGlyLCB0aW1pbmcgfSBmcm9tICdAYXBwaXVtL3N1cHBvcnQnO1xuaW1wb3J0IHtcbiAgZ2V0QnVpbGRUb29sc0RpcnMsIHRvQXZkTG9jYWxlQXJncyxcbiAgZ2V0T3BlblNzbEZvck9zLCBERUZBVUxUX0FEQl9FWEVDX1RJTUVPVVQsIGdldFNka1Jvb3RGcm9tRW52XG59IGZyb20gJy4uL2hlbHBlcnMnO1xuaW1wb3J0IHsgZXhlYywgU3ViUHJvY2VzcyB9IGZyb20gJ3RlZW5fcHJvY2Vzcyc7XG5pbXBvcnQgeyBzbGVlcCwgcmV0cnksIHJldHJ5SW50ZXJ2YWwsIHdhaXRGb3JDb25kaXRpb24gfSBmcm9tICdhc3luY2JveCc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHNlbXZlciBmcm9tICdzZW12ZXInO1xuXG5cbmxldCBzeXN0ZW1DYWxsTWV0aG9kcyA9IHt9O1xuXG5jb25zdCBERUZBVUxUX0FEQl9SRUJPT1RfUkVUUklFUyA9IDkwO1xuY29uc3QgTElOS0VSX1dBUk5JTkdfUkVHRVhQID0gL15XQVJOSU5HOiBsaW5rZXIuKyQvbTtcbmNvbnN0IEFEQl9SRVRSWV9FUlJPUl9QQVRURVJOUyA9IFtcbiAgL3Byb3RvY29sIGZhdWx0IFxcKG5vIHN0YXR1c1xcKS9pLFxuICAvZXJyb3I6IGRldmljZSAoJy4rJyApP25vdCBmb3VuZC9pLFxuICAvZXJyb3I6IGRldmljZSBzdGlsbCBjb25uZWN0aW5nL2ksXG5dO1xuY29uc3QgQklOQVJZX1ZFUlNJT05fUEFUVEVSTiA9IC9eVmVyc2lvbiAoW1xcZC5dKyktKFxcZCspL207XG5jb25zdCBCUklER0VfVkVSU0lPTl9QQVRURVJOID0gL15BbmRyb2lkIERlYnVnIEJyaWRnZSB2ZXJzaW9uIChbXFxkLl0rKS9tO1xuY29uc3QgQ0VSVFNfUk9PVCA9ICcvc3lzdGVtL2V0Yy9zZWN1cml0eS9jYWNlcnRzJztcbmNvbnN0IFNES19CSU5BUllfUk9PVFMgPSBbXG4gICdwbGF0Zm9ybS10b29scycsXG4gICdlbXVsYXRvcicsXG4gIFsnY21kbGluZS10b29scycsICdsYXRlc3QnLCAnYmluJ10sXG4gICd0b29scycsXG4gIFsndG9vbHMnLCAnYmluJ10sXG4gICcuJyAvLyBBbGxvdyBjdXN0b20gc2RrUm9vdCB0byBzcGVjaWZ5IGZ1bGwgZm9sZGVyIHBhdGhcbl07XG5jb25zdCBNSU5fREVMQVlfQURCX0FQSV9MRVZFTCA9IDI4O1xuY29uc3QgUkVRVUlSRURfU0VSVklDRVMgPSBbJ2FjdGl2aXR5JywgJ3BhY2thZ2UnLCAnbW91bnQnXTtcblxuLyoqXG4gKiBSZXRyaWV2ZSBmdWxsIHBhdGggdG8gdGhlIGdpdmVuIGJpbmFyeS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmluYXJ5TmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBiaW5hcnkuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IEZ1bGwgcGF0aCB0byB0aGUgZ2l2ZW4gYmluYXJ5IGluY2x1ZGluZyBjdXJyZW50IFNESyByb290LlxuICovXG5zeXN0ZW1DYWxsTWV0aG9kcy5nZXRTZGtCaW5hcnlQYXRoID0gYXN5bmMgZnVuY3Rpb24gZ2V0U2RrQmluYXJ5UGF0aCAoYmluYXJ5TmFtZSkge1xuICByZXR1cm4gYXdhaXQgdGhpcy5nZXRCaW5hcnlGcm9tU2RrUm9vdChiaW5hcnlOYW1lKTtcbn07XG5cbi8qKlxuICogUmV0cmlldmUgZnVsbCBiaW5hcnkgbmFtZSBmb3IgdGhlIGN1cnJlbnQgb3BlcmF0aW5nIHN5c3RlbSBhcyBtZW1vdGl6ZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmluYXJ5TmFtZSAtIHNpbXBsZSBiaW5hcnkgbmFtZSwgZm9yIGV4YW1wbGUgJ2FuZHJvaWQnLlxuICogQHJldHVybiB7c3RyaW5nfSBGb3JtYXR0ZWQgYmluYXJ5IG5hbWUgZGVwZW5kaW5nIG9uIHRoZSBjdXJyZW50IHBsYXRmb3JtLFxuICogICAgICAgICAgICAgICAgICBmb3IgZXhhbXBsZSwgJ2FuZHJvaWQuYmF0JyBvbiBXaW5kb3dzLlxuICovXG5zeXN0ZW1DYWxsTWV0aG9kcy5nZXRCaW5hcnlOYW1lRm9yT1MgPSBfLm1lbW9pemUoZnVuY3Rpb24gZ2V0QmluYXJ5TmFtZUZvck9TTWVtb3JpemUgKGJpbmFyeU5hbWUpIHtcbiAgcmV0dXJuIGdldEJpbmFyeU5hbWVGb3JPUyhiaW5hcnlOYW1lKTtcbn0pO1xuXG4vKipcbiAqIFJldHJpZXZlIGZ1bGwgYmluYXJ5IG5hbWUgZm9yIHRoZSBjdXJyZW50IG9wZXJhdGluZyBzeXN0ZW0uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJpbmFyeU5hbWUgLSBzaW1wbGUgYmluYXJ5IG5hbWUsIGZvciBleGFtcGxlICdhbmRyb2lkJy5cbiAqIEByZXR1cm4ge3N0cmluZ30gRm9ybWF0dGVkIGJpbmFyeSBuYW1lIGRlcGVuZGluZyBvbiB0aGUgY3VycmVudCBwbGF0Zm9ybSxcbiAqICAgICAgICAgICAgICAgICAgZm9yIGV4YW1wbGUsICdhbmRyb2lkLmJhdCcgb24gV2luZG93cy5cbiAqL1xuZnVuY3Rpb24gZ2V0QmluYXJ5TmFtZUZvck9TIChiaW5hcnlOYW1lKSB7XG4gIGlmICghc3lzdGVtLmlzV2luZG93cygpKSB7XG4gICAgcmV0dXJuIGJpbmFyeU5hbWU7XG4gIH1cblxuICBpZiAoWydhbmRyb2lkJywgJ2Fwa3NpZ25lcicsICdhcGthbmFseXplciddLmluY2x1ZGVzKGJpbmFyeU5hbWUpKSB7XG4gICAgcmV0dXJuIGAke2JpbmFyeU5hbWV9LmJhdGA7XG4gIH1cbiAgaWYgKCFwYXRoLmV4dG5hbWUoYmluYXJ5TmFtZSkpIHtcbiAgICByZXR1cm4gYCR7YmluYXJ5TmFtZX0uZXhlYDtcbiAgfVxuICByZXR1cm4gYmluYXJ5TmFtZTtcbn1cblxuLyoqXG4gKiBSZXRyaWV2ZSBmdWxsIHBhdGggdG8gdGhlIGdpdmVuIGJpbmFyeSBhbmQgY2FjaGVzIGl0IGludG8gYGJpbmFyaWVzYFxuICogcHJvcGVydHkgb2YgdGhlIGN1cnJlbnQgQURCIGluc3RhbmNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiaW5hcnlOYW1lIC0gU2ltcGxlIG5hbWUgb2YgYSBiaW5hcnkgZmlsZS5cbiAqIEByZXR1cm4ge3N0cmluZ30gRnVsbCBwYXRoIHRvIHRoZSBnaXZlbiBiaW5hcnkuIFRoZSBtZXRob2QgdHJpZXNcbiAqICAgICAgICAgICAgICAgICAgdG8gZW51bWVyYXRlIGFsbCB0aGUga25vd24gbG9jYXRpb25zIHdoZXJlIHRoZSBiaW5hcnlcbiAqICAgICAgICAgICAgICAgICAgbWlnaHQgYmUgbG9jYXRlZCBhbmQgc3RvcHMgdGhlIHNlYXJjaCBhcyBzb29uIGFzIHRoZSBmaXJzdFxuICogICAgICAgICAgICAgICAgICBtYXRjaCBpcyBmb3VuZCBvbiB0aGUgbG9jYWwgZmlsZSBzeXN0ZW0uXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIGJpbmFyeSB3aXRoIGdpdmVuIG5hbWUgaXMgbm90IHByZXNlbnQgYXQgYW55XG4gKiAgICAgICAgICAgICAgICAgb2Yga25vd24gbG9jYXRpb25zIG9yIEFuZHJvaWQgU0RLIGlzIG5vdCBpbnN0YWxsZWQgb24gdGhlXG4gKiAgICAgICAgICAgICAgICAgbG9jYWwgZmlsZSBzeXN0ZW0uXG4gKi9cbnN5c3RlbUNhbGxNZXRob2RzLmdldEJpbmFyeUZyb21TZGtSb290ID0gYXN5bmMgZnVuY3Rpb24gZ2V0QmluYXJ5RnJvbVNka1Jvb3QgKGJpbmFyeU5hbWUpIHtcbiAgaWYgKHRoaXMuYmluYXJpZXNbYmluYXJ5TmFtZV0pIHtcbiAgICByZXR1cm4gdGhpcy5iaW5hcmllc1tiaW5hcnlOYW1lXTtcbiAgfVxuICBjb25zdCBmdWxsQmluYXJ5TmFtZSA9IHRoaXMuZ2V0QmluYXJ5TmFtZUZvck9TKGJpbmFyeU5hbWUpO1xuICBjb25zdCBiaW5hcnlMb2NzID0gZ2V0U2RrQmluYXJ5TG9jYXRpb25DYW5kaWRhdGVzKHRoaXMuc2RrUm9vdCwgZnVsbEJpbmFyeU5hbWUpO1xuXG4gIC8vIGdldCBzdWJwYXRocyBmb3IgY3VycmVudGx5IGluc3RhbGxlZCBidWlsZCB0b29sIGRpcmVjdG9yaWVzXG4gIGxldCBidWlsZFRvb2xzRGlycyA9IGF3YWl0IGdldEJ1aWxkVG9vbHNEaXJzKHRoaXMuc2RrUm9vdCk7XG4gIGlmICh0aGlzLmJ1aWxkVG9vbHNWZXJzaW9uKSB7XG4gICAgYnVpbGRUb29sc0RpcnMgPSBidWlsZFRvb2xzRGlyc1xuICAgICAgLmZpbHRlcigoeCkgPT4gcGF0aC5iYXNlbmFtZSh4KSA9PT0gdGhpcy5idWlsZFRvb2xzVmVyc2lvbik7XG4gICAgaWYgKF8uaXNFbXB0eShidWlsZFRvb2xzRGlycykpIHtcbiAgICAgIGxvZy5pbmZvKGBGb3VuZCBubyBidWlsZCB0b29scyB3aG9zZSB2ZXJzaW9uIG1hdGNoZXMgdG8gJyR7dGhpcy5idWlsZFRvb2xzVmVyc2lvbn0nYCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvZy5pbmZvKGBVc2luZyBidWlsZCB0b29scyBhdCAnJHtidWlsZFRvb2xzRGlyc30nYCk7XG4gICAgfVxuICB9XG4gIGJpbmFyeUxvY3MucHVzaCguLi4oXy5mbGF0dGVuKGJ1aWxkVG9vbHNEaXJzXG4gICAgLm1hcCgoZGlyKSA9PiBbXG4gICAgICBwYXRoLnJlc29sdmUoZGlyLCBmdWxsQmluYXJ5TmFtZSksXG4gICAgICBwYXRoLnJlc29sdmUoZGlyLCAnbGliJywgZnVsbEJpbmFyeU5hbWUpLFxuICAgIF0pKVxuICApKTtcblxuICBsZXQgYmluYXJ5TG9jID0gbnVsbDtcbiAgZm9yIChjb25zdCBsb2Mgb2YgYmluYXJ5TG9jcykge1xuICAgIGlmIChhd2FpdCBmcy5leGlzdHMobG9jKSkge1xuICAgICAgYmluYXJ5TG9jID0gbG9jO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIGlmIChfLmlzTnVsbChiaW5hcnlMb2MpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZCBub3QgZmluZCAnJHtmdWxsQmluYXJ5TmFtZX0nIGluICR7SlNPTi5zdHJpbmdpZnkoYmluYXJ5TG9jcyl9LiBgICtcbiAgICAgIGBEbyB5b3UgaGF2ZSBBbmRyb2lkIEJ1aWxkIFRvb2xzICR7dGhpcy5idWlsZFRvb2xzVmVyc2lvbiA/IGB2ICR7dGhpcy5idWlsZFRvb2xzVmVyc2lvbn0gYCA6ICcnfWAgK1xuICAgICAgYGluc3RhbGxlZCBhdCAnJHt0aGlzLnNka1Jvb3R9Jz9gKTtcbiAgfVxuICBsb2cuaW5mbyhgVXNpbmcgJyR7ZnVsbEJpbmFyeU5hbWV9JyBmcm9tICcke2JpbmFyeUxvY30nYCk7XG4gIHRoaXMuYmluYXJpZXNbYmluYXJ5TmFtZV0gPSBiaW5hcnlMb2M7XG4gIHJldHVybiBiaW5hcnlMb2M7XG59O1xuXG4vKipcbiAqICBSZXR1cm5zIHRoZSBBbmRyb2lkIGJpbmFyaWVzIGxvY2F0aW9uc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzZGtSb290IFRoZSBwYXRoIHRvIEFuZHJvaWQgU0RLIHJvb3QuXG4gKiBAcGFyYW0ge3N0cmluZ30gZnVsbEJpbmFyeU5hbWUgVGhlIG5hbWUgb2YgZnVsbCBiaW5hcnkgbmFtZS5cbiAqIEByZXR1cm4ge0FycmF5PHN0cmluZz59IFRoZSBsaXN0IG9mIFNES19CSU5BUllfUk9PVFMgcGF0aHNcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICB3aXRoIHNka1Jvb3QgYW5kIGZ1bGxCaW5hcnlOYW1lLlxuICovXG5mdW5jdGlvbiBnZXRTZGtCaW5hcnlMb2NhdGlvbkNhbmRpZGF0ZXMgKHNka1Jvb3QsIGZ1bGxCaW5hcnlOYW1lKSB7XG4gIHJldHVybiBTREtfQklOQVJZX1JPT1RTLm1hcCgoeCkgPT5cbiAgICBwYXRoLnJlc29sdmUoc2RrUm9vdCwgLi4uKF8uaXNBcnJheSh4KSA/IHggOiBbeF0pLCBmdWxsQmluYXJ5TmFtZSkpO1xufVxuXG4vKipcbiAqIFJldHJpZXZlIGZ1bGwgcGF0aCB0byB0aGUgZ2l2ZW4gYmluYXJ5LlxuICogVGhpcyBtZXRob2QgZG9lcyBub3QgaGF2ZSBjYWNoZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmluYXJ5TmFtZSAtIFNpbXBsZSBuYW1lIG9mIGEgYmluYXJ5IGZpbGUuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuZy4gJ2FkYicsICdhbmRyb2lkJ1xuICogQHJldHVybiB7c3RyaW5nfSBGdWxsIHBhdGggdG8gdGhlIGdpdmVuIGJpbmFyeS4gVGhlIG1ldGhvZCB0cmllc1xuICogICAgICAgICAgICAgICAgICB0byBlbnVtZXJhdGUgYWxsIHRoZSBrbm93biBsb2NhdGlvbnMgd2hlcmUgdGhlIGJpbmFyeVxuICogICAgICAgICAgICAgICAgICBtaWdodCBiZSBsb2NhdGVkIGFuZCBzdG9wcyB0aGUgc2VhcmNoIGFzIHNvb24gYXMgdGhlIGZpcnN0XG4gKiAgICAgICAgICAgICAgICAgIG1hdGNoIGlzIGZvdW5kIG9uIHRoZSBsb2NhbCBmaWxlIHN5c3RlbS5cbiAqICAgICAgICAgICAgICAgICAgZS5nLiAnL1BhdGgvVG8vQW5kcm9pZC9zZGsvcGxhdGZvcm0tdG9vbHMvYWRiJ1xuICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBiaW5hcnkgd2l0aCBnaXZlbiBuYW1lIGlzIG5vdCBwcmVzZW50IGF0IGFueVxuICogICAgICAgICAgICAgICAgIG9mIGtub3duIGxvY2F0aW9ucyBvciBBbmRyb2lkIFNESyBpcyBub3QgaW5zdGFsbGVkIG9uIHRoZVxuICogICAgICAgICAgICAgICAgIGxvY2FsIGZpbGUgc3lzdGVtLlxuICovXG5hc3luYyBmdW5jdGlvbiBnZXRBbmRyb2lkQmluYXJ5UGF0aCAoYmluYXJ5TmFtZSkge1xuICBjb25zdCBmdWxsQmluYXJ5TmFtZSA9IGdldEJpbmFyeU5hbWVGb3JPUyhiaW5hcnlOYW1lKTtcbiAgY29uc3Qgc2RrUm9vdCA9IGdldFNka1Jvb3RGcm9tRW52KCk7XG4gIGNvbnN0IGJpbmFyeUxvY3MgPSBnZXRTZGtCaW5hcnlMb2NhdGlvbkNhbmRpZGF0ZXMoc2RrUm9vdCwgZnVsbEJpbmFyeU5hbWUpO1xuICBmb3IgKGNvbnN0IGxvYyBvZiBiaW5hcnlMb2NzKSB7XG4gICAgaWYgKGF3YWl0IGZzLmV4aXN0cyhsb2MpKSB7XG4gICAgICByZXR1cm4gbG9jO1xuICAgIH1cbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoYENvdWxkIG5vdCBmaW5kICcke2Z1bGxCaW5hcnlOYW1lfScgaW4gJHtKU09OLnN0cmluZ2lmeShiaW5hcnlMb2NzKX0uIGAgK1xuICAgIGBEbyB5b3UgaGF2ZSBBbmRyb2lkIEJ1aWxkIFRvb2xzIGluc3RhbGxlZCBhdCAnJHtzZGtSb290fSc/YCk7XG59XG5cbi8qKlxuICogUmV0cmlldmUgZnVsbCBwYXRoIHRvIGEgYmluYXJ5IGZpbGUgdXNpbmcgdGhlIHN0YW5kYXJkIHN5c3RlbSBsb29rdXAgdG9vbC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmluYXJ5TmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBiaW5hcnkuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IEZ1bGwgcGF0aCB0byB0aGUgYmluYXJ5IHJlY2VpdmVkIGZyb20gJ3doaWNoJy8nd2hlcmUnXG4gKiAgICAgICAgICAgICAgICAgIG91dHB1dC5cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiBsb29rdXAgdG9vbCByZXR1cm5zIG5vbi16ZXJvIHJldHVybiBjb2RlLlxuICovXG5zeXN0ZW1DYWxsTWV0aG9kcy5nZXRCaW5hcnlGcm9tUGF0aCA9IGFzeW5jIGZ1bmN0aW9uIGdldEJpbmFyeUZyb21QYXRoIChiaW5hcnlOYW1lKSB7XG4gIGlmICh0aGlzLmJpbmFyaWVzW2JpbmFyeU5hbWVdKSB7XG4gICAgcmV0dXJuIHRoaXMuYmluYXJpZXNbYmluYXJ5TmFtZV07XG4gIH1cblxuICBjb25zdCBmdWxsQmluYXJ5TmFtZSA9IHRoaXMuZ2V0QmluYXJ5TmFtZUZvck9TKGJpbmFyeU5hbWUpO1xuICB0cnkge1xuICAgIGNvbnN0IGJpbmFyeUxvYyA9IGF3YWl0IGZzLndoaWNoKGZ1bGxCaW5hcnlOYW1lKTtcbiAgICBsb2cuaW5mbyhgVXNpbmcgJyR7ZnVsbEJpbmFyeU5hbWV9JyBmcm9tICcke2JpbmFyeUxvY30nYCk7XG4gICAgdGhpcy5iaW5hcmllc1tiaW5hcnlOYW1lXSA9IGJpbmFyeUxvYztcbiAgICByZXR1cm4gYmluYXJ5TG9jO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZCBub3QgZmluZCAnJHtmdWxsQmluYXJ5TmFtZX0nIGluIFBBVEguIFBsZWFzZSBzZXQgdGhlIEFORFJPSURfSE9NRSBgICtcbiAgICAgIGBvciBBTkRST0lEX1NES19ST09UIGVudmlyb25tZW50IHZhcmlhYmxlcyB0byB0aGUgY29ycmVjdCBBbmRyb2lkIFNESyByb290IGRpcmVjdG9yeSBwYXRoLmApO1xuICB9XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IENvbm5lY3RlZERldmljZXNPcHRpb25zXG4gKiBAcHJvcGVydHkgez9ib29sZWFufSB2ZXJib3NlIC0gV2hldGhlciB0byBnZXQgbG9uZyBvdXRwdXQsIHdoaWNoIGluY2x1ZGVzIGV4dHJhIHByb3BlcnRpZXMgaW4gZWFjaCBkZXZpY2UuXG4gKiBBa2luIHRvIHJ1bm5pbmcgYGFkYiBkZXZpY2VzIC1sYC5cbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IERldmljZVxuICogQHByb3BlcnR5IHtzdHJpbmd9IHVkaWQgLSBUaGUgZGV2aWNlIHVkaWQuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gc3RhdGUgLSBDdXJyZW50IGRldmljZSBzdGF0ZSwgYXMgaXQgaXMgdmlzaWJsZSBpblxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2FkYiBkZXZpY2VzIC1sXyBvdXRwdXQuXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7RGV2aWNlfSBWZXJib3NlRGV2aWNlIEFkZGl0aW9uYWwgcHJvcGVydGllcyByZXR1cm5lZCB3aGVuIGB2ZXJib3NlYCBpcyB0cnVlLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IHByb2R1Y3QgLSBUaGUgcHJvZHVjdCBjb2RlbmFtZSBvZiB0aGUgZGV2aWNlLCBzdWNoIGFzIFwicmF6b3JcIi5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBtb2RlbCAtIFRoZSBtb2RlbCBuYW1lIG9mIHRoZSBkZXZpY2UsIHN1Y2ggYXMgXCJOZXh1c183XCIuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZGV2aWNlIC0gVGhlIGRldmljZSBjb2RlbmFtZSwgc3VjaCBhcyBcImZsb3dcIi5cbiAqIEBwcm9wZXJ0eSB7P3N0cmluZ30gdXNiIC0gUmVwcmVzZW50cyB0aGUgVVNCIHBvcnQgdGhlIGRldmljZSBpcyBjb25uZWN0ZWQgdG8sIHN1Y2ggYXMgXCIxLTFcIi5cbiAqIEBwcm9wZXJ0eSB7P3N0cmluZ30gdHJhbnNwb3J0X2lkIC0gVGhlIFRyYW5zcG9ydCBJRCBmb3IgdGhlIGRldmljZSwgc3VjaCBhcyBcIjFcIi5cbiAqL1xuXG4vKipcbiAqIFJldHJpZXZlIHRoZSBsaXN0IG9mIGRldmljZXMgdmlzaWJsZSB0byBhZGIuXG4gKlxuICogQHBhcmFtIHs/Q29ubmVjdGVkRGV2aWNlc09wdGlvbnN9IG9wdHMgW3t9XSAtIEFkZGl0aW9uYWwgb3B0aW9ucyBtYXBwaW5nLlxuICogQHJldHVybiB7QXJyYXkuPERldmljZT59IFRoZSBsaXN0IG9mIGRldmljZXMgb3IgYW4gZW1wdHkgbGlzdCBpZlxuICogICAgICAgICAgICAgICAgICAgICAgICAgIG5vIGRldmljZXMgYXJlIGNvbm5lY3RlZC5cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGVyZSB3YXMgYW4gZXJyb3Igd2hpbGUgbGlzdGluZyBkZXZpY2VzLlxuICovXG5zeXN0ZW1DYWxsTWV0aG9kcy5nZXRDb25uZWN0ZWREZXZpY2VzID0gYXN5bmMgZnVuY3Rpb24gZ2V0Q29ubmVjdGVkRGV2aWNlcyAob3B0cyA9IHt9KSB7XG4gIGxvZy5kZWJ1ZygnR2V0dGluZyBjb25uZWN0ZWQgZGV2aWNlcycpO1xuICBjb25zdCBhcmdzID0gWy4uLnRoaXMuZXhlY3V0YWJsZS5kZWZhdWx0QXJncywgJ2RldmljZXMnXTtcbiAgaWYgKG9wdHMudmVyYm9zZSkge1xuICAgIGFyZ3MucHVzaCgnLWwnKTtcbiAgfVxuXG4gIGxldCBzdGRvdXQ7XG4gIHRyeSB7XG4gICAgKHtzdGRvdXR9ID0gYXdhaXQgZXhlYyh0aGlzLmV4ZWN1dGFibGUucGF0aCwgYXJncykpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBFcnJvciB3aGlsZSBnZXR0aW5nIGNvbm5lY3RlZCBkZXZpY2VzLiBPcmlnaW5hbCBlcnJvcjogJHtlLm1lc3NhZ2V9YCk7XG4gIH1cbiAgY29uc3QgbGlzdEhlYWRlciA9ICdMaXN0IG9mIGRldmljZXMnO1xuICAvLyBleHBlY3RpbmcgYWRiIGRldmljZXMgdG8gcmV0dXJuIG91dHB1dCBhc1xuICAvLyBMaXN0IG9mIGRldmljZXMgYXR0YWNoZWRcbiAgLy8gZW11bGF0b3ItNTU1NFx0ZGV2aWNlXG4gIGNvbnN0IHN0YXJ0aW5nSW5kZXggPSBzdGRvdXQuaW5kZXhPZihsaXN0SGVhZGVyKTtcbiAgaWYgKHN0YXJ0aW5nSW5kZXggPCAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBVbmV4cGVjdGVkIG91dHB1dCB3aGlsZSB0cnlpbmcgdG8gZ2V0IGRldmljZXM6ICR7c3Rkb3V0fWApO1xuICB9XG4gIC8vIHNsaWNpbmcgb3V0cHV0IHdlIGNhcmUgYWJvdXRcbiAgc3Rkb3V0ID0gc3Rkb3V0LnNsaWNlKHN0YXJ0aW5nSW5kZXgpO1xuICBsZXQgZXhjbHVkZWRMaW5lcyA9IFtsaXN0SGVhZGVyLCAnYWRiIHNlcnZlcicsICcqIGRhZW1vbiddO1xuICBpZiAoIXRoaXMuYWxsb3dPZmZsaW5lRGV2aWNlcykge1xuICAgIGV4Y2x1ZGVkTGluZXMucHVzaCgnb2ZmbGluZScpO1xuICB9XG4gIGNvbnN0IGRldmljZXMgPSBzdGRvdXQuc3BsaXQoJ1xcbicpXG4gICAgLm1hcChfLnRyaW0pXG4gICAgLmZpbHRlcigobGluZSkgPT4gbGluZSAmJiAhZXhjbHVkZWRMaW5lcy5zb21lKCh4KSA9PiBsaW5lLmluY2x1ZGVzKHgpKSlcbiAgICAubWFwKChsaW5lKSA9PiB7XG4gICAgICAvLyBzdGF0ZSBpcyBcImRldmljZVwiLCBhZmFpY1xuICAgICAgY29uc3QgW3VkaWQsIHN0YXRlLCAuLi5kZXNjcmlwdGlvbl0gPSBsaW5lLnNwbGl0KC9cXHMrLyk7XG4gICAgICBjb25zdCBkZXZpY2UgPSB7dWRpZCwgc3RhdGV9O1xuICAgICAgaWYgKG9wdHMudmVyYm9zZSkge1xuICAgICAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGRlc2NyaXB0aW9uKSB7XG4gICAgICAgICAgaWYgKGVudHJ5LmluY2x1ZGVzKCc6JykpIHtcbiAgICAgICAgICAgIC8vIGVhY2ggZW50cnkgbG9va3MgbGlrZSBrZXk6dmFsdWVcbiAgICAgICAgICAgIGNvbnN0IFtrZXksIHZhbHVlXSA9IGVudHJ5LnNwbGl0KCc6Jyk7XG4gICAgICAgICAgICBkZXZpY2Vba2V5XSA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGRldmljZTtcbiAgICB9KTtcbiAgaWYgKF8uaXNFbXB0eShkZXZpY2VzKSkge1xuICAgIGxvZy5kZWJ1ZygnTm8gY29ubmVjdGVkIGRldmljZXMgaGF2ZSBiZWVuIGRldGVjdGVkJyk7XG4gIH0gZWxzZSB7XG4gICAgbG9nLmRlYnVnKGBDb25uZWN0ZWQgZGV2aWNlczogJHtKU09OLnN0cmluZ2lmeShkZXZpY2VzKX1gKTtcbiAgfVxuICByZXR1cm4gZGV2aWNlcztcbn07XG5cbi8qKlxuICogUmV0cmlldmUgdGhlIGxpc3Qgb2YgZGV2aWNlcyB2aXNpYmxlIHRvIGFkYiB3aXRoaW4gdGhlIGdpdmVuIHRpbWVvdXQuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHRpbWVvdXRNcyAtIFRoZSBtYXhpbXVtIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZ2V0IGF0IGxlYXN0XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25lIGxpc3QgaXRlbS5cbiAqIEByZXR1cm4ge0FycmF5LjxEZXZpY2U+fSBUaGUgbGlzdCBvZiBjb25uZWN0ZWQgZGV2aWNlcy5cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiBubyBjb25uZWN0ZWQgZGV2aWNlcyBjYW4gYmUgZGV0ZWN0ZWQgd2l0aGluIHRoZSBnaXZlbiB0aW1lb3V0LlxuICovXG5zeXN0ZW1DYWxsTWV0aG9kcy5nZXREZXZpY2VzV2l0aFJldHJ5ID0gYXN5bmMgZnVuY3Rpb24gZ2V0RGV2aWNlc1dpdGhSZXRyeSAodGltZW91dE1zID0gMjAwMDApIHtcbiAgY29uc3QgdGltZXIgPSBuZXcgdGltaW5nLlRpbWVyKCkuc3RhcnQoKTtcbiAgbG9nLmRlYnVnKCdUcnlpbmcgdG8gZmluZCBhIGNvbm5lY3RlZCBhbmRyb2lkIGRldmljZScpO1xuICBjb25zdCBnZXREZXZpY2VzID0gYXN5bmMgKCkgPT4ge1xuICAgIGlmICh0aW1lci5nZXREdXJhdGlvbigpLmFzTWlsbGlTZWNvbmRzID4gdGltZW91dE1zKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYENvdWxkIG5vdCBmaW5kIGEgY29ubmVjdGVkIEFuZHJvaWQgZGV2aWNlIGluICR7dGltZXIuZ2V0RHVyYXRpb24oKS5hc01pbGxpU2Vjb25kcy50b0ZpeGVkKDApfW1zLmApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgY29uc3QgZGV2aWNlcyA9IGF3YWl0IHRoaXMuZ2V0Q29ubmVjdGVkRGV2aWNlcygpO1xuICAgICAgaWYgKGRldmljZXMubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gZGV2aWNlcztcbiAgICAgIH1cbiAgICB9IGNhdGNoIChpZ24pIHt9XG5cbiAgICBsb2cuZGVidWcoJ0NvdWxkIG5vdCBmaW5kIG9ubGluZSBkZXZpY2VzJyk7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHRoaXMucmVjb25uZWN0KCk7XG4gICAgfSBjYXRjaCAoaWduKSB7XG4gICAgICBhd2FpdCB0aGlzLnJlc3RhcnRBZGIoKTtcbiAgICB9XG4gICAgLy8gY29vbCBkb3duXG4gICAgYXdhaXQgc2xlZXAoMjAwKTtcbiAgICByZXR1cm4gYXdhaXQgZ2V0RGV2aWNlcygpO1xuICB9O1xuICByZXR1cm4gYXdhaXQgZ2V0RGV2aWNlcygpO1xufTtcblxuLyoqXG4gKiBLaWNrIGN1cnJlbnQgY29ubmVjdGlvbiBmcm9tIGhvc3QvZGV2aWNlIHNpZGUgYW5kIG1ha2UgaXQgcmVjb25uZWN0XG4gKlxuICogQHBhcmFtIHs/c3RyaW5nfSB0YXJnZXQgW29mZmxpbmVdIE9uZSBvZiBwb3NzaWJsZSB0YXJnZXRzIHRvIHJlY29ubmVjdDpcbiAqIG9mZmxpbmUsIGRldmljZSBvciBudWxsXG4gKiBQcm92aWRpbmcgYG51bGxgIHdpbGwgY2F1c2UgcmVjb25uZWN0aW9uIHRvIGhhcHBlbiBmcm9tIHRoZSBob3N0IHNpZGUuXG4gKlxuICogQHRocm93cyB7RXJyb3J9IElmIGVpdGhlciBBREIgdmVyc2lvbiBpcyB0b28gb2xkIGFuZCBkb2VzIG5vdCBzdXBwb3J0IHRoaXNcbiAqIGNvbW1hbmQgb3IgdGhlcmUgd2FzIGEgZmFpbHVyZSBkdXJpbmcgcmVjb25uZWN0LlxuICovXG5zeXN0ZW1DYWxsTWV0aG9kcy5yZWNvbm5lY3QgPSBhc3luYyBmdW5jdGlvbiByZWNvbm5lY3QgKHRhcmdldCA9ICdvZmZsaW5lJykge1xuICBsb2cuZGVidWcoYFJlY29ubmVjdGluZyBhZGIgKHRhcmdldCAke3RhcmdldH0pYCk7XG5cbiAgY29uc3QgYXJncyA9IFsncmVjb25uZWN0J107XG4gIGlmICh0YXJnZXQpIHtcbiAgICBhcmdzLnB1c2godGFyZ2V0KTtcbiAgfVxuICB0cnkge1xuICAgIGF3YWl0IHRoaXMuYWRiRXhlYyhhcmdzKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IHJlY29ubmVjdCBhZGIuIE9yaWdpbmFsIGVycm9yOiAke2Uuc3RkZXJyIHx8IGUubWVzc2FnZX1gKTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXN0YXJ0IGFkYiBzZXJ2ZXIsIHVubGVzcyBfdGhpcy5zdXBwcmVzc0tpbGxTZXJ2ZXJfIHByb3BlcnR5IGlzIHRydWUuXG4gKi9cbnN5c3RlbUNhbGxNZXRob2RzLnJlc3RhcnRBZGIgPSBhc3luYyBmdW5jdGlvbiByZXN0YXJ0QWRiICgpIHtcbiAgaWYgKHRoaXMuc3VwcHJlc3NLaWxsU2VydmVyKSB7XG4gICAgbG9nLmRlYnVnKGBOb3QgcmVzdGFydGluZyBhYmQgc2luY2UgJ3N1cHByZXNzS2lsbFNlcnZlcicgaXMgb25gKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBsb2cuZGVidWcoJ1Jlc3RhcnRpbmcgYWRiJyk7XG4gIHRyeSB7XG4gICAgYXdhaXQgdGhpcy5raWxsU2VydmVyKCk7XG4gICAgYXdhaXQgdGhpcy5hZGJFeGVjKFsnc3RhcnQtc2VydmVyJ10pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgbG9nLmVycm9yKGBFcnJvciBraWxsaW5nIEFEQiBzZXJ2ZXIsIGdvaW5nIHRvIHNlZSBpZiBpdCdzIG9ubGluZSBhbnl3YXlgKTtcbiAgfVxufTtcblxuLyoqXG4gKiBLaWxsIGFkYiBzZXJ2ZXIuXG4gKi9cbnN5c3RlbUNhbGxNZXRob2RzLmtpbGxTZXJ2ZXIgPSBhc3luYyBmdW5jdGlvbiBraWxsU2VydmVyICgpIHtcbiAgbG9nLmRlYnVnKGBLaWxsaW5nIGFkYiBzZXJ2ZXIgb24gcG9ydCAnJHt0aGlzLmFkYlBvcnR9J2ApO1xuICBhd2FpdCB0aGlzLmFkYkV4ZWMoWydraWxsLXNlcnZlciddLCB7XG4gICAgZXhjbHVzaXZlOiB0cnVlLFxuICB9KTtcbn07XG5cbi8qKlxuICogUmVzZXQgVGVsbmV0IGF1dGhlbnRpY2F0aW9uIHRva2VuLlxuICogQHNlZSB7QGxpbmsgaHR0cDovL3Rvb2xzLmFuZHJvaWQuY29tL3JlY2VudC9lbXVsYXRvcjI1MTZyZWxlYXNlbm90ZXN9IGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IElmIHRva2VuIHJlc2V0IHdhcyBzdWNjZXNzZnVsLlxuICovXG5zeXN0ZW1DYWxsTWV0aG9kcy5yZXNldFRlbG5ldEF1dGhUb2tlbiA9IF8ubWVtb2l6ZShhc3luYyBmdW5jdGlvbiByZXNldFRlbG5ldEF1dGhUb2tlbiAoKSB7XG4gIC8vIFRoZSBtZXRob2RzIGlzIHVzZWQgdG8gcmVtb3ZlIHRlbG5ldCBhdXRoIHRva2VuXG4gIC8vXG4gIGNvbnN0IGhvbWVGb2xkZXJQYXRoID0gcHJvY2Vzcy5lbnZbKHByb2Nlc3MucGxhdGZvcm0gPT09ICd3aW4zMicpID8gJ1VTRVJQUk9GSUxFJyA6ICdIT01FJ107XG4gIGlmICghaG9tZUZvbGRlclBhdGgpIHtcbiAgICBsb2cud2FybihgQ2Fubm90IGZpbmQgdGhlIHBhdGggdG8gdXNlciBob21lIGZvbGRlci4gSWdub3JpbmcgcmVzZXR0aW5nIG9mIGVtdWxhdG9yJ3MgdGVsbmV0IGF1dGhlbnRpY2F0aW9uIHRva2VuYCk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IGRzdFBhdGggPSBwYXRoLnJlc29sdmUoaG9tZUZvbGRlclBhdGgsICcuZW11bGF0b3JfY29uc29sZV9hdXRoX3Rva2VuJyk7XG4gIGxvZy5kZWJ1ZyhgT3ZlcnJpZGluZyAke2RzdFBhdGh9IHdpdGggYW4gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHRlbG5ldCBhdXRoZW50aWNhdGlvbiBmb3IgZW11bGF0b3IgY29tbWFuZHNgKTtcbiAgdHJ5IHtcbiAgICBhd2FpdCBmcy53cml0ZUZpbGUoZHN0UGF0aCwgJycpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgbG9nLndhcm4oYEVycm9yICR7ZS5tZXNzYWdlfSB3aGlsZSByZXNldHRpbmcgdGhlIGNvbnRlbnQgb2YgJHtkc3RQYXRofS4gSWdub3JpbmcgcmVzZXR0aW5nIG9mIGVtdWxhdG9yJ3MgdGVsbmV0IGF1dGhlbnRpY2F0aW9uIHRva2VuYCk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufSk7XG5cbi8qKlxuICogRXhlY3V0ZSB0aGUgZ2l2ZW4gZW11bGF0b3IgY29tbWFuZCB1c2luZyBfYWRiIGVtdV8gdG9vbC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5LjxzdHJpbmc+fSBjbWQgLSBUaGUgYXJyYXkgb2YgcmVzdCBjb21tYW5kIGxpbmUgcGFyYW1ldGVycy5cbiAqL1xuc3lzdGVtQ2FsbE1ldGhvZHMuYWRiRXhlY0VtdSA9IGFzeW5jIGZ1bmN0aW9uIGFkYkV4ZWNFbXUgKGNtZCkge1xuICBhd2FpdCB0aGlzLnZlcmlmeUVtdWxhdG9yQ29ubmVjdGVkKCk7XG4gIGF3YWl0IHRoaXMucmVzZXRUZWxuZXRBdXRoVG9rZW4oKTtcbiAgYXdhaXQgdGhpcy5hZGJFeGVjKFsnZW11JywgLi4uY21kXSk7XG59O1xuXG5sZXQgaXNFeGVjTG9ja2VkID0gZmFsc2U7XG5cbnN5c3RlbUNhbGxNZXRob2RzLkVYRUNfT1VUUFVUX0ZPUk1BVCA9IE9iamVjdC5mcmVlemUoe1xuICBTVERPVVQ6ICdzdGRvdXQnLFxuICBGVUxMOiAnZnVsbCcsXG59KTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBFeGVjUmVzdWx0XG4gKiBAcHJvcGVydHkge3N0cmluZ30gc3Rkb3V0IFRoZSBzdGRvdXQgcmVjZWl2ZWQgZnJvbSBleGVjXG4gKiBAcHJvcGVydHkge3N0cmluZ30gc3RkZXJyIFRoZSBzdGRlcnIgcmVjZWl2ZWQgZnJvbSBleGVjXG4gKi9cblxuLyoqXG4gKiBFeGVjdXRlIHRoZSBnaXZlbiBhZGIgY29tbWFuZC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5LjxzdHJpbmc+fSBjbWQgLSBUaGUgYXJyYXkgb2YgcmVzdCBjb21tYW5kIGxpbmUgcGFyYW1ldGVyc1xuICogICAgICAgICAgICAgICAgICAgICAgb3IgYSBzaW5nbGUgc3RyaW5nIHBhcmFtZXRlci5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gQWRkaXRpb25hbCBvcHRpb25zIG1hcHBpbmcuIFNlZVxuICogICAgICAgICAgICAgICAgICAgICAgICB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2FwcGl1bS9ub2RlLXRlZW5fcHJvY2Vzc31cbiAqICAgICAgICAgICAgICAgICAgICAgICAgZm9yIG1vcmUgZGV0YWlscy5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgWW91IGNhbiBhbHNvIHNldCB0aGUgYWRkaXRpb25hbCBgZXhjbHVzaXZlYCBwYXJhbVxuICogICAgICAgICAgICAgICAgICAgICAgICB0byBgdHJ1ZWAgdGhhdCBhc3N1cmVzIG5vIG90aGVyIHBhcmFsbGVsIGFkYiBjb21tYW5kc1xuICogICAgICAgICAgICAgICAgICAgICAgICBhcmUgZ29pbmcgdG8gYmUgZXhlY3V0ZWQgd2hpbGUgdGhlIGN1cnJlbnQgb25lIGlzIHJ1bm5pbmdcbiAqICAgICAgICAgICAgICAgICAgICAgICAgWW91IGNhbiBzZXQgdGhlIGBvdXRwdXRGb3JtYXRgIHBhcmFtIHRvIGBzdGRvdXRgIHRvIHJlY2VpdmUganVzdCB0aGUgc3Rkb3V0XG4gKiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dCAoZGVmYXVsdCkgb3IgYGZ1bGxgIHRvIHJlY2VpdmUgdGhlIHN0ZG91dCBhbmQgc3RkZXJyIHJlc3BvbnNlIGZyb20gYVxuICogICAgICAgICAgICAgICAgICAgICAgICBjb21tYW5kIHdpdGggYSB6ZXJvIGV4aXQgY29kZVxuICogQHJldHVybiB7c3RyaW5nfEV4ZWNSZXN1bHR9IC0gQ29tbWFuZCdzIHN0ZG91dCBvciBhbiBvYmplY3QgY29udGFpbmluZyBzdGRvdXQgYW5kIHN0ZGVyci5cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgY29tbWFuZCByZXR1cm5lZCBub24temVybyBleGl0IGNvZGUuXG4gKi9cbnN5c3RlbUNhbGxNZXRob2RzLmFkYkV4ZWMgPSBhc3luYyBmdW5jdGlvbiBhZGJFeGVjIChjbWQsIG9wdHMgPSB7fSkge1xuICBpZiAoIWNtZCkge1xuICAgIHRocm93IG5ldyBFcnJvcignWW91IG5lZWQgdG8gcGFzcyBpbiBhIGNvbW1hbmQgdG8gYWRiRXhlYygpJyk7XG4gIH1cblxuICBvcHRzID0gXy5jbG9uZURlZXAob3B0cyk7XG4gIC8vIHNldHRpbmcgZGVmYXVsdCB0aW1lb3V0IGZvciBlYWNoIGNvbW1hbmQgdG8gcHJldmVudCBpbmZpbml0ZSB3YWl0LlxuICBvcHRzLnRpbWVvdXQgPSBvcHRzLnRpbWVvdXQgfHwgdGhpcy5hZGJFeGVjVGltZW91dCB8fCBERUZBVUxUX0FEQl9FWEVDX1RJTUVPVVQ7XG4gIG9wdHMudGltZW91dENhcE5hbWUgPSBvcHRzLnRpbWVvdXRDYXBOYW1lIHx8ICdhZGJFeGVjVGltZW91dCc7IC8vIEZvciBlcnJvciBtZXNzYWdlXG5cbiAgY29uc3Qge291dHB1dEZvcm1hdCA9IHRoaXMuRVhFQ19PVVRQVVRfRk9STUFULlNURE9VVH0gPSBvcHRzO1xuXG4gIGNtZCA9IF8uaXNBcnJheShjbWQpID8gY21kIDogW2NtZF07XG4gIGxldCBhZGJSZXRyaWVkID0gZmFsc2U7XG4gIGNvbnN0IGV4ZWNGdW5jID0gYXN5bmMgKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBhcmdzID0gWy4uLnRoaXMuZXhlY3V0YWJsZS5kZWZhdWx0QXJncywgLi4uY21kXTtcbiAgICAgIGxvZy5kZWJ1ZyhgUnVubmluZyAnJHt0aGlzLmV4ZWN1dGFibGUucGF0aH0gYCArXG4gICAgICAgIChhcmdzLmZpbmQoKGFyZykgPT4gL1xccysvLnRlc3QoYXJnKSkgPyB1dGlsLnF1b3RlKGFyZ3MpIDogYXJncy5qb2luKCcgJykpICsgYCdgKTtcbiAgICAgIGxldCB7c3Rkb3V0LCBzdGRlcnJ9ID0gYXdhaXQgZXhlYyh0aGlzLmV4ZWN1dGFibGUucGF0aCwgYXJncywgb3B0cyk7XG4gICAgICAvLyBzb21ldGltZXMgQURCIHByaW50cyBvdXQgd2VpcmQgc3Rkb3V0IHdhcm5pbmdzIHRoYXQgd2UgZG9uJ3Qgd2FudFxuICAgICAgLy8gdG8gaW5jbHVkZSBpbiBhbnkgb2YgdGhlIHJlc3BvbnNlIGRhdGEsIHNvIGxldCdzIHN0cmlwIGl0IG91dFxuICAgICAgc3Rkb3V0ID0gc3Rkb3V0LnJlcGxhY2UoTElOS0VSX1dBUk5JTkdfUkVHRVhQLCAnJykudHJpbSgpO1xuICAgICAgcmV0dXJuIG91dHB1dEZvcm1hdCA9PT0gdGhpcy5FWEVDX09VVFBVVF9GT1JNQVQuRlVMTCA/IHtzdGRvdXQsIHN0ZGVycn0gOiBzdGRvdXQ7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc3QgZXJyVGV4dCA9IGAke2UubWVzc2FnZX0sICR7ZS5zdGRvdXR9LCAke2Uuc3RkZXJyfWA7XG4gICAgICBpZiAoQURCX1JFVFJZX0VSUk9SX1BBVFRFUk5TLnNvbWUoKHApID0+IHAudGVzdChlcnJUZXh0KSkpIHtcbiAgICAgICAgbG9nLmluZm8oYEVycm9yIHNlbmRpbmcgY29tbWFuZCwgcmVjb25uZWN0aW5nIGRldmljZSBhbmQgcmV0cnlpbmc6ICR7Y21kfWApO1xuICAgICAgICBhd2FpdCBzbGVlcCgxMDAwKTtcbiAgICAgICAgYXdhaXQgdGhpcy5nZXREZXZpY2VzV2l0aFJldHJ5KCk7XG5cbiAgICAgICAgLy8gdHJ5IGFnYWluIG9uZSB0aW1lXG4gICAgICAgIGlmIChhZGJSZXRyaWVkKSB7XG4gICAgICAgICAgYWRiUmV0cmllZCA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuIGF3YWl0IGV4ZWNGdW5jKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGUuY29kZSA9PT0gMCAmJiBlLnN0ZG91dCkge1xuICAgICAgICByZXR1cm4gZS5zdGRvdXQucmVwbGFjZShMSU5LRVJfV0FSTklOR19SRUdFWFAsICcnKS50cmltKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChfLmlzTnVsbChlLmNvZGUpKSB7XG4gICAgICAgIGUubWVzc2FnZSA9IGBFcnJvciBleGVjdXRpbmcgYWRiRXhlYy4gT3JpZ2luYWwgZXJyb3I6ICcke2UubWVzc2FnZX0nLiBgICtcbiAgICAgICAgICBgVHJ5IHRvIGluY3JlYXNlIHRoZSAke29wdHMudGltZW91dH1tcyBhZGIgZXhlY3V0aW9uIHRpbWVvdXQgcmVwcmVzZW50ZWQgYnkgJyR7b3B0cy50aW1lb3V0Q2FwTmFtZX0nIGNhcGFiaWxpdHlgO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZS5tZXNzYWdlID0gYEVycm9yIGV4ZWN1dGluZyBhZGJFeGVjLiBPcmlnaW5hbCBlcnJvcjogJyR7ZS5tZXNzYWdlfSc7IGAgK1xuICAgICAgICAgIGBDb21tYW5kIG91dHB1dDogJHtlLnN0ZGVyciB8fCBlLnN0ZG91dCB8fCAnPGVtcHR5Pid9YDtcbiAgICAgIH1cbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9O1xuXG4gIGlmIChpc0V4ZWNMb2NrZWQpIHtcbiAgICBsb2cuZGVidWcoJ1dhaXRpbmcgdW50aWwgdGhlIG90aGVyIGV4Y2x1c2l2ZSBBREIgY29tbWFuZCBpcyBjb21wbGV0ZWQnKTtcbiAgICBhd2FpdCB3YWl0Rm9yQ29uZGl0aW9uKCgpID0+ICFpc0V4ZWNMb2NrZWQsIHtcbiAgICAgIHdhaXRNczogTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIsXG4gICAgICBpbnRlcnZhbE1zOiAxMCxcbiAgICB9KTtcbiAgICBsb2cuZGVidWcoJ0NvbnRpbnVpbmcgd2l0aCB0aGUgY3VycmVudCBBREIgY29tbWFuZCcpO1xuICB9XG4gIGlmIChvcHRzLmV4Y2x1c2l2ZSkge1xuICAgIGlzRXhlY0xvY2tlZCA9IHRydWU7XG4gIH1cbiAgdHJ5IHtcbiAgICByZXR1cm4gYXdhaXQgZXhlY0Z1bmMoKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBpZiAob3B0cy5leGNsdXNpdmUpIHtcbiAgICAgIGlzRXhlY0xvY2tlZCA9IGZhbHNlO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBTaGVsbEV4ZWNPcHRpb25zXG4gKiBAcHJvcGVydHkgez9zdHJpbmd9IHRpbWVvdXRDYXBOYW1lIFthZGJFeGVjVGltZW91dF0gLSB0aGUgbmFtZSBvZiB0aGUgY29ycmVzcG9uZGluZyBBcHBpdW0ncyB0aW1lb3V0IGNhcGFiaWxpdHlcbiAqICh1c2VkIGluIHRoZSBlcnJvciBtZXNzYWdlcykuXG4gKiBAcHJvcGVydHkgez9udW1iZXJ9IHRpbWVvdXQgW2FkYkV4ZWNUaW1lb3V0XSAtIGNvbW1hbmQgZXhlY3V0aW9uIHRpbWVvdXQuXG4gKiBAcHJvcGVydHkgez9ib29sZWFufSBwcml2aWxlZ2VkIFtmYWxzeV0gLSBXaGV0aGVyIHRvIHJ1biB0aGUgZ2l2ZW4gY29tbWFuZCBhcyByb290LlxuICogQHByb3BlcnR5IHs/c3RyaW5nfSBvdXRwdXRGb3JtYXQgW3N0ZG91dF0gLSBXaGV0aGVyIHJlc3BvbnNlIHNob3VsZCBpbmNsdWRlIGZ1bGwgZXhlYyBvdXRwdXQgb3IganVzdCBzdGRvdXQuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBvdGVudGlhbCB2YWx1ZXMgYXJlIGZ1bGwgb3Igc3Rkb3V0LlxuICpcbiAqIEFsbCBvdGhlciBwcm9wZXJ0aWVzIGFyZSB0aGUgc2FtZSBhcyBmb3IgYGV4ZWNgIGNhbGwgZnJvbSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2FwcGl1bS9ub2RlLXRlZW5fcHJvY2Vzc31cbiAqIG1vZHVsZVxuICovXG5cbi8qKlxuICogRXhlY3V0ZSB0aGUgZ2l2ZW4gY29tbWFuZCB1c2luZyBfYWRiIHNoZWxsXyBwcmVmaXguXG4gKlxuICogQHBhcmFtIHshQXJyYXkuPHN0cmluZz58c3RyaW5nfSBjbWQgLSBUaGUgYXJyYXkgb2YgcmVzdCBjb21tYW5kIGxpbmUgcGFyYW1ldGVycyBvciBhIHNpbmdsZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZyBwYXJhbWV0ZXIuXG4gKiBAcGFyYW0gez9TaGVsbEV4ZWNPcHRpb25zfSBvcHRzIFt7fV0gLSBBZGRpdGlvbmFsIG9wdGlvbnMgbWFwcGluZy5cbiAqIEByZXR1cm4ge3N0cmluZ30gLSBDb21tYW5kJ3Mgc3Rkb3V0LlxuICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBjb21tYW5kIHJldHVybmVkIG5vbi16ZXJvIGV4aXQgY29kZS5cbiAqL1xuc3lzdGVtQ2FsbE1ldGhvZHMuc2hlbGwgPSBhc3luYyBmdW5jdGlvbiBzaGVsbCAoY21kLCBvcHRzID0ge30pIHtcbiAgY29uc3Qge1xuICAgIHByaXZpbGVnZWQsXG4gIH0gPSBvcHRzO1xuXG4gIGNvbnN0IGNtZEFyciA9IF8uaXNBcnJheShjbWQpID8gY21kIDogW2NtZF07XG4gIGNvbnN0IGZ1bGxDbWQgPSBbJ3NoZWxsJ107XG4gIGlmIChwcml2aWxlZ2VkKSB7XG4gICAgbG9nLmluZm8oYCdhZGIgc2hlbGwgJHt1dGlsLnF1b3RlKGNtZEFycil9JyByZXF1aXJlcyByb290IGFjY2Vzc2ApO1xuICAgIGlmIChhd2FpdCB0aGlzLmlzUm9vdCgpKSB7XG4gICAgICBsb2cuaW5mbygnVGhlIGRldmljZSBhbHJlYWR5IGhhZCByb290IGFjY2VzcycpO1xuICAgICAgZnVsbENtZC5wdXNoKC4uLmNtZEFycik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZ1bGxDbWQucHVzaCgnc3UnLCAncm9vdCcsIHV0aWwucXVvdGUoY21kQXJyKSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZ1bGxDbWQucHVzaCguLi5jbWRBcnIpO1xuICB9XG4gIHJldHVybiBhd2FpdCB0aGlzLmFkYkV4ZWMoZnVsbENtZCwgb3B0cyk7XG59O1xuXG5zeXN0ZW1DYWxsTWV0aG9kcy5jcmVhdGVTdWJQcm9jZXNzID0gZnVuY3Rpb24gY3JlYXRlU3ViUHJvY2VzcyAoYXJncyA9IFtdKSB7XG4gIC8vIGFkZCB0aGUgZGVmYXVsdCBhcmd1bWVudHNcbiAgYXJncyA9IFsuLi50aGlzLmV4ZWN1dGFibGUuZGVmYXVsdEFyZ3MsIC4uLmFyZ3NdO1xuICBsb2cuZGVidWcoYENyZWF0aW5nIEFEQiBzdWJwcm9jZXNzIHdpdGggYXJnczogJHtKU09OLnN0cmluZ2lmeShhcmdzKX1gKTtcbiAgcmV0dXJuIG5ldyBTdWJQcm9jZXNzKHRoaXMuZ2V0QWRiUGF0aCgpLCBhcmdzKTtcbn07XG5cbi8qKlxuICogUmV0cmlldmUgdGhlIGN1cnJlbnQgYWRiIHBvcnQuXG4gKiBAdG9kbyBjYW4gcHJvYmFibHkgZGVwcmVjYXRlIHRoaXMgbm93IHRoYXQgdGhlIGxvZ2ljIGlzIGp1c3QgdG8gcmVhZCB0aGlzLmFkYlBvcnRcbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIGN1cnJlbnQgYWRiIHBvcnQgbnVtYmVyLlxuICovXG5zeXN0ZW1DYWxsTWV0aG9kcy5nZXRBZGJTZXJ2ZXJQb3J0ID0gZnVuY3Rpb24gZ2V0QWRiU2VydmVyUG9ydCAoKSB7XG4gIHJldHVybiB0aGlzLmFkYlBvcnQ7XG59O1xuXG4vKipcbiAqIFJldHJpZXZlIHRoZSBjdXJyZW50IGVtdWxhdG9yIHBvcnQgZnJvbSBfYWRiIGRldml2ZXNfIG91dHB1dC5cbiAqXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBjdXJyZW50IGVtdWxhdG9yIHBvcnQuXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlcmUgYXJlIG5vIGNvbm5lY3RlZCBkZXZpY2VzLlxuICovXG5zeXN0ZW1DYWxsTWV0aG9kcy5nZXRFbXVsYXRvclBvcnQgPSBhc3luYyBmdW5jdGlvbiBnZXRFbXVsYXRvclBvcnQgKCkge1xuICBsb2cuZGVidWcoJ0dldHRpbmcgcnVubmluZyBlbXVsYXRvciBwb3J0Jyk7XG4gIGlmICh0aGlzLmVtdWxhdG9yUG9ydCAhPT0gbnVsbCkge1xuICAgIHJldHVybiB0aGlzLmVtdWxhdG9yUG9ydDtcbiAgfVxuICB0cnkge1xuICAgIGxldCBkZXZpY2VzID0gYXdhaXQgdGhpcy5nZXRDb25uZWN0ZWREZXZpY2VzKCk7XG4gICAgbGV0IHBvcnQgPSB0aGlzLmdldFBvcnRGcm9tRW11bGF0b3JTdHJpbmcoZGV2aWNlc1swXS51ZGlkKTtcbiAgICBpZiAocG9ydCkge1xuICAgICAgcmV0dXJuIHBvcnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRW11bGF0b3IgcG9ydCBub3QgZm91bmRgKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIGRldmljZXMgY29ubmVjdGVkLiBPcmlnaW5hbCBlcnJvcjogJHtlLm1lc3NhZ2V9YCk7XG4gIH1cbn07XG5cbi8qKlxuICogUmV0cmlldmUgdGhlIGN1cnJlbnQgZW11bGF0b3IgcG9ydCBieSBwYXJzaW5nIGVtdWxhdG9yIG5hbWUgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBlbVN0ciAtIEVtdWxhdG9yIG5hbWUgc3RyaW5nLlxuICogQHJldHVybiB7bnVtYmVyfGJvb2xlYW59IEVpdGhlciB0aGUgY3VycmVudCBlbXVsYXRvciBwb3J0IG9yXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgX2ZhbHNlXyBpZiBwb3J0IG51bWJlciBjYW5ub3QgYmUgcGFyc2VkLlxuICovXG5zeXN0ZW1DYWxsTWV0aG9kcy5nZXRQb3J0RnJvbUVtdWxhdG9yU3RyaW5nID0gZnVuY3Rpb24gZ2V0UG9ydEZyb21FbXVsYXRvclN0cmluZyAoZW1TdHIpIHtcbiAgbGV0IHBvcnRQYXR0ZXJuID0gL2VtdWxhdG9yLShcXGQrKS87XG4gIGlmIChwb3J0UGF0dGVybi50ZXN0KGVtU3RyKSkge1xuICAgIHJldHVybiBwYXJzZUludChwb3J0UGF0dGVybi5leGVjKGVtU3RyKVsxXSwgMTApO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cbi8qKlxuICogUmV0cmlldmUgdGhlIGxpc3Qgb2YgY3VycmVudGx5IGNvbm5lY3RlZCBlbXVsYXRvcnMuXG4gKlxuICogQHBhcmFtIHs/Q29ubmVjdGVkRGV2aWNlc09wdGlvbnN9IG9wdHMgW3t9XSAtIEFkZGl0aW9uYWwgb3B0aW9ucyBtYXBwaW5nLlxuICogQHJldHVybiB7QXJyYXkuPERldmljZT59IFRoZSBsaXN0IG9mIGNvbm5lY3RlZCBkZXZpY2VzLlxuICovXG5zeXN0ZW1DYWxsTWV0aG9kcy5nZXRDb25uZWN0ZWRFbXVsYXRvcnMgPSBhc3luYyBmdW5jdGlvbiBnZXRDb25uZWN0ZWRFbXVsYXRvcnMgKG9wdHMgPSB7fSkge1xuICBsb2cuZGVidWcoJ0dldHRpbmcgY29ubmVjdGVkIGVtdWxhdG9ycycpO1xuICB0cnkge1xuICAgIGxldCBkZXZpY2VzID0gYXdhaXQgdGhpcy5nZXRDb25uZWN0ZWREZXZpY2VzKG9wdHMpO1xuICAgIGxldCBlbXVsYXRvcnMgPSBbXTtcbiAgICBmb3IgKGxldCBkZXZpY2Ugb2YgZGV2aWNlcykge1xuICAgICAgbGV0IHBvcnQgPSB0aGlzLmdldFBvcnRGcm9tRW11bGF0b3JTdHJpbmcoZGV2aWNlLnVkaWQpO1xuICAgICAgaWYgKHBvcnQpIHtcbiAgICAgICAgZGV2aWNlLnBvcnQgPSBwb3J0O1xuICAgICAgICBlbXVsYXRvcnMucHVzaChkZXZpY2UpO1xuICAgICAgfVxuICAgIH1cbiAgICBsb2cuZGVidWcoYCR7dXRpbC5wbHVyYWxpemUoJ2VtdWxhdG9yJywgZW11bGF0b3JzLmxlbmd0aCwgdHJ1ZSl9IGNvbm5lY3RlZGApO1xuICAgIHJldHVybiBlbXVsYXRvcnM7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEVycm9yIGdldHRpbmcgZW11bGF0b3JzLiBPcmlnaW5hbCBlcnJvcjogJHtlLm1lc3NhZ2V9YCk7XG4gIH1cbn07XG5cbi8qKlxuICogU2V0IF9lbXVsYXRvclBvcnRfIHByb3BlcnR5IG9mIHRoZSBjdXJyZW50IGNsYXNzLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBlbVBvcnQgLSBUaGUgZW11bGF0b3IgcG9ydCB0byBiZSBzZXQuXG4gKi9cbnN5c3RlbUNhbGxNZXRob2RzLnNldEVtdWxhdG9yUG9ydCA9IGZ1bmN0aW9uIHNldEVtdWxhdG9yUG9ydCAoZW1Qb3J0KSB7XG4gIHRoaXMuZW11bGF0b3JQb3J0ID0gZW1Qb3J0O1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIGlkZW50aWZpZXIgb2YgdGhlIGN1cnJlbnQgZGV2aWNlIChfdGhpcy5jdXJEZXZpY2VJZF8pLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSAtIFRoZSBkZXZpY2UgaWRlbnRpZmllci5cbiAqL1xuc3lzdGVtQ2FsbE1ldGhvZHMuc2V0RGV2aWNlSWQgPSBmdW5jdGlvbiBzZXREZXZpY2VJZCAoZGV2aWNlSWQpIHtcbiAgbG9nLmRlYnVnKGBTZXR0aW5nIGRldmljZSBpZCB0byAke2RldmljZUlkfWApO1xuICB0aGlzLmN1ckRldmljZUlkID0gZGV2aWNlSWQ7XG4gIGxldCBhcmdzSGFzRGV2aWNlID0gdGhpcy5leGVjdXRhYmxlLmRlZmF1bHRBcmdzLmluZGV4T2YoJy1zJyk7XG4gIGlmIChhcmdzSGFzRGV2aWNlICE9PSAtMSkge1xuICAgIC8vIHJlbW92ZSB0aGUgb2xkIGRldmljZSBpZCBmcm9tIHRoZSBhcmd1bWVudHNcbiAgICB0aGlzLmV4ZWN1dGFibGUuZGVmYXVsdEFyZ3Muc3BsaWNlKGFyZ3NIYXNEZXZpY2UsIDIpO1xuICB9XG4gIHRoaXMuZXhlY3V0YWJsZS5kZWZhdWx0QXJncy5wdXNoKCctcycsIGRldmljZUlkKTtcbn07XG5cbi8qKlxuICogU2V0IHRoZSB0aGUgY3VycmVudCBkZXZpY2Ugb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7RGV2aWNlfSBkZXZpY2VPYmogLSBUaGUgZGV2aWNlIG9iamVjdCB0byBiZSBzZXQuXG4gKi9cbnN5c3RlbUNhbGxNZXRob2RzLnNldERldmljZSA9IGZ1bmN0aW9uIHNldERldmljZSAoZGV2aWNlT2JqKSB7XG4gIGxldCBkZXZpY2VJZCA9IGRldmljZU9iai51ZGlkO1xuICBsZXQgZW1Qb3J0ID0gdGhpcy5nZXRQb3J0RnJvbUVtdWxhdG9yU3RyaW5nKGRldmljZUlkKTtcbiAgdGhpcy5zZXRFbXVsYXRvclBvcnQoZW1Qb3J0KTtcbiAgdGhpcy5zZXREZXZpY2VJZChkZXZpY2VJZCk7XG59O1xuXG4vKipcbiAqIEdldCB0aGUgb2JqZWN0IGZvciB0aGUgY3VycmVudGx5IHJ1bm5pbmcgZW11bGF0b3IuXG4gKiAhISEgVGhpcyBtZXRob2QgaGFzIGEgc2lkZSBlZmZlY3QgLSBpdCBpbXBsaWNpdGx5IGNoYW5nZXMgdGhlXG4gKiBgZGV2aWNlSWRgIChvbmx5IGlmIEFWRCB3aXRoIGEgbWF0Y2hpbmcgbmFtZSBpcyBmb3VuZClcbiAqIGFuZCBgZW11bGF0b3JQb3J0YCBpbnN0YW5jZSBwcm9wZXJ0aWVzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBhdmROYW1lIC0gRW11bGF0b3IgbmFtZS5cbiAqIEByZXR1cm4gez9EZXZpY2V9IEN1cnJlbnRseSBydW5uaW5nIGVtdWxhdG9yIG9yIF9udWxsXy5cbiAqL1xuc3lzdGVtQ2FsbE1ldGhvZHMuZ2V0UnVubmluZ0FWRCA9IGFzeW5jIGZ1bmN0aW9uIGdldFJ1bm5pbmdBVkQgKGF2ZE5hbWUpIHtcbiAgbG9nLmRlYnVnKGBUcnlpbmcgdG8gZmluZCAnJHthdmROYW1lfScgZW11bGF0b3JgKTtcbiAgdHJ5IHtcbiAgICBjb25zdCBlbXVsYXRvcnMgPSBhd2FpdCB0aGlzLmdldENvbm5lY3RlZEVtdWxhdG9ycygpO1xuICAgIGZvciAoY29uc3QgZW11bGF0b3Igb2YgZW11bGF0b3JzKSB7XG4gICAgICB0aGlzLnNldEVtdWxhdG9yUG9ydChlbXVsYXRvci5wb3J0KTtcbiAgICAgIGNvbnN0IHJ1bm5pbmdBVkROYW1lID0gYXdhaXQgdGhpcy5leGVjRW11Q29uc29sZUNvbW1hbmQoWydhdmQnLCAnbmFtZSddLCB7XG4gICAgICAgIHBvcnQ6IGVtdWxhdG9yLnBvcnQsXG4gICAgICAgIGV4ZWNUaW1lb3V0OiA1MDAwLFxuICAgICAgICBjb25uVGltZW91dDogMTAwMCxcbiAgICAgIH0pO1xuICAgICAgaWYgKF8udG9Mb3dlcihhdmROYW1lKSA9PT0gXy50b0xvd2VyKHJ1bm5pbmdBVkROYW1lLnRyaW0oKSkpIHtcbiAgICAgICAgbG9nLmRlYnVnKGBGb3VuZCBlbXVsYXRvciAnJHthdmROYW1lfScgb24gcG9ydCAke2VtdWxhdG9yLnBvcnR9YCk7XG4gICAgICAgIHRoaXMuc2V0RGV2aWNlSWQoZW11bGF0b3IudWRpZCk7XG4gICAgICAgIHJldHVybiBlbXVsYXRvcjtcbiAgICAgIH1cbiAgICB9XG4gICAgbG9nLmRlYnVnKGBFbXVsYXRvciAnJHthdmROYW1lfScgbm90IHJ1bm5pbmdgKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgRXJyb3IgZ2V0dGluZyBBVkQuIE9yaWdpbmFsIGVycm9yOiAke2UubWVzc2FnZX1gKTtcbiAgfVxufTtcblxuLyoqXG4gKiBHZXQgdGhlIG9iamVjdCBmb3IgdGhlIGN1cnJlbnRseSBydW5uaW5nIGVtdWxhdG9yLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBhdmROYW1lIC0gRW11bGF0b3IgbmFtZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lb3V0TXMgWzIwMDAwXSAtIFRoZSBtYXhpbXVtIG51bWJlciBvZiBtaWxsaXNlY29uZHNcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIHdhaXQgdW50aWwgYXQgbGVhc3Qgb25lIHJ1bm5pbmcgQVZEIG9iamVjdFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXMgZGV0ZWN0ZWQuXG4gKiBAcmV0dXJuIHs/RGV2aWNlfSBDdXJyZW50bHkgcnVubmluZyBlbXVsYXRvciBvciBfbnVsbF8uXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgbm8gZGV2aWNlIGhhcyBiZWVuIGRldGVjdGVkIHdpdGhpbiB0aGUgdGltZW91dC5cbiAqL1xuc3lzdGVtQ2FsbE1ldGhvZHMuZ2V0UnVubmluZ0FWRFdpdGhSZXRyeSA9IGFzeW5jIGZ1bmN0aW9uIGdldFJ1bm5pbmdBVkRXaXRoUmV0cnkgKGF2ZE5hbWUsIHRpbWVvdXRNcyA9IDIwMDAwKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGF3YWl0IHdhaXRGb3JDb25kaXRpb24oYXN5bmMgKCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZ2V0UnVubmluZ0FWRChhdmROYW1lLnJlcGxhY2UoJ0AnLCAnJykpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBsb2cuZGVidWcoZS5tZXNzYWdlKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIHdhaXRNczogdGltZW91dE1zLFxuICAgICAgaW50ZXJ2YWxNczogMTAwMCxcbiAgICB9KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgRXJyb3IgZ2V0dGluZyBBVkQgd2l0aCByZXRyeS4gT3JpZ2luYWwgZXJyb3I6ICR7ZS5tZXNzYWdlfWApO1xuICB9XG59O1xuXG4vKipcbiAqIFNodXRkb3duIGFsbCBydW5uaW5nIGVtdWxhdG9ycyBieSBraWxsaW5nIHRoZWlyIHByb2Nlc3Nlcy5cbiAqXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYga2lsbGluZyB0b29sIHJldHVybmVkIG5vbi16ZXJvIHJldHVybiBjb2RlLlxuICovXG5zeXN0ZW1DYWxsTWV0aG9kcy5raWxsQWxsRW11bGF0b3JzID0gYXN5bmMgZnVuY3Rpb24ga2lsbEFsbEVtdWxhdG9ycyAoKSB7XG4gIGxldCBjbWQsIGFyZ3M7XG4gIGlmIChzeXN0ZW0uaXNXaW5kb3dzKCkpIHtcbiAgICBjbWQgPSAnVEFTS0tJTEwnO1xuICAgIGFyZ3MgPSBbJ1RBU0tLSUxMJywgJy9JTScsICdlbXVsYXRvci5leGUnXTtcbiAgfSBlbHNlIHtcbiAgICBjbWQgPSAnL3Vzci9iaW4va2lsbGFsbCc7XG4gICAgYXJncyA9IFsnLW0nLCAnZW11bGF0b3IqJ107XG4gIH1cbiAgdHJ5IHtcbiAgICBhd2FpdCBleGVjKGNtZCwgYXJncyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEVycm9yIGtpbGxpbmcgZW11bGF0b3JzLiBPcmlnaW5hbCBlcnJvcjogJHtlLm1lc3NhZ2V9YCk7XG4gIH1cbn07XG5cbi8qKlxuICogS2lsbCBlbXVsYXRvciB3aXRoIHRoZSBnaXZlbiBuYW1lLiBObyBlcnJvclxuICogaXMgdGhyb3duIGlzIGdpdmVuIGF2ZCBkb2VzIG5vdCBleGlzdC9pcyBub3QgcnVubmluZy5cbiAqXG4gKiBAcGFyYW0gez9zdHJpbmd9IGF2ZE5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgZW11bGF0b3IgdG8gYmUga2lsbGVkLiBJZiBlbXB0eSxcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBjdXJyZW50IGVtdWxhdG9yIHdpbGwgYmUga2lsbGVkLlxuICogQHBhcmFtIHs/bnVtYmVyfSB0aW1lb3V0IFs2MDAwMF0gLSBUaGUgYW1vdW50IG9mIHRpbWUgdG8gd2FpdCBiZWZvcmUgdGhyb3dpbmdcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW4gZXhjZXB0aW9uIGFib3V0IHVuc3VjY2Vzc2Z1bCBraWxsaW5nXG4gKiBAcmV0dXJuIHtib29sZWFufSAtIFRydWUgaWYgdGhlIGVtdWxhdG9yIHdhcyBraWxsZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAqIEB0aHJvd3Mge0Vycm9yfSBpZiB0aGVyZSB3YXMgYSBmYWlsdXJlIGJ5IGtpbGxpbmcgdGhlIGVtdWxhdG9yXG4gKi9cbnN5c3RlbUNhbGxNZXRob2RzLmtpbGxFbXVsYXRvciA9IGFzeW5jIGZ1bmN0aW9uIGtpbGxFbXVsYXRvciAoYXZkTmFtZSA9IG51bGwsIHRpbWVvdXQgPSA2MDAwMCkge1xuICBpZiAodXRpbC5oYXNWYWx1ZShhdmROYW1lKSkge1xuICAgIGxvZy5kZWJ1ZyhgS2lsbGluZyBhdmQgJyR7YXZkTmFtZX0nYCk7XG4gICAgY29uc3QgZGV2aWNlID0gYXdhaXQgdGhpcy5nZXRSdW5uaW5nQVZEKGF2ZE5hbWUpO1xuICAgIGlmICghZGV2aWNlKSB7XG4gICAgICBsb2cuaW5mbyhgTm8gYXZkIHdpdGggbmFtZSAnJHthdmROYW1lfScgcnVubmluZy4gU2tpcHBpbmcga2lsbCBzdGVwLmApO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBraWxsaW5nIHRoZSBjdXJyZW50IGF2ZFxuICAgIGxvZy5kZWJ1ZyhgS2lsbGluZyBhdmQgd2l0aCBpZCAnJHt0aGlzLmN1ckRldmljZUlkfSdgKTtcbiAgICBpZiAoIWF3YWl0IHRoaXMuaXNFbXVsYXRvckNvbm5lY3RlZCgpKSB7XG4gICAgICBsb2cuZGVidWcoYEVtdWxhdG9yIHdpdGggaWQgJyR7dGhpcy5jdXJEZXZpY2VJZH0nIG5vdCBjb25uZWN0ZWQuIFNraXBwaW5nIGtpbGwgc3RlcGApO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICBhd2FpdCB0aGlzLmFkYkV4ZWMoWydlbXUnLCAna2lsbCddKTtcbiAgbG9nLmRlYnVnKGBXYWl0aW5nIHVwIHRvICR7dGltZW91dH1tcyB1bnRpbCB0aGUgZW11bGF0b3IgJyR7YXZkTmFtZSA/IGF2ZE5hbWUgOiB0aGlzLmN1ckRldmljZUlkfScgaXMga2lsbGVkYCk7XG4gIHRyeSB7XG4gICAgYXdhaXQgd2FpdEZvckNvbmRpdGlvbihhc3luYyAoKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gdXRpbC5oYXNWYWx1ZShhdmROYW1lKVxuICAgICAgICAgID8gIWF3YWl0IHRoaXMuZ2V0UnVubmluZ0FWRChhdmROYW1lKVxuICAgICAgICAgIDogIWF3YWl0IHRoaXMuaXNFbXVsYXRvckNvbm5lY3RlZCgpO1xuICAgICAgfSBjYXRjaCAoaWduKSB7fVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sIHtcbiAgICAgIHdhaXRNczogdGltZW91dCxcbiAgICAgIGludGVydmFsTXM6IDIwMDAsXG4gICAgfSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSBlbXVsYXRvciAnJHthdmROYW1lID8gYXZkTmFtZSA6IHRoaXMuY3VyRGV2aWNlSWR9JyBpcyBzdGlsbCBydW5uaW5nIGFmdGVyIGJlaW5nIGtpbGxlZCAke3RpbWVvdXR9bXMgYWdvYCk7XG4gIH1cbiAgbG9nLmluZm8oYFN1Y2Nlc3NmdWxseSBraWxsZWQgdGhlICcke2F2ZE5hbWUgPyBhdmROYW1lIDogdGhpcy5jdXJEZXZpY2VJZH0nIGVtdWxhdG9yYCk7XG4gIHJldHVybiB0cnVlO1xufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBBdmRMYXVuY2hPcHRpb25zXG4gKiBAcHJvcGVydHkge3N0cmluZ3xBcnJheTxzdHJpbmc+fSBhcmdzIEFkZGl0aW9uYWwgZW11bGF0b3IgY29tbWFuZCBsaW5lIGFyZ3VtZW50c1xuICogQHByb3BlcnR5IHtPYmplY3R9IGVudiBBZGRpdGlvbmFsIGVtdWxhdG9yIGVudmlyb25tZW50IHZhcmlhYmxlc1xuICogQHByb3BlcnR5IHtzdHJpbmd9IGxhbmd1YWdlIEVtdWxhdG9yIHN5c3RlbSBsYW5ndWFnZVxuICogQHByb3BlcnR5IHtzdHJpbmd9IGNvdW50cnkgRW11bGF0b3Igc3lzdGVtIGNvdW50cnlcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBsYXVuY2hUaW1lb3V0IFs2MDAwMF0gRW11bGF0b3Igc3RhcnR1cCB0aW1lb3V0IGluIG1pbGxpc2Vjb25kc1xuICogQHByb3BlcnR5IHtudW1iZXJ9IHJlYWR5VGltZW91dCBbNjAwMDBdIFRoZSBtYXhpbXVtIHBlcmlvZCBvZiB0aW1lIHRvIHdhaXQgdW50aWwgRW11bGF0b3JcbiAqIGlzIHJlYWR5IGZvciB1c2FnZSBpbiBtaWxsaXNlY29uZHNcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSByZXRyeVRpbWVzIFsxXSBUaGUgbWF4aW11bSBudW1iZXIgb2Ygc3RhcnR1cCByZXRyaWVzXG4gKi9cblxuLyoqXG4gKiBTdGFydCBhbiBlbXVsYXRvciB3aXRoIGdpdmVuIHBhcmFtZXRlcnMgYW5kIHdhaXQgdW50aWwgaXQgaXMgZnVsbHkgc3RhcnRlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYXZkTmFtZSAtIFRoZSBuYW1lIG9mIGFuIGV4aXN0aW5nIGVtdWxhdG9yLlxuICogQHBhcmFtIHs/QXZkTGF1bmNoT3B0aW9uc30gb3B0c1xuICogQHJldHVybnMge1N1YlByb2Nlc3N9IEVtdWxhdG9yIHN1YnByb2Nlc3MgaW5zdGFuY2VcbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgZW11bGF0b3IgZmFpbHMgdG8gc3RhcnQgd2l0aGluIHRoZSBnaXZlbiB0aW1lb3V0LlxuICovXG5zeXN0ZW1DYWxsTWV0aG9kcy5sYXVuY2hBVkQgPSBhc3luYyBmdW5jdGlvbiBsYXVuY2hBVkQgKGF2ZE5hbWUsIG9wdHMgPSB7fSkge1xuICBjb25zdCB7XG4gICAgYXJncyA9IFtdLFxuICAgIGVudiA9IHt9LFxuICAgIGxhbmd1YWdlLFxuICAgIGNvdW50cnksXG4gICAgbGF1bmNoVGltZW91dCA9IDYwMDAwLFxuICAgIHJlYWR5VGltZW91dCA9IDYwMDAwLFxuICAgIHJldHJ5VGltZXMgPSAxLFxuICB9ID0gb3B0cztcbiAgbG9nLmRlYnVnKGBMYXVuY2hpbmcgRW11bGF0b3Igd2l0aCBBVkQgJHthdmROYW1lfSwgbGF1bmNoVGltZW91dCBgICtcbiAgICAgICAgICAgIGAke2xhdW5jaFRpbWVvdXR9bXMgYW5kIHJlYWR5VGltZW91dCAke3JlYWR5VGltZW91dH1tc2ApO1xuICBjb25zdCBlbXVsYXRvckJpbmFyeVBhdGggPSBhd2FpdCB0aGlzLmdldFNka0JpbmFyeVBhdGgoJ2VtdWxhdG9yJyk7XG4gIGlmIChhdmROYW1lWzBdID09PSAnQCcpIHtcbiAgICBhdmROYW1lID0gYXZkTmFtZS5zdWJzdHIoMSk7XG4gIH1cbiAgYXdhaXQgdGhpcy5jaGVja0F2ZEV4aXN0KGF2ZE5hbWUpO1xuXG4gIGNvbnN0IGxhdW5jaEFyZ3MgPSBbJy1hdmQnLCBhdmROYW1lXTtcbiAgbGF1bmNoQXJncy5wdXNoKC4uLih0b0F2ZExvY2FsZUFyZ3MobGFuZ3VhZ2UsIGNvdW50cnkpKSk7XG5cbiAgbGV0IGlzRGVsYXlBZGJGZWF0dXJlRW5hYmxlZCA9IGZhbHNlO1xuICBpZiAodGhpcy5hbGxvd0RlbGF5QWRiKSB7XG4gICAgY29uc3Qge3JldmlzaW9ufSA9IGF3YWl0IHRoaXMuZ2V0RW11VmVyc2lvbkluZm8oKTtcbiAgICBpZiAocmV2aXNpb24gJiYgdXRpbC5jb21wYXJlVmVyc2lvbnMocmV2aXNpb24sICc+PScsICcyOS4wLjcnKSkge1xuICAgICAgLy8gaHR0cHM6Ly9hbmRyb2lkc3R1ZGlvLmdvb2dsZWJsb2cuY29tLzIwMTkvMDUvZW11bGF0b3ItMjkwNy1jYW5hcnkuaHRtbFxuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3Qge3RhcmdldH0gPSBhd2FpdCB0aGlzLmdldEVtdUltYWdlUHJvcGVydGllcyhhdmROYW1lKTtcbiAgICAgICAgY29uc3QgYXBpTWF0Y2ggPSAvXFxkKy8uZXhlYyh0YXJnZXQpO1xuICAgICAgICAvLyBodHRwczovL2lzc3VldHJhY2tlci5nb29nbGUuY29tL2lzc3Vlcy8xNDI1MzMzNTVcbiAgICAgICAgaWYgKGFwaU1hdGNoICYmIHBhcnNlSW50KGFwaU1hdGNoWzBdLCAxMCkgPj0gTUlOX0RFTEFZX0FEQl9BUElfTEVWRUwpIHtcbiAgICAgICAgICBsYXVuY2hBcmdzLnB1c2goJy1kZWxheS1hZGInKTtcbiAgICAgICAgICBpc0RlbGF5QWRiRmVhdHVyZUVuYWJsZWQgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlIGFjdHVhbCBpbWFnZSBBUEkgdmVyc2lvbiBpcyBiZWxvdyAke01JTl9ERUxBWV9BREJfQVBJX0xFVkVMfWApO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGxvZy5pbmZvKGBUaGUgLWRlbGF5LWFkYiBlbXVsYXRvciBzdGFydHVwIGRldGVjdGlvbiBmZWF0dXJlIHdpbGwgbm90IGJlIGVuYWJsZWQuIGAgK1xuICAgICAgICAgIGBPcmlnaW5hbCBlcnJvcjogJHtlLm1lc3NhZ2V9YCk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxvZy5pbmZvKCdUaGUgLWRlbGF5LWFkYiBlbXVsYXRvciBzdGFydHVwIGRldGVjdGlvbiBmZWF0dXJlIGhhcyBiZWVuIGV4cGxpY2l0bHkgZGlzYWJsZWQnKTtcbiAgfVxuXG4gIGlmICghXy5pc0VtcHR5KGFyZ3MpKSB7XG4gICAgbGF1bmNoQXJncy5wdXNoKC4uLihfLmlzQXJyYXkoYXJncykgPyBhcmdzIDogdXRpbC5zaGVsbFBhcnNlKGAke2FyZ3N9YCkpKTtcbiAgfVxuXG4gIGxvZy5kZWJ1ZyhgUnVubmluZyAnJHtlbXVsYXRvckJpbmFyeVBhdGh9JyB3aXRoIGFyZ3M6ICR7dXRpbC5xdW90ZShsYXVuY2hBcmdzKX1gKTtcbiAgaWYgKCFfLmlzRW1wdHkoZW52KSkge1xuICAgIGxvZy5kZWJ1ZyhgQ3VzdG9taXplZCBlbXVsYXRvciBlbnZpcm9ubWVudDogJHtKU09OLnN0cmluZ2lmeShlbnYpfWApO1xuICB9XG4gIGNvbnN0IHByb2MgPSBuZXcgU3ViUHJvY2VzcyhlbXVsYXRvckJpbmFyeVBhdGgsIGxhdW5jaEFyZ3MsIHtcbiAgICBlbnY6IE9iamVjdC5hc3NpZ24oe30sIHByb2Nlc3MuZW52LCBlbnYpLFxuICB9KTtcbiAgYXdhaXQgcHJvYy5zdGFydCgwKTtcbiAgcHJvYy5vbignb3V0cHV0JywgKHN0ZG91dCwgc3RkZXJyKSA9PiB7XG4gICAgZm9yIChsZXQgbGluZSBvZiAoc3Rkb3V0IHx8IHN0ZGVyciB8fCAnJykuc3BsaXQoJ1xcbicpLmZpbHRlcihCb29sZWFuKSkge1xuICAgICAgbG9nLmluZm8oYFtBVkQgT1VUUFVUXSAke2xpbmV9YCk7XG4gICAgfVxuICB9KTtcbiAgcHJvYy5vbignZGllJywgKGNvZGUsIHNpZ25hbCkgPT4ge1xuICAgIGxvZy53YXJuKGBFbXVsYXRvciBhdmQgJHthdmROYW1lfSBleGl0ZWQgd2l0aCBjb2RlICR7Y29kZX0ke3NpZ25hbCA/IGAsIHNpZ25hbCAke3NpZ25hbH1gIDogJyd9YCk7XG4gIH0pO1xuICBhd2FpdCByZXRyeShyZXRyeVRpbWVzLCBhc3luYyAoKSA9PiBhd2FpdCB0aGlzLmdldFJ1bm5pbmdBVkRXaXRoUmV0cnkoYXZkTmFtZSwgbGF1bmNoVGltZW91dCkpO1xuICAvLyBBdCB0aGlzIHBvaW50IHdlIGhhdmUgZGV2aWNlSWQgYWxyZWFkeSBhc3NpZ25lZFxuICBjb25zdCB0aW1lciA9IG5ldyB0aW1pbmcuVGltZXIoKS5zdGFydCgpO1xuICBpZiAoaXNEZWxheUFkYkZlYXR1cmVFbmFibGVkKSB7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHRoaXMuYWRiRXhlYyhbJ3dhaXQtZm9yLWRldmljZSddLCB7dGltZW91dDogcmVhZHlUaW1lb3V0fSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGAnJHthdmROYW1lfScgRW11bGF0b3IgaGFzIGZhaWxlZCB0byBib290OiAke2Uuc3RkZXJyIHx8IGUubWVzc2FnZX1gKTtcbiAgICB9XG4gIH1cbiAgYXdhaXQgdGhpcy53YWl0Rm9yRW11bGF0b3JSZWFkeShyZWFkeVRpbWVvdXQgLSB0aW1lci5nZXREdXJhdGlvbigpLmFzTWlsbGlTZWNvbmRzKTtcbiAgcmV0dXJuIHByb2M7XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IEJpbmFyeVZlcnNpb25cbiAqIEBwcm9wZXJ0eSB7U2VtVmVyfSB2ZXJzaW9uIC0gVGhlIEFEQiBiaW5hcnkgdmVyc2lvbiBudW1iZXJcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBidWlsZCAtIFRoZSBBREIgYmluYXJ5IGJ1aWxkIG51bWJlclxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gQnJpZGdlVmVyc2lvblxuICogQHByb3BlcnR5IHtTZW1WZXJ9IHZlcnNpb24gLSBUaGUgQW5kcm9pZCBEZWJ1ZyBCcmlkZ2UgdmVyc2lvbiBudW1iZXJcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFZlcnNpb25cbiAqIEBwcm9wZXJ0eSB7P0JpbmFyeVZlcnNpb259IGJpbmFyeSBUaGlzIHZlcnNpb24gbnVtYmVyIG1pZ2h0IG5vdCBiZVxuICogYmUgcHJlc2VudCBmb3Igb2xkZXIgQURCIHJlbGVhc2VzLlxuICogQHByb3BlcnR5IHtCcmlkZ2VWZXJzaW9ufSBicmlkZ2VcbiAqL1xuXG4vKipcbiAqIEdldCB0aGUgYWRiIHZlcnNpb24uIFRoZSByZXN1bHQgb2YgdGhpcyBtZXRob2QgaXMgY2FjaGVkLlxuICpcbiAqIEByZXR1cm4ge1ZlcnNpb259XG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgaXQgaXMgbm90IHBvc3NpYmxlIHRvIHBhcnNlIGFkYiBiaW5hcnkgdmVyc2lvbi5cbiAqL1xuc3lzdGVtQ2FsbE1ldGhvZHMuZ2V0VmVyc2lvbiA9IF8ubWVtb2l6ZShhc3luYyBmdW5jdGlvbiBnZXRWZXJzaW9uICgpIHtcbiAgbGV0IHN0ZG91dDtcbiAgdHJ5IHtcbiAgICBzdGRvdXQgPSBhd2FpdCB0aGlzLmFkYkV4ZWMoJ3ZlcnNpb24nKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgRXJyb3IgZ2V0dGluZyBhZGIgdmVyc2lvbjogJHtlLnN0ZGVyciB8fCBlLm1lc3NhZ2V9YCk7XG4gIH1cblxuICBjb25zdCByZXN1bHQgPSB7fTtcbiAgY29uc3QgYmluYXJ5VmVyc2lvbk1hdGNoID0gQklOQVJZX1ZFUlNJT05fUEFUVEVSTi5leGVjKHN0ZG91dCk7XG4gIGlmIChiaW5hcnlWZXJzaW9uTWF0Y2gpIHtcbiAgICByZXN1bHQuYmluYXJ5ID0ge1xuICAgICAgdmVyc2lvbjogc2VtdmVyLmNvZXJjZShiaW5hcnlWZXJzaW9uTWF0Y2hbMV0pLFxuICAgICAgYnVpbGQ6IHBhcnNlSW50KGJpbmFyeVZlcnNpb25NYXRjaFsyXSwgMTApLFxuICAgIH07XG4gIH1cbiAgY29uc3QgYnJpZGdlVmVyc2lvbk1hdGNoID0gQlJJREdFX1ZFUlNJT05fUEFUVEVSTi5leGVjKHN0ZG91dCk7XG4gIGlmIChicmlkZ2VWZXJzaW9uTWF0Y2gpIHtcbiAgICByZXN1bHQuYnJpZGdlID0ge1xuICAgICAgdmVyc2lvbjogc2VtdmVyLmNvZXJjZShicmlkZ2VWZXJzaW9uTWF0Y2hbMV0pLFxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn0pO1xuXG4vKipcbiAqIENoZWNrIGlmIHRoZSBjdXJyZW50IGVtdWxhdG9yIGlzIHJlYWR5IHRvIGFjY2VwdCBmdXJ0aGVyIGNvbW1hbmRzIChib290aW5nIGNvbXBsZXRlZCkuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHRpbWVvdXRNcyBbMjAwMDBdIC0gVGhlIG1heGltdW0gbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB3YWl0LlxuICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBlbXVsYXRvciBpcyBub3QgcmVhZHkgd2l0aGluIHRoZSBnaXZlbiB0aW1lb3V0LlxuICovXG5zeXN0ZW1DYWxsTWV0aG9kcy53YWl0Rm9yRW11bGF0b3JSZWFkeSA9IGFzeW5jIGZ1bmN0aW9uIHdhaXRGb3JFbXVsYXRvclJlYWR5ICh0aW1lb3V0TXMgPSAyMDAwMCkge1xuICBjb25zdCByZXF1aXJlZFNlcnZpY2VzUmUgPSBSRVFVSVJFRF9TRVJWSUNFUy5tYXAoKG5hbWUpID0+IG5ldyBSZWdFeHAoYFxcXFxiJHtuYW1lfTpgKSk7XG4gIGxldCBzZXJ2aWNlcztcbiAgdHJ5IHtcbiAgICBhd2FpdCB3YWl0Rm9yQ29uZGl0aW9uKGFzeW5jICgpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHNlcnZpY2VzID0gYXdhaXQgdGhpcy5zaGVsbChbJ3NlcnZpY2UnLCAnbGlzdCddKTtcbiAgICAgICAgcmV0dXJuIHJlcXVpcmVkU2VydmljZXNSZS5ldmVyeSgocGF0dGVybikgPT4gcGF0dGVybi50ZXN0KHNlcnZpY2VzKSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgbG9nLmRlYnVnKGBXYWl0aW5nIGZvciBlbXVsYXRvciBzdGFydHVwLiBJbnRlcm1lZGlhdGUgZXJyb3I6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICB3YWl0TXM6IHRpbWVvdXRNcyxcbiAgICAgIGludGVydmFsTXM6IDMwMDAsXG4gICAgfSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoc2VydmljZXMpIHtcbiAgICAgIGxvZy5kZWJ1ZyhgUmVjZW50bHkgbGlzdGVkIHNlcnZpY2VzOlxcbiR7c2VydmljZXN9YCk7XG4gICAgfVxuICAgIGNvbnN0IG1pc3NpbmdTZXJ2aWNlcyA9IF8uemlwKFJFUVVJUkVEX1NFUlZJQ0VTLCByZXF1aXJlZFNlcnZpY2VzUmUpXG4gICAgICAuZmlsdGVyKChbLCBwYXR0ZXJuXSkgPT4gIXBhdHRlcm4udGVzdChzZXJ2aWNlcykpXG4gICAgICAubWFwKChbbmFtZV0pID0+IG5hbWUpO1xuICAgIHRocm93IG5ldyBFcnJvcihgRW11bGF0b3IgaXMgbm90IHJlYWR5IHdpdGhpbiAke3RpbWVvdXRNc31tcyBgICtcbiAgICAgIGAoJHttaXNzaW5nU2VydmljZXN9IHNlcnZpY2Uke21pc3NpbmdTZXJ2aWNlcy5sZW5ndGggPT09IDEgPyAnIGlzJyA6ICdzIGFyZSd9IG5vdCBydW5uaW5nKWApO1xuICB9XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIHRoZSBjdXJyZW50IGRldmljZSBpcyByZWFkeSB0byBhY2NlcHQgZnVydGhlciBjb21tYW5kcyAoYm9vdGluZyBjb21wbGV0ZWQpLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBhcHBEZXZpY2VSZWFkeVRpbWVvdXQgWzMwXSAtIFRoZSBtYXhpbXVtIG51bWJlciBvZiBzZWNvbmRzIHRvIHdhaXQuXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIGRldmljZSBpcyBub3QgcmVhZHkgd2l0aGluIHRoZSBnaXZlbiB0aW1lb3V0LlxuICovXG5zeXN0ZW1DYWxsTWV0aG9kcy53YWl0Rm9yRGV2aWNlID0gYXN5bmMgZnVuY3Rpb24gd2FpdEZvckRldmljZSAoYXBwRGV2aWNlUmVhZHlUaW1lb3V0ID0gMzApIHtcbiAgdGhpcy5hcHBEZXZpY2VSZWFkeVRpbWVvdXQgPSBhcHBEZXZpY2VSZWFkeVRpbWVvdXQ7XG4gIGNvbnN0IHJldHJpZXMgPSAzO1xuICBjb25zdCB0aW1lb3V0ID0gcGFyc2VJbnQodGhpcy5hcHBEZXZpY2VSZWFkeVRpbWVvdXQsIDEwKSAqIDEwMDAgLyByZXRyaWVzO1xuICBhd2FpdCByZXRyeShyZXRyaWVzLCBhc3luYyAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHRoaXMuYWRiRXhlYygnd2FpdC1mb3ItZGV2aWNlJywge3RpbWVvdXR9KTtcbiAgICAgIGF3YWl0IHRoaXMucGluZygpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IHRoaXMucmVjb25uZWN0KCk7XG4gICAgICB9IGNhdGNoIChpZ24pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5yZXN0YXJ0QWRiKCk7XG4gICAgICB9XG4gICAgICBhd2FpdCB0aGlzLmdldENvbm5lY3RlZERldmljZXMoKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRXJyb3Igd2FpdGluZyBmb3IgdGhlIGRldmljZSB0byBiZSBhdmFpbGFibGUuIE9yaWdpbmFsIGVycm9yOiAnJHtlLm1lc3NhZ2V9J2ApO1xuICAgIH1cbiAgfSk7XG59O1xuXG4vKipcbiAqIFJlYm9vdCB0aGUgY3VycmVudCBkZXZpY2UgYW5kIHdhaXQgdW50aWwgaXQgaXMgY29tcGxldGVkLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSByZXRyaWVzIFtERUZBVUxUX0FEQl9SRUJPT1RfUkVUUklFU10gLSBUaGUgbWF4aW11bSBudW1iZXIgb2YgcmVib290IHJldHJpZXMuXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIGRldmljZSBmYWlsZWQgdG8gcmVib290IGFuZCBudW1iZXIgb2YgcmV0cmllcyBpcyBleGNlZWRlZC5cbiAqL1xuc3lzdGVtQ2FsbE1ldGhvZHMucmVib290ID0gYXN5bmMgZnVuY3Rpb24gcmVib290IChyZXRyaWVzID0gREVGQVVMVF9BREJfUkVCT09UX1JFVFJJRVMpIHtcbiAgLy8gR2V0IHJvb3QgYWNjZXNzIHNvIHdlIGNhbiBydW4gdGhlIG5leHQgc2hlbGwgY29tbWFuZHMgd2hpY2ggcmVxdWlyZSByb290IGFjY2Vzc1xuICBjb25zdCB7IHdhc0FscmVhZHlSb290ZWQgfSA9IGF3YWl0IHRoaXMucm9vdCgpO1xuICB0cnkge1xuICAgIC8vIFN0b3AgYW5kIHJlLXN0YXJ0IHRoZSBkZXZpY2VcbiAgICBhd2FpdCB0aGlzLnNoZWxsKFsnc3RvcCddKTtcbiAgICBhd2FpdCBCLmRlbGF5KDIwMDApOyAvLyBsZXQgdGhlIGVtdSBmaW5pc2ggc3RvcHBpbmc7XG4gICAgYXdhaXQgdGhpcy5zZXREZXZpY2VQcm9wZXJ0eSgnc3lzLmJvb3RfY29tcGxldGVkJywgMCwge1xuICAgICAgcHJpdmlsZWdlZDogZmFsc2UgLy8gbm8gbmVlZCB0byBzZXQgcHJpdmlsZWdlZCB0cnVlIGJlY2F1c2UgZGV2aWNlIGFscmVhZHkgcm9vdGVkXG4gICAgfSk7XG4gICAgYXdhaXQgdGhpcy5zaGVsbChbJ3N0YXJ0J10pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc3Qge21lc3NhZ2V9ID0gZTtcblxuICAgIC8vIHByb3ZpZGUgYSBoZWxwZnVsIGVycm9yIG1lc3NhZ2UgaWYgdGhlIHJlYXNvbiByZWJvb3QgZmFpbGVkIHdhcyBiZWNhdXNlIEFEQiBjb3VsZG4ndCBnYWluIHJvb3QgYWNjZXNzXG4gICAgaWYgKG1lc3NhZ2UuaW5jbHVkZXMoJ211c3QgYmUgcm9vdCcpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYENvdWxkIG5vdCByZWJvb3QgZGV2aWNlLiBSZWJvb3RpbmcgcmVxdWlyZXMgcm9vdCBhY2Nlc3MgYW5kIGAgK1xuICAgICAgICBgYXR0ZW1wdCB0byBnZXQgcm9vdCBhY2Nlc3Mgb24gZGV2aWNlIGZhaWxlZCB3aXRoIGVycm9yOiAnJHttZXNzYWdlfSdgKTtcbiAgICB9XG4gICAgdGhyb3cgZTtcbiAgfSBmaW5hbGx5IHtcbiAgICAvLyBSZXR1cm4gcm9vdCBzdGF0ZSB0byB3aGF0IGl0IHdhcyBiZWZvcmVcbiAgICBpZiAoIXdhc0FscmVhZHlSb290ZWQpIHtcbiAgICAgIGF3YWl0IHRoaXMudW5yb290KCk7XG4gICAgfVxuICB9XG4gIGNvbnN0IHRpbWVyID0gbmV3IHRpbWluZy5UaW1lcigpLnN0YXJ0KCk7XG4gIGF3YWl0IHJldHJ5SW50ZXJ2YWwocmV0cmllcywgMTAwMCwgYXN5bmMgKCkgPT4ge1xuICAgIGlmICgoYXdhaXQgdGhpcy5nZXREZXZpY2VQcm9wZXJ0eSgnc3lzLmJvb3RfY29tcGxldGVkJykpID09PSAnMScpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gd2UgZG9uJ3Qgd2FudCB0aGUgc3RhY2sgdHJhY2UsIHNvIG5vIGxvZy5lcnJvckFuZFRocm93XG4gICAgY29uc3QgbXNnID0gYFJlYm9vdCBpcyBub3QgY29tcGxldGVkIGFmdGVyICR7dGltZXIuZ2V0RHVyYXRpb24oKS5hc01pbGxpU2Vjb25kcy50b0ZpeGVkKDApfW1zYDtcbiAgICBsb2cuZGVidWcobXNnKTtcbiAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IHJvb3RSZXN1bHRcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gaXNTdWNjZXNzZnVsIFRydWUgaWYgdGhlIGNhbGwgdG8gcm9vdC91bnJvb3Qgd2FzIHN1Y2Nlc3NmdWxcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gd2FzQWxyZWFkeVJvb3RlZCBUcnVlIGlmIHRoZSBkZXZpY2Ugd2FzIGFscmVhZHkgcm9vdGVkXG4gKi9cblxuLyoqXG4gKiBTd2l0Y2ggYWRiIHNlcnZlciByb290IHByaXZpbGVnZXMuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGlzRWxldmF0ZWQgLSBTaG91bGQgd2UgZWxldmF0ZSB0byB0byByb290IG9yIHVucm9vdD8gKGRlZmF1bHQgdHJ1ZSlcbiAqIEByZXR1cm4ge3Jvb3RSZXN1bHR9XG4gKi9cbnN5c3RlbUNhbGxNZXRob2RzLmNoYW5nZVVzZXJQcml2aWxlZ2VzID0gYXN5bmMgZnVuY3Rpb24gY2hhbmdlVXNlclByaXZpbGVnZXMgKGlzRWxldmF0ZWQpIHtcbiAgY29uc3QgY21kID0gaXNFbGV2YXRlZCA/ICdyb290JyA6ICd1bnJvb3QnO1xuXG4gIGNvbnN0IHJldHJ5SWZPZmZsaW5lID0gYXN5bmMgKGNtZEZ1bmMpID0+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IGNtZEZ1bmMoKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIC8vIENoZWNrIHRoZSBvdXRwdXQgb2YgdGhlIHN0ZEVyciB0byBzZWUgaWYgdGhlcmUncyBhbnkgY2x1ZXMgdGhhdCBzaG93IHRoYXQgdGhlIGRldmljZSB3ZW50IG9mZmxpbmVcbiAgICAgIC8vIGFuZCBpZiBpdCBkaWQgZ28gb2ZmbGluZSwgcmVzdGFydCBBREJcbiAgICAgIGlmIChbJ2Nsb3NlZCcsICdkZXZpY2Ugb2ZmbGluZScsICd0aW1lb3V0IGV4cGlyZWQnXVxuICAgICAgICAgIC5zb21lKCh4KSA9PiAoZXJyLnN0ZGVyciB8fCAnJykudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyh4KSkpIHtcbiAgICAgICAgbG9nLndhcm4oYEF0dGVtcHQgdG8gJHtjbWR9IGNhdXNlZCBBREIgdG8gdGhpbmsgdGhlIGRldmljZSB3ZW50IG9mZmxpbmVgKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBhd2FpdCB0aGlzLnJlY29ubmVjdCgpO1xuICAgICAgICB9IGNhdGNoIChpZ24pIHtcbiAgICAgICAgICBhd2FpdCB0aGlzLnJlc3RhcnRBZGIoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXdhaXQgY21kRnVuYygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvLyBJZiBpdCdzIGFscmVhZHkgcm9vdGVkLCBvdXIgam9iIGlzIGRvbmUuIE5vIG5lZWQgdG8gcm9vdCBpdCBhZ2Fpbi5cbiAgY29uc3QgaXNSb290ID0gYXdhaXQgcmV0cnlJZk9mZmxpbmUoYXN5bmMgKCkgPT4gYXdhaXQgdGhpcy5pc1Jvb3QoKSk7XG4gIGlmICgoaXNSb290ICYmIGlzRWxldmF0ZWQpIHx8ICghaXNSb290ICYmICFpc0VsZXZhdGVkKSkge1xuICAgIHJldHVybiB7aXNTdWNjZXNzZnVsOiB0cnVlLCB3YXNBbHJlYWR5Um9vdGVkOiBpc1Jvb3R9O1xuICB9XG5cbiAgbGV0IHdhc0FscmVhZHlSb290ZWQgPSBpc1Jvb3Q7XG4gIHRyeSB7XG4gICAgY29uc3Qge3N0ZG91dH0gPSBhd2FpdCByZXRyeUlmT2ZmbGluZShhc3luYyAoKSA9PiBhd2FpdCB0aGlzLmFkYkV4ZWMoW2NtZF0pKTtcbiAgICBsb2cuZGVidWcoc3Rkb3V0KTtcblxuICAgIC8vIG9uIHJlYWwgZGV2aWNlcyBpbiBzb21lIHNpdHVhdGlvbnMgd2UgZ2V0IGFuIGVycm9yIGluIHRoZSBzdGRvdXRcbiAgICBpZiAoc3Rkb3V0KSB7XG4gICAgICBpZiAoc3Rkb3V0LmluY2x1ZGVzKCdhZGJkIGNhbm5vdCBydW4gYXMgcm9vdCcpKSB7XG4gICAgICAgIHJldHVybiB7aXNTdWNjZXNzZnVsOiBmYWxzZSwgd2FzQWxyZWFkeVJvb3RlZH07XG4gICAgICB9XG4gICAgICAvLyBpZiB0aGUgZGV2aWNlIHdhcyBhbHJlYWR5IHJvb3RlZCwgcmV0dXJuIHRoYXQgaW4gdGhlIHJlc3VsdFxuICAgICAgaWYgKHN0ZG91dC5pbmNsdWRlcygnYWxyZWFkeSBydW5uaW5nIGFzIHJvb3QnKSkge1xuICAgICAgICB3YXNBbHJlYWR5Um9vdGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtpc1N1Y2Nlc3NmdWw6IHRydWUsIHdhc0FscmVhZHlSb290ZWR9O1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBjb25zdCB7c3RkZXJyID0gJycsIG1lc3NhZ2V9ID0gZXJyO1xuICAgIGxvZy53YXJuKGBVbmFibGUgdG8gJHtjbWR9IGFkYiBkYWVtb24uIE9yaWdpbmFsIGVycm9yOiAnJHttZXNzYWdlfScuIFN0ZGVycjogJyR7c3RkZXJyfScuIENvbnRpbnVpbmcuYCk7XG4gICAgcmV0dXJuIHtpc1N1Y2Nlc3NmdWw6IGZhbHNlLCB3YXNBbHJlYWR5Um9vdGVkfTtcbiAgfVxufTtcblxuLyoqXG4gKiBTd2l0Y2ggYWRiIHNlcnZlciB0byByb290IG1vZGVcbiAqIEByZXR1cm4ge3Jvb3RSZXN1bHR9XG4gKi9cbnN5c3RlbUNhbGxNZXRob2RzLnJvb3QgPSBhc3luYyBmdW5jdGlvbiByb290ICgpIHtcbiAgcmV0dXJuIGF3YWl0IHRoaXMuY2hhbmdlVXNlclByaXZpbGVnZXModHJ1ZSk7XG59O1xuXG4vKipcbiAqIFN3aXRjaCBhZGIgc2VydmVyIHRvIG5vbi1yb290IG1vZGUuXG4gKlxuICogQHJldHVybiB7cm9vdFJlc3VsdH1cbiAqL1xuc3lzdGVtQ2FsbE1ldGhvZHMudW5yb290ID0gYXN5bmMgZnVuY3Rpb24gdW5yb290ICgpIHtcbiAgcmV0dXJuIGF3YWl0IHRoaXMuY2hhbmdlVXNlclByaXZpbGVnZXMoZmFsc2UpO1xufTtcblxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciB0aGUgY3VycmVudCB1c2VyIGlzIHJvb3RcbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSB1c2VyIGlzIHJvb3RcbiAqIEB0aHJvd3Mge0Vycm9yfSBpZiB0aGVyZSB3YXMgYW4gZXJyb3Igd2hpbGUgaWRlbnRpZnlpbmdcbiAqIHRoZSB1c2VyLlxuICovXG5zeXN0ZW1DYWxsTWV0aG9kcy5pc1Jvb3QgPSBhc3luYyBmdW5jdGlvbiBpc1Jvb3QgKCkge1xuICByZXR1cm4gKGF3YWl0IHRoaXMuc2hlbGwoWyd3aG9hbWknXSkpLnRyaW0oKSA9PT0gJ3Jvb3QnO1xufTtcblxuLyoqXG4gKiBWZXJpZnkgd2hldGhlciBhIHJlbW90ZSBwYXRoIGV4aXN0cyBvbiB0aGUgZGV2aWNlIHVuZGVyIHRlc3QuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHJlbW90ZVBhdGggLSBUaGUgcmVtb3RlIHBhdGggdG8gdmVyaWZ5LlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgZ2l2ZW4gcGF0aCBleGlzdHMgb24gdGhlIGRldmljZS5cbiAqL1xuc3lzdGVtQ2FsbE1ldGhvZHMuZmlsZUV4aXN0cyA9IGFzeW5jIGZ1bmN0aW9uIGZpbGVFeGlzdHMgKHJlbW90ZVBhdGgpIHtcbiAgY29uc3QgcGFzc0ZsYWcgPSAnX19QQVNTX18nO1xuICBjb25zdCBjaGVja0NtZCA9IGBbIC1lICcke3JlbW90ZVBhdGgucmVwbGFjZSgvJy9nLCBgXFxcXCdgKX0nIF0gJiYgZWNobyAke3Bhc3NGbGFnfWA7XG4gIHRyeSB7XG4gICAgcmV0dXJuIF8uaW5jbHVkZXMoYXdhaXQgdGhpcy5zaGVsbChbY2hlY2tDbWRdKSwgcGFzc0ZsYWcpO1xuICB9IGNhdGNoIChpZ24pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbi8qKlxuICogR2V0IHRoZSBvdXRwdXQgb2YgX2xzXyBjb21tYW5kIG9uIHRoZSBkZXZpY2UgdW5kZXIgdGVzdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVtb3RlUGF0aCAtIFRoZSByZW1vdGUgcGF0aCAodGhlIGZpcnN0IGFyZ3VtZW50IHRvIHRoZSBfbHNfIGNvbW1hbmQpLlxuICogQHBhcmFtIHtBcnJheS48U3RyaW5nPn0gb3B0cyBbW11dIC0gQWRkaXRpb25hbCBfbHNfIG9wdGlvbnMuXG4gKiBAcmV0dXJuIHtBcnJheS48U3RyaW5nPn0gVGhlIF9sc18gb3V0cHV0IGFzIGFuIGFycmF5IG9mIHNwbGl0IGxpbmVzLlxuICogICAgICAgICAgICAgICAgICAgICAgICAgIEFuIGVtcHR5IGFycmF5IGlzIHJldHVybmVkIG9mIHRoZSBnaXZlbiBfcmVtb3RlUGF0aF9cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICBkb2VzIG5vdCBleGlzdC5cbiAqL1xuc3lzdGVtQ2FsbE1ldGhvZHMubHMgPSBhc3luYyBmdW5jdGlvbiBscyAocmVtb3RlUGF0aCwgb3B0cyA9IFtdKSB7XG4gIHRyeSB7XG4gICAgbGV0IGFyZ3MgPSBbJ2xzJywgLi4ub3B0cywgcmVtb3RlUGF0aF07XG4gICAgbGV0IHN0ZG91dCA9IGF3YWl0IHRoaXMuc2hlbGwoYXJncyk7XG4gICAgbGV0IGxpbmVzID0gc3Rkb3V0LnNwbGl0KCdcXG4nKTtcbiAgICByZXR1cm4gbGluZXMubWFwKChsKSA9PiBsLnRyaW0oKSlcbiAgICAgIC5maWx0ZXIoQm9vbGVhbilcbiAgICAgIC5maWx0ZXIoKGwpID0+IGwuaW5kZXhPZignTm8gc3VjaCBmaWxlJykgPT09IC0xKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgaWYgKGVyci5tZXNzYWdlLmluZGV4T2YoJ05vIHN1Y2ggZmlsZSBvciBkaXJlY3RvcnknKSA9PT0gLTEpIHtcbiAgICAgIHRocm93IGVycjtcbiAgICB9XG4gICAgcmV0dXJuIFtdO1xuICB9XG59O1xuXG4vKipcbiAqIEdldCB0aGUgc2l6ZSBvZiB0aGUgcGFydGljdWxhciBmaWxlIGxvY2F0ZWQgb24gdGhlIGRldmljZSB1bmRlciB0ZXN0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSByZW1vdGVQYXRoIC0gVGhlIHJlbW90ZSBwYXRoIHRvIHRoZSBmaWxlLlxuICogQHJldHVybiB7bnVtYmVyfSBGaWxlIHNpemUgaW4gYnl0ZXMuXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlcmUgd2FzIGFuIGVycm9yIHdoaWxlIGdldHRpbmcgdGhlIHNpemUgb2YgdGhlIGdpdmVuIGZpbGUuXG4gKi9cbnN5c3RlbUNhbGxNZXRob2RzLmZpbGVTaXplID0gYXN5bmMgZnVuY3Rpb24gZmlsZVNpemUgKHJlbW90ZVBhdGgpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBmaWxlcyA9IGF3YWl0IHRoaXMubHMocmVtb3RlUGF0aCwgWyctbGEnXSk7XG4gICAgaWYgKGZpbGVzLmxlbmd0aCAhPT0gMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBSZW1vdGUgcGF0aCBpcyBub3QgYSBmaWxlYCk7XG4gICAgfVxuICAgIC8vIGh0dHBzOi8vcmVnZXgxMDEuY29tL3IvZk9zNFA0LzhcbiAgICBjb25zdCBtYXRjaCA9IC9bcnd4c1N0VFxcLStdezEwfVtcXHNcXGRdKlxcc1teXFxzXStcXHMrW15cXHNdK1xccysoXFxkKykvLmV4ZWMoZmlsZXNbMF0pO1xuICAgIGlmICghbWF0Y2ggfHwgXy5pc05hTihwYXJzZUludChtYXRjaFsxXSwgMTApKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gcGFyc2Ugc2l6ZSBmcm9tIGxpc3Qgb3V0cHV0OiAnJHtmaWxlc1swXX0nYCk7XG4gICAgfVxuICAgIHJldHVybiBwYXJzZUludChtYXRjaFsxXSwgMTApO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byBnZXQgZmlsZSBzaXplIGZvciAnJHtyZW1vdGVQYXRofSc6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gIH1cbn07XG5cbi8qKlxuICogSW5zdGFsbHMgdGhlIGdpdmVuIGNlcnRpZmljYXRlIG9uIGEgcm9vdGVkIHJlYWwgZGV2aWNlIG9yXG4gKiBhbiBlbXVsYXRvci4gVGhlIGVtdWxhdG9yIG11c3QgYmUgZXhlY3V0ZWQgd2l0aCBgLXdyaXRhYmxlLXN5c3RlbWBcbiAqIGNvbW1hbmQgbGluZSBvcHRpb24gYW5kIGFkYiBkYWVtb24gc2hvdWxkIGJlIHJ1bm5pbmcgaW4gcm9vdFxuICogbW9kZSBmb3IgdGhpcyBtZXRob2QgdG8gd29yayBwcm9wZXJseS4gVGhlIG1ldGhvZCBhbHNvIHJlcXVpcmVzXG4gKiBvcGVuc3NsIHRvb2wgdG8gYmUgYXZhaWxhYmxlIG9uIHRoZSBkZXN0aW5hdGlvbiBzeXN0ZW0uXG4gKiBSZWFkIGh0dHBzOi8vZ2l0aHViLmNvbS9hcHBpdW0vYXBwaXVtL2lzc3Vlcy8xMDk2NFxuICogZm9yIG1vcmUgZGV0YWlscyBvbiB0aGlzIHRvcGljXG4gKlxuICogQHBhcmFtIHtCdWZmZXJ8c3RyaW5nfSBjZXJ0IC0gYmFzZTY0LWRlY29kZWQgY29udGVudCBvZiB0aGUgYWN0dWFsIGNlcnRpZmljYXRlXG4gKiByZXByZXNlbnRlZCBhcyBhIHN0cmluZyBvciBhIGJ1ZmZlclxuICogQHRocm93cyB7RXJyb3J9IElmIG9wZW5zc2wgdG9vbCBpcyBub3QgYXZhaWxhYmxlIG9uIHRoZSBkZXN0aW5hdGlvbiBzeXN0ZW1cbiAqIG9yIGlmIHRoZXJlIHdhcyBhbiBlcnJvciB3aGlsZSBpbnN0YWxsaW5nIHRoZSBjZXJ0aWZpY2F0ZVxuICovXG5zeXN0ZW1DYWxsTWV0aG9kcy5pbnN0YWxsTWl0bUNlcnRpZmljYXRlID0gYXN5bmMgZnVuY3Rpb24gaW5zdGFsbE1pdG1DZXJ0aWZpY2F0ZSAoY2VydCkge1xuICBjb25zdCBvcGVuU3NsID0gYXdhaXQgZ2V0T3BlblNzbEZvck9zKCk7XG5cbiAgaWYgKCFfLmlzQnVmZmVyKGNlcnQpKSB7XG4gICAgY2VydCA9IEJ1ZmZlci5mcm9tKGNlcnQsICdiYXNlNjQnKTtcbiAgfVxuXG4gIGNvbnN0IHRtcFJvb3QgPSBhd2FpdCB0ZW1wRGlyLm9wZW5EaXIoKTtcbiAgdHJ5IHtcbiAgICBjb25zdCBzcmNDZXJ0ID0gcGF0aC5yZXNvbHZlKHRtcFJvb3QsICdzb3VyY2UuY2VyJyk7XG4gICAgYXdhaXQgZnMud3JpdGVGaWxlKHNyY0NlcnQsIGNlcnQpO1xuICAgIGxldCB7c3Rkb3V0fSA9IGF3YWl0IGV4ZWMob3BlblNzbCwgWyd4NTA5JywgJy1ub291dCcsICctaGFzaCcsICctaW4nLCBzcmNDZXJ0XSk7XG4gICAgY29uc3QgY2VydEhhc2ggPSBzdGRvdXQudHJpbSgpO1xuICAgIGxvZy5kZWJ1ZyhgR290IGNlcnRpZmljYXRlIGhhc2g6ICR7Y2VydEhhc2h9YCk7XG4gICAgbG9nLmRlYnVnKCdQcmVwYXJpbmcgY2VydGlmaWNhdGUgY29udGVudCcpO1xuICAgICh7c3Rkb3V0fSA9IGF3YWl0IGV4ZWMob3BlblNzbCwgWyd4NTA5JywgJy1pbicsIHNyY0NlcnRdLCB7aXNCdWZmZXI6IHRydWV9KSk7XG4gICAgbGV0IGRzdENlcnRDb250ZW50ID0gc3Rkb3V0O1xuICAgICh7c3Rkb3V0fSA9IGF3YWl0IGV4ZWMob3BlblNzbCwgWyd4NTA5JyxcbiAgICAgICctaW4nLCBzcmNDZXJ0LFxuICAgICAgJy10ZXh0JyxcbiAgICAgICctZmluZ2VycHJpbnQnLFxuICAgICAgJy1ub291dCddLCB7aXNCdWZmZXI6IHRydWV9KSk7XG4gICAgZHN0Q2VydENvbnRlbnQgPSBCdWZmZXIuY29uY2F0KFtkc3RDZXJ0Q29udGVudCwgc3Rkb3V0XSk7XG4gICAgY29uc3QgZHN0Q2VydCA9IHBhdGgucmVzb2x2ZSh0bXBSb290LCBgJHtjZXJ0SGFzaH0uMGApO1xuICAgIGF3YWl0IGZzLndyaXRlRmlsZShkc3RDZXJ0LCBkc3RDZXJ0Q29udGVudCk7XG4gICAgbG9nLmRlYnVnKCdSZW1vdW50aW5nIC9zeXN0ZW0gaW4gcncgbW9kZScpO1xuICAgIC8vIFNvbWV0aW1lcyBlbXVsYXRvciByZWJvb3QgaXMgc3RpbGwgbm90IGZ1bGx5IGZpbmlzaGVkIG9uIHRoaXMgc3RhZ2UsIHNvIHJldHJ5XG4gICAgYXdhaXQgcmV0cnlJbnRlcnZhbCg1LCAyMDAwLCBhc3luYyAoKSA9PiBhd2FpdCB0aGlzLmFkYkV4ZWMoWydyZW1vdW50J10pKTtcbiAgICBsb2cuZGVidWcoYFVwbG9hZGluZyB0aGUgZ2VuZXJhdGVkIGNlcnRpZmljYXRlIGZyb20gJyR7ZHN0Q2VydH0nIHRvICcke0NFUlRTX1JPT1R9J2ApO1xuICAgIGF3YWl0IHRoaXMucHVzaChkc3RDZXJ0LCBDRVJUU19ST09UKTtcbiAgICBsb2cuZGVidWcoJ1JlbW91bnRpbmcgL3N5c3RlbSB0byBjb25maXJtIGNoYW5nZXMnKTtcbiAgICBhd2FpdCB0aGlzLmFkYkV4ZWMoWydyZW1vdW50J10pO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBpbmplY3QgdGhlIGN1c3RvbSBjZXJ0aWZpY2F0ZS4gYCArXG4gICAgICAgICAgICAgICAgICAgIGBJcyB0aGUgY2VydGlmaWNhdGUgcHJvcGVybHkgZW5jb2RlZCBpbnRvIGJhc2U2NC1zdHJpbmc/IGAgK1xuICAgICAgICAgICAgICAgICAgICBgRG8geW91IGhhdmUgcm9vdCBwZXJtaXNzaW9ucyBvbiB0aGUgZGV2aWNlPyBgICtcbiAgICAgICAgICAgICAgICAgICAgYE9yaWdpbmFsIGVycm9yOiAke2Vyci5tZXNzYWdlfWApO1xuICB9IGZpbmFsbHkge1xuICAgIGF3YWl0IGZzLnJpbXJhZih0bXBSb290KTtcbiAgfVxufTtcblxuLyoqXG4gKiBWZXJpZmllcyBpZiB0aGUgZ2l2ZW4gcm9vdCBjZXJ0aWZpY2F0ZSBpcyBhbHJlYWR5IGluc3RhbGxlZCBvbiB0aGUgZGV2aWNlLlxuICpcbiAqIEBwYXJhbSB7QnVmZmVyfHN0cmluZ30gY2VydCAtIGJhc2U2NC1kZWNvZGVkIGNvbnRlbnQgb2YgdGhlIGFjdHVhbCBjZXJ0aWZpY2F0ZVxuICogcmVwcmVzZW50ZWQgYXMgYSBzdHJpbmcgb3IgYSBidWZmZXJcbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiBvcGVuc3NsIHRvb2wgaXMgbm90IGF2YWlsYWJsZSBvbiB0aGUgZGVzdGluYXRpb24gc3lzdGVtXG4gKiBvciBpZiB0aGVyZSB3YXMgYW4gZXJyb3Igd2hpbGUgY2hlY2tpbmcgdGhlIGNlcnRpZmljYXRlXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGUgZ2l2ZW4gY2VydGlmaWNhdGUgaXMgYWxyZWFkeSBpbnN0YWxsZWRcbiAqL1xuc3lzdGVtQ2FsbE1ldGhvZHMuaXNNaXRtQ2VydGlmaWNhdGVJbnN0YWxsZWQgPSBhc3luYyBmdW5jdGlvbiBpc01pdG1DZXJ0aWZpY2F0ZUluc3RhbGxlZCAoY2VydCkge1xuICBjb25zdCBvcGVuU3NsID0gYXdhaXQgZ2V0T3BlblNzbEZvck9zKCk7XG5cbiAgaWYgKCFfLmlzQnVmZmVyKGNlcnQpKSB7XG4gICAgY2VydCA9IEJ1ZmZlci5mcm9tKGNlcnQsICdiYXNlNjQnKTtcbiAgfVxuXG4gIGNvbnN0IHRtcFJvb3QgPSBhd2FpdCB0ZW1wRGlyLm9wZW5EaXIoKTtcbiAgbGV0IGNlcnRIYXNoO1xuICB0cnkge1xuICAgIGNvbnN0IHRtcENlcnQgPSBwYXRoLnJlc29sdmUodG1wUm9vdCwgJ3NvdXJjZS5jZXInKTtcbiAgICBhd2FpdCBmcy53cml0ZUZpbGUodG1wQ2VydCwgY2VydCk7XG4gICAgY29uc3Qge3N0ZG91dH0gPSBhd2FpdCBleGVjKG9wZW5Tc2wsIFsneDUwOScsICctbm9vdXQnLCAnLWhhc2gnLCAnLWluJywgdG1wQ2VydF0pO1xuICAgIGNlcnRIYXNoID0gc3Rkb3V0LnRyaW0oKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgcmV0cmlldmUgdGhlIGNlcnRpZmljYXRlIGhhc2guIGAgK1xuICAgICAgICAgICAgICAgICAgICBgSXMgdGhlIGNlcnRpZmljYXRlIHByb3Blcmx5IGVuY29kZWQgaW50byBiYXNlNjQtc3RyaW5nPyBgICtcbiAgICAgICAgICAgICAgICAgICAgYE9yaWdpbmFsIGVycm9yOiAke2Vyci5tZXNzYWdlfWApO1xuICB9IGZpbmFsbHkge1xuICAgIGF3YWl0IGZzLnJpbXJhZih0bXBSb290KTtcbiAgfVxuICBjb25zdCBkc3RQYXRoID0gcGF0aC5wb3NpeC5yZXNvbHZlKENFUlRTX1JPT1QsIGAke2NlcnRIYXNofS4wYCk7XG4gIGxvZy5kZWJ1ZyhgQ2hlY2tpbmcgaWYgdGhlIGNlcnRpZmljYXRlIGlzIGFscmVhZHkgaW5zdGFsbGVkIGF0ICcke2RzdFBhdGh9J2ApO1xuICByZXR1cm4gYXdhaXQgdGhpcy5maWxlRXhpc3RzKGRzdFBhdGgpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgc3lzdGVtQ2FsbE1ldGhvZHM7XG5leHBvcnQgeyBERUZBVUxUX0FEQl9FWEVDX1RJTUVPVVQsIGdldEFuZHJv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
