#!/usr/bin/env node
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "finalizeSchema", {
  enumerable: true,
  get: function () {
    return _schema.finalizeSchema;
  }
});
Object.defineProperty(exports, "getSchema", {
  enumerable: true,
  get: function () {
    return _schema.getSchema;
  }
});
exports.init = init;
exports.main = main;
Object.defineProperty(exports, "readConfigFile", {
  enumerable: true,
  get: function () {
    return _configFile.readConfigFile;
  }
});
exports.resolveAppiumHome = void 0;
Object.defineProperty(exports, "validate", {
  enumerable: true,
  get: function () {
    return _schema.validate;
  }
});

require("source-map-support/register");

var _logsink = require("./logsink");

var _logger = _interopRequireDefault(require("./logger"));

var _baseDriver = require("@appium/base-driver");

var _support = require("@appium/support");

var _asyncbox = require("asyncbox");

var _lodash = _interopRequireDefault(require("lodash"));

var _appium = require("./appium");

var _extension = require("./cli/extension");

var _parser = require("./cli/parser");

var _config = require("./config");

var _configFile = require("./config-file");

var _extension2 = require("./extension");

var _constants = require("./constants");

var _gridRegister = _interopRequireDefault(require("./grid-register"));

var _schema = require("./schema/schema");

var _utils = require("./utils");

const {
  resolveAppiumHome
} = _support.env;
exports.resolveAppiumHome = resolveAppiumHome;

async function preflightChecks(args, throwInsteadOfExit = false) {
  try {
    (0, _config.checkNodeOk)();
    await (0, _config.checkNpmOk)();

    if (args.longStacktrace) {
      require('longjohn').async_trace_limit = -1;
    }

    if (args.showBuildInfo) {
      await (0, _config.showBuildInfo)();
      process.exit(0);
    }

    (0, _config.warnNodeDeprecations)();
    (0, _schema.validate)(args);

    if (args.tmpDir) {
      await (0, _config.validateTmpDir)(args.tmpDir);
    }
  } catch (err) {
    _logger.default.error(err.message.red);

    if (throwInsteadOfExit) {
      throw err;
    }

    process.exit(1);
  }
}

function logNonDefaultArgsWarning(args) {
  _logger.default.info('Non-default server args:');

  (0, _utils.inspect)(args);
}

function logDefaultCapabilitiesWarning(caps) {
  _logger.default.info('Default capabilities, which will be added to each request ' + 'unless overridden by desired capabilities:');

  (0, _utils.inspect)(caps);
}

async function logStartupInfo(args) {
  let welcome = `Welcome to Appium v${_config.APPIUM_VER}`;
  let appiumRev = await (0, _config.getGitRev)();

  if (appiumRev) {
    welcome += ` (REV ${appiumRev})`;
  }

  _logger.default.info(welcome);

  let showArgs = (0, _config.getNonDefaultServerArgs)(args);

  if (_lodash.default.size(showArgs)) {
    logNonDefaultArgsWarning(showArgs);
  }

  if (!_lodash.default.isEmpty(args.defaultCapabilities)) {
    logDefaultCapabilitiesWarning(args.defaultCapabilities);
  }
}

function logServerPort(address, port) {
  let logMessage = `Appium REST http interface listener started on ` + `${address}:${port}`;

  _logger.default.info(logMessage);
}

function getServerUpdaters(driverClasses, pluginClasses) {
  return _lodash.default.compact(_lodash.default.map([...driverClasses.keys(), ...pluginClasses.keys()], 'updateServer'));
}

function getExtraMethodMap(driverClasses, pluginClasses) {
  return [...driverClasses.keys(), ...pluginClasses.keys()].reduce((map, klass) => ({ ...map,
    ...(klass.newMethodMap ?? {})
  }), {});
}

function areServerCommandArgs(args) {
  return args.subcommand === _constants.SERVER_SUBCOMMAND;
}

async function init(args) {
  const appiumHome = (args === null || args === void 0 ? void 0 : args.appiumHome) ?? (await resolveAppiumHome());
  const {
    driverConfig,
    pluginConfig
  } = await (0, _extension2.loadExtensions)(appiumHome);
  const parser = (0, _parser.getParser)();
  let throwInsteadOfExit = false;
  let preConfigArgs;

  if (args) {
    if (args.throwInsteadOfExit) {
      throwInsteadOfExit = true;
      delete args.throwInsteadOfExit;
    }

    preConfigArgs = { ...args,
      subcommand: args.subcommand ?? _constants.SERVER_SUBCOMMAND
    };
  } else {
    preConfigArgs = parser.parseArgs();
  }

  const configResult = await (0, _configFile.readConfigFile)(preConfigArgs.configFile);

  if (!_lodash.default.isEmpty(configResult.errors)) {
    throw new Error(`Errors in config file ${configResult.filepath}:\n ${configResult.reason ?? configResult.errors}`);
  }

  if (areServerCommandArgs(preConfigArgs)) {
    var _configResult$config;

    const defaults = (0, _schema.getDefaultsForSchema)(false);

    const serverArgs = _lodash.default.defaultsDeep(preConfigArgs, (_configResult$config = configResult.config) === null || _configResult$config === void 0 ? void 0 : _configResult$config.server, defaults);

    if (preConfigArgs.showConfig) {
      (0, _config.showConfig)((0, _config.getNonDefaultServerArgs)(preConfigArgs), configResult, defaults, serverArgs);
      return {};
    }

    await (0, _logsink.init)(serverArgs);

    if (serverArgs.logFilters) {
      const {
        issues,
        rules
      } = await _support.logger.loadSecureValuesPreprocessingRules(serverArgs.logFilters);

      if (!_lodash.default.isEmpty(issues)) {
        throw new Error(`The log filtering rules config '${serverArgs.logFilters}' has issues: ` + JSON.stringify(issues, null, 2));
      }

      if (_lodash.default.isEmpty(rules)) {
        _logger.default.warn(`Found no log filtering rules in '${serverArgs.logFilters}'. Is that expected?`);
      } else {
        _logger.default.info(`Loaded ${_support.util.pluralize('filtering rule', rules.length, true)} from '${serverArgs.logFilters}'`);
      }
    }

    const appiumDriver = new _appium.AppiumDriver(serverArgs);
    appiumDriver.driverConfig = driverConfig;
    await preflightChecks(serverArgs, throwInsteadOfExit);
    return {
      appiumDriver,
      parsedArgs: serverArgs,
      driverConfig,
      pluginConfig
    };
  } else {
    const extensionCommandArgs = preConfigArgs;

    if (preConfigArgs.subcommand === _constants.DRIVER_TYPE) {
      await (0, _extension.runExtensionCommand)(extensionCommandArgs, driverConfig);
      return {};
    }

    if (preConfigArgs.subcommand === _constants.PLUGIN_TYPE) {
      await (0, _extension.runExtensionCommand)(extensionCommandArgs, pluginConfig);
      return {};
    }

    return {};
  }
}

async function main(args) {
  const {
    appiumDriver,
    parsedArgs,
    pluginConfig,
    driverConfig
  } = await init(args);

  if (!appiumDriver || !parsedArgs || !pluginConfig || !driverConfig) {
    return;
  }

  const pluginClasses = (0, _extension2.getActivePlugins)(pluginConfig, parsedArgs.usePlugins);
  appiumDriver.pluginClasses = pluginClasses;
  await logStartupInfo(parsedArgs);
  let routeConfiguringFunction = (0, _baseDriver.routeConfiguringFunction)(appiumDriver);
  const driverClasses = (0, _extension2.getActiveDrivers)(driverConfig, parsedArgs.useDrivers);
  const serverUpdaters = getServerUpdaters(driverClasses, pluginClasses);
  const extraMethodMap = getExtraMethodMap(driverClasses, pluginClasses);
  const serverOpts = {
    routeConfiguringFunction,
    port: parsedArgs.port,
    hostname: parsedArgs.address,
    allowCors: parsedArgs.allowCors,
    basePath: parsedArgs.basePath,
    serverUpdaters,
    extraMethodMap,
    cliArgs: parsedArgs
  };

  if (parsedArgs.keepAliveTimeout) {
    serverOpts.keepAliveTimeout = parsedArgs.keepAliveTimeout * 1000;
  }

  let server;

  try {
    server = await (0, _baseDriver.server)(serverOpts);
  } catch (err) {
    _logger.default.error(`Could not configure Appium server. It's possible that a driver or plugin tried ` + `to update the server and failed. Original error: ${err.message}`);

    _logger.default.debug(err.stack);

    return process.exit(1);
  }

  if (parsedArgs.allowCors) {
    _logger.default.warn('You have enabled CORS requests from any host. Be careful not ' + 'to visit sites which could maliciously try to start Appium ' + 'sessions on your machine');
  }

  appiumDriver.server = server;

  try {
    if (parsedArgs.nodeconfig) {
      await (0, _gridRegister.default)(parsedArgs.nodeconfig, parsedArgs.address, parsedArgs.port, parsedArgs.basePath);
    }
  } catch (err) {
    await server.close();
    throw err;
  }

  for (const signal of ['SIGINT', 'SIGTERM']) {
    process.once(signal, async function onSignal() {
      _logger.default.info(`Received ${signal} - shutting down`);

      try {
        await appiumDriver.deleteAllSessions({
          force: true,
          reason: `The process has received ${signal} signal`
        });
        await server.close();
        process.exit(0);
      } catch (e) {
        _logger.default.warn(e);

        process.exit(1);
      }
    });
  }

  logServerPort(parsedArgs.address, parsedArgs.port);
  driverConfig.print();
  pluginConfig.print([...pluginClasses.values()]);
  return server;
}

if (require.main === module) {
  (0, _asyncbox.asyncify)(main);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXNvbHZlQXBwaXVtSG9tZSIsImVudiIsInByZWZsaWdodENoZWNrcyIsImFyZ3MiLCJ0aHJvd0luc3RlYWRPZkV4aXQiLCJjaGVja05vZGVPayIsImNoZWNrTnBtT2siLCJsb25nU3RhY2t0cmFjZSIsInJlcXVpcmUiLCJhc3luY190cmFjZV9saW1pdCIsInNob3dCdWlsZEluZm8iLCJwcm9jZXNzIiwiZXhpdCIsIndhcm5Ob2RlRGVwcmVjYXRpb25zIiwidmFsaWRhdGUiLCJ0bXBEaXIiLCJ2YWxpZGF0ZVRtcERpciIsImVyciIsImxvZ2dlciIsImVycm9yIiwibWVzc2FnZSIsInJlZCIsImxvZ05vbkRlZmF1bHRBcmdzV2FybmluZyIsImluZm8iLCJpbnNwZWN0IiwibG9nRGVmYXVsdENhcGFiaWxpdGllc1dhcm5pbmciLCJjYXBzIiwibG9nU3RhcnR1cEluZm8iLCJ3ZWxjb21lIiwiQVBQSVVNX1ZFUiIsImFwcGl1bVJldiIsImdldEdpdFJldiIsInNob3dBcmdzIiwiZ2V0Tm9uRGVmYXVsdFNlcnZlckFyZ3MiLCJfIiwic2l6ZSIsImlzRW1wdHkiLCJkZWZhdWx0Q2FwYWJpbGl0aWVzIiwibG9nU2VydmVyUG9ydCIsImFkZHJlc3MiLCJwb3J0IiwibG9nTWVzc2FnZSIsImdldFNlcnZlclVwZGF0ZXJzIiwiZHJpdmVyQ2xhc3NlcyIsInBsdWdpbkNsYXNzZXMiLCJjb21wYWN0IiwibWFwIiwia2V5cyIsImdldEV4dHJhTWV0aG9kTWFwIiwicmVkdWNlIiwia2xhc3MiLCJuZXdNZXRob2RNYXAiLCJhcmVTZXJ2ZXJDb21tYW5kQXJncyIsInN1YmNvbW1hbmQiLCJTRVJWRVJfU1VCQ09NTUFORCIsImluaXQiLCJhcHBpdW1Ib21lIiwiZHJpdmVyQ29uZmlnIiwicGx1Z2luQ29uZmlnIiwibG9hZEV4dGVuc2lvbnMiLCJwYXJzZXIiLCJnZXRQYXJzZXIiLCJwcmVDb25maWdBcmdzIiwicGFyc2VBcmdzIiwiY29uZmlnUmVzdWx0IiwicmVhZENvbmZpZ0ZpbGUiLCJjb25maWdGaWxlIiwiZXJyb3JzIiwiRXJyb3IiLCJmaWxlcGF0aCIsInJlYXNvbiIsImRlZmF1bHRzIiwiZ2V0RGVmYXVsdHNGb3JTY2hlbWEiLCJzZXJ2ZXJBcmdzIiwiZGVmYXVsdHNEZWVwIiwiY29uZmlnIiwic2VydmVyIiwic2hvd0NvbmZpZyIsImxvZ3NpbmtJbml0IiwibG9nRmlsdGVycyIsImlzc3VlcyIsInJ1bGVzIiwibG9nRmFjdG9yeSIsImxvYWRTZWN1cmVWYWx1ZXNQcmVwcm9jZXNzaW5nUnVsZXMiLCJKU09OIiwic3RyaW5naWZ5Iiwid2FybiIsInV0aWwiLCJwbHVyYWxpemUiLCJsZW5ndGgiLCJhcHBpdW1Ecml2ZXIiLCJBcHBpdW1Ecml2ZXIiLCJwYXJzZWRBcmdzIiwiZXh0ZW5zaW9uQ29tbWFuZEFyZ3MiLCJEUklWRVJfVFlQRSIsInJ1bkV4dGVuc2lvbkNvbW1hbmQiLCJQTFVHSU5fVFlQRSIsIm1haW4iLCJnZXRBY3RpdmVQbHVnaW5zIiwidXNlUGx1Z2lucyIsInJvdXRlQ29uZmlndXJpbmdGdW5jdGlvbiIsIm1ha2VSb3V0ZXIiLCJnZXRBY3RpdmVEcml2ZXJzIiwidXNlRHJpdmVycyIsInNlcnZlclVwZGF0ZXJzIiwiZXh0cmFNZXRob2RNYXAiLCJzZXJ2ZXJPcHRzIiwiaG9zdG5hbWUiLCJhbGxvd0NvcnMiLCJiYXNlUGF0aCIsImNsaUFyZ3MiLCJrZWVwQWxpdmVUaW1lb3V0IiwiYmFzZVNlcnZlciIsImRlYnVnIiwic3RhY2siLCJub2RlY29uZmlnIiwicmVnaXN0ZXJOb2RlIiwiY2xvc2UiLCJzaWduYWwiLCJvbmNlIiwib25TaWduYWwiLCJkZWxldGVBbGxTZXNzaW9ucyIsImZvcmNlIiwiZSIsInByaW50IiwidmFsdWVzIiwibW9kdWxlIiwiYXN5bmNpZnkiXSwic291cmNlcyI6WyIuLi8uLi9saWIvbWFpbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIjIS91c3IvYmluL2VudiBub2RlXG5cbmltcG9ydCB7aW5pdCBhcyBsb2dzaW5rSW5pdH0gZnJvbSAnLi9sb2dzaW5rJzsgLy8gdGhpcyBpbXBvcnQgbmVlZHMgdG8gY29tZSBmaXJzdCBzaW5jZSBpdCBzZXRzIHVwIGdsb2JhbCBucG1sb2dcbmltcG9ydCBsb2dnZXIgZnJvbSAnLi9sb2dnZXInOyAvLyBsb2dnZXIgbmVlZHMgdG8gcmVtYWluIHNlY29uZFxuLy8gQHRzLWlnbm9yZVxuaW1wb3J0IHtyb3V0ZUNvbmZpZ3VyaW5nRnVuY3Rpb24gYXMgbWFrZVJvdXRlciwgc2VydmVyIGFzIGJhc2VTZXJ2ZXJ9IGZyb20gJ0BhcHBpdW0vYmFzZS1kcml2ZXInO1xuaW1wb3J0IHtsb2dnZXIgYXMgbG9nRmFjdG9yeSwgdXRpbCwgZW52fSBmcm9tICdAYXBwaXVtL3N1cHBvcnQnO1xuaW1wb3J0IHthc3luY2lmeX0gZnJvbSAnYXN5bmNib3gnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7QXBwaXVtRHJpdmVyfSBmcm9tICcuL2FwcGl1bSc7XG5pbXBvcnQge3J1bkV4dGVuc2lvbkNvbW1hbmR9IGZyb20gJy4vY2xpL2V4dGVuc2lvbic7XG5pbXBvcnQge2dldFBhcnNlcn0gZnJvbSAnLi9jbGkvcGFyc2VyJztcbmltcG9ydCB7XG4gIEFQUElVTV9WRVIsXG4gIGNoZWNrTm9kZU9rLFxuICBnZXRHaXRSZXYsXG4gIGdldE5vbkRlZmF1bHRTZXJ2ZXJBcmdzLFxuICBzaG93Q29uZmlnLFxuICBzaG93QnVpbGRJbmZvLFxuICB2YWxpZGF0ZVRtcERpcixcbiAgd2Fybk5vZGVEZXByZWNhdGlvbnMsXG4gIGNoZWNrTnBtT2ssXG59IGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB7cmVhZENvbmZpZ0ZpbGV9IGZyb20gJy4vY29uZmlnLWZpbGUnO1xuaW1wb3J0IHtsb2FkRXh0ZW5zaW9ucywgZ2V0QWN0aXZlUGx1Z2lucywgZ2V0QWN0aXZlRHJpdmVyc30gZnJvbSAnLi9leHRlbnNpb24nO1xuaW1wb3J0IHtEUklWRVJfVFlQRSwgUExVR0lOX1RZUEUsIFNFUlZFUl9TVUJDT01NQU5EfSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgcmVnaXN0ZXJOb2RlIGZyb20gJy4vZ3JpZC1yZWdpc3Rlcic7XG5pbXBvcnQge2dldERlZmF1bHRzRm9yU2NoZW1hLCB2YWxpZGF0ZX0gZnJvbSAnLi9zY2hlbWEvc2NoZW1hJztcbmltcG9ydCB7aW5zcGVjdH0gZnJvbSAnLi91dGlscyc7XG5cbmNvbnN0IHtyZXNvbHZlQXBwaXVtSG9tZX0gPSBlbnY7XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7UGFyc2VkQXJnc30gYXJnc1xuICogQHBhcmFtIHtib29sZWFufSBbdGhyb3dJbnN0ZWFkT2ZFeGl0XVxuICovXG5hc3luYyBmdW5jdGlvbiBwcmVmbGlnaHRDaGVja3MoYXJncywgdGhyb3dJbnN0ZWFkT2ZFeGl0ID0gZmFsc2UpIHtcbiAgdHJ5IHtcbiAgICBjaGVja05vZGVPaygpO1xuICAgIGF3YWl0IGNoZWNrTnBtT2soKTtcbiAgICBpZiAoYXJncy5sb25nU3RhY2t0cmFjZSkge1xuICAgICAgcmVxdWlyZSgnbG9uZ2pvaG4nKS5hc3luY190cmFjZV9saW1pdCA9IC0xO1xuICAgIH1cbiAgICBpZiAoYXJncy5zaG93QnVpbGRJbmZvKSB7XG4gICAgICBhd2FpdCBzaG93QnVpbGRJbmZvKCk7XG4gICAgICBwcm9jZXNzLmV4aXQoMCk7XG4gICAgfVxuICAgIHdhcm5Ob2RlRGVwcmVjYXRpb25zKCk7XG5cbiAgICB2YWxpZGF0ZShhcmdzKTtcblxuICAgIGlmIChhcmdzLnRtcERpcikge1xuICAgICAgYXdhaXQgdmFsaWRhdGVUbXBEaXIoYXJncy50bXBEaXIpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbG9nZ2VyLmVycm9yKGVyci5tZXNzYWdlLnJlZCk7XG4gICAgaWYgKHRocm93SW5zdGVhZE9mRXhpdCkge1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cblxuICAgIHByb2Nlc3MuZXhpdCgxKTtcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7QXJnc30gYXJnc1xuICovXG5mdW5jdGlvbiBsb2dOb25EZWZhdWx0QXJnc1dhcm5pbmcoYXJncykge1xuICBsb2dnZXIuaW5mbygnTm9uLWRlZmF1bHQgc2VydmVyIGFyZ3M6Jyk7XG4gIGluc3BlY3QoYXJncyk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtBcmdzWydkZWZhdWx0Q2FwYWJpbGl0aWVzJ119IGNhcHNcbiAqL1xuZnVuY3Rpb24gbG9nRGVmYXVsdENhcGFiaWxpdGllc1dhcm5pbmcoY2Fwcykge1xuICBsb2dnZXIuaW5mbyhcbiAgICAnRGVmYXVsdCBjYXBhYmlsaXRpZXMsIHdoaWNoIHdpbGwgYmUgYWRkZWQgdG8gZWFjaCByZXF1ZXN0ICcgK1xuICAgICAgJ3VubGVzcyBvdmVycmlkZGVuIGJ5IGRlc2lyZWQgY2FwYWJpbGl0aWVzOidcbiAgKTtcbiAgaW5zcGVjdChjYXBzKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1BhcnNlZEFyZ3N9IGFyZ3NcbiAqL1xuYXN5bmMgZnVuY3Rpb24gbG9nU3RhcnR1cEluZm8oYXJncykge1xuICBsZXQgd2VsY29tZSA9IGBXZWxjb21lIHRvIEFwcGl1bSB2JHtBUFBJVU1fVkVSfWA7XG4gIGxldCBhcHBpdW1SZXYgPSBhd2FpdCBnZXRHaXRSZXYoKTtcbiAgaWYgKGFwcGl1bVJldikge1xuICAgIHdlbGNvbWUgKz0gYCAoUkVWICR7YXBwaXVtUmV2fSlgO1xuICB9XG4gIGxvZ2dlci5pbmZvKHdlbGNvbWUpO1xuXG4gIGxldCBzaG93QXJncyA9IGdldE5vbkRlZmF1bHRTZXJ2ZXJBcmdzKGFyZ3MpO1xuICBpZiAoXy5zaXplKHNob3dBcmdzKSkge1xuICAgIGxvZ05vbkRlZmF1bHRBcmdzV2FybmluZyhzaG93QXJncyk7XG4gIH1cbiAgaWYgKCFfLmlzRW1wdHkoYXJncy5kZWZhdWx0Q2FwYWJpbGl0aWVzKSkge1xuICAgIGxvZ0RlZmF1bHRDYXBhYmlsaXRpZXNXYXJuaW5nKGFyZ3MuZGVmYXVsdENhcGFiaWxpdGllcyk7XG4gIH1cbiAgLy8gVE9ETzogYnJpbmcgYmFjayBsb2dsZXZlbCByZXBvcnRpbmcgYmVsb3cgb25jZSBsb2dnZXIgaXMgZmx1c2hlZCBvdXRcbiAgLy8gbG9nZ2VyLmluZm8oJ0NvbnNvbGUgTG9nTGV2ZWw6ICcgKyBsb2dnZXIudHJhbnNwb3J0cy5jb25zb2xlLmxldmVsKTtcbiAgLy8gaWYgKGxvZ2dlci50cmFuc3BvcnRzLmZpbGUpIHtcbiAgLy8gICBsb2dnZXIuaW5mbygnRmlsZSBMb2dMZXZlbDogJyArIGxvZ2dlci50cmFuc3BvcnRzLmZpbGUubGV2ZWwpO1xuICAvLyB9XG59XG5cbi8qKlxuICogTG9ncyB0aGUgYWRkcmVzcyBhbmQgcG9ydCB0aGUgc2VydmVyIGlzIGxpc3RlbmluZyBvblxuICogQHBhcmFtIHtzdHJpbmd9IGFkZHJlc3MgLSBBZGRyZXNzXG4gKiBAcGFyYW0ge251bWJlcn0gcG9ydCAtIFBvcnRcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiBsb2dTZXJ2ZXJQb3J0KGFkZHJlc3MsIHBvcnQpIHtcbiAgbGV0IGxvZ01lc3NhZ2UgPSBgQXBwaXVtIFJFU1QgaHR0cCBpbnRlcmZhY2UgbGlzdGVuZXIgc3RhcnRlZCBvbiBgICsgYCR7YWRkcmVzc306JHtwb3J0fWA7XG4gIGxvZ2dlci5pbmZvKGxvZ01lc3NhZ2UpO1xufVxuXG4vKipcbiAqIEdldHMgYSBsaXN0IG9mIGB1cGRhdGVTZXJ2ZXJgIGZ1bmN0aW9ucyBmcm9tIGFsbCBleHRlbnNpb25zXG4gKiBAcGFyYW0ge0RyaXZlck5hbWVNYXB9IGRyaXZlckNsYXNzZXNcbiAqIEBwYXJhbSB7UGx1Z2luTmFtZU1hcH0gcGx1Z2luQ2xhc3Nlc1xuICogQHJldHVybnMge2ltcG9ydCgnQGFwcGl1bS90eXBlcycpLlVwZGF0ZVNlcnZlckNhbGxiYWNrW119XG4gKi9cbmZ1bmN0aW9uIGdldFNlcnZlclVwZGF0ZXJzKGRyaXZlckNsYXNzZXMsIHBsdWdpbkNsYXNzZXMpIHtcbiAgcmV0dXJuIF8uY29tcGFjdChfLm1hcChbLi4uZHJpdmVyQ2xhc3Nlcy5rZXlzKCksIC4uLnBsdWdpbkNsYXNzZXMua2V5cygpXSwgJ3VwZGF0ZVNlcnZlcicpKTtcbn1cblxuLyoqXG4gKiBNYWtlcyBhIGJpZyBgTWV0aG9kTWFwYCBmcm9tIGFsbCB0aGUgbGl0dGxlIGBNZXRob2RNYXBgcyBpbiB0aGUgZXh0ZW5zaW9uc1xuICogQHBhcmFtIHtEcml2ZXJOYW1lTWFwfSBkcml2ZXJDbGFzc2VzXG4gKiBAcGFyYW0ge1BsdWdpbk5hbWVNYXB9IHBsdWdpbkNsYXNzZXNcbiAqIEByZXR1cm5zIHtpbXBvcnQoJ0BhcHBpdW0vdHlwZXMnKS5NZXRob2RNYXB9XG4gKi9cbmZ1bmN0aW9uIGdldEV4dHJhTWV0aG9kTWFwKGRyaXZlckNsYXNzZXMsIHBsdWdpbkNsYXNzZXMpIHtcbiAgcmV0dXJuIFsuLi5kcml2ZXJDbGFzc2VzLmtleXMoKSwgLi4ucGx1Z2luQ2xhc3Nlcy5rZXlzKCldLnJlZHVjZShcbiAgICAobWFwLCBrbGFzcykgPT4gKHtcbiAgICAgIC4uLm1hcCxcbiAgICAgIC4uLihrbGFzcy5uZXdNZXRob2RNYXAgPz8ge30pLFxuICAgIH0pLFxuICAgIHt9XG4gICk7XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIFtUPVdpdGhTZXJ2ZXJTdWJjb21tYW5kXVxuICogQHBhcmFtIHtBcmdzPFQ+fSBhcmdzXG4gKiBAcmV0dXJucyB7YXJncyBpcyBBcmdzPFdpdGhTZXJ2ZXJTdWJjb21tYW5kPn1cbiAqL1xuZnVuY3Rpb24gYXJlU2VydmVyQ29tbWFuZEFyZ3MoYXJncykge1xuICByZXR1cm4gYXJncy5zdWJjb21tYW5kID09PSBTRVJWRVJfU1VCQ09NTUFORDtcbn1cblxuLyoqXG4gKiBJbml0aWFsaXplcyBBcHBpdW0sIGJ1dCBkb2VzIG5vdCBzdGFydCB0aGUgc2VydmVyLlxuICpcbiAqIFVzZSB0aGlzIHRvIGdldCBhdCB0aGUgY29uZmlndXJhdGlvbiBzY2hlbWEuXG4gKlxuICogSWYgYGFyZ3NgIGNvbnRhaW5zIGEgbm9uLWVtcHR5IGBzdWJjb21tYW5kYCB3aGljaCBpcyBub3QgYHNlcnZlcmAsIHRoaXMgZnVuY3Rpb24gd2lsbCByZXR1cm4gYW4gZW1wdHkgb2JqZWN0LlxuICpcbiAqIEB0ZW1wbGF0ZSBbVD1XaXRoU2VydmVyU3ViY29tbWFuZF1cbiAqIEBwYXJhbSB7QXJnczxUPn0gW2FyZ3NdIC0gUGFydGlhbCBhcmdzIChwcm9nYW1tYXRpYyB1c2FnZSBvbmx5KVxuICogQHJldHVybnMge1Byb21pc2U8U2VydmVySW5pdFJlc3VsdCB8IEV4dENvbW1hbmRJbml0UmVzdWx0Pn1cbiAqIEBleGFtcGxlXG4gKiBpbXBvcnQge2luaXQsIGdldFNjaGVtYX0gZnJvbSAnYXBwaXVtJztcbiAqIGNvbnN0IG9wdGlvbnMgPSB7fTsgLy8gY29uZmlnIG9iamVjdFxuICogYXdhaXQgaW5pdChvcHRpb25zKTtcbiAqIGNvbnN0IHNjaGVtYSA9IGdldFNjaGVtYSgpOyAvLyBlbnRpcmUgY29uZmlnIHNjaGVtYSBpbmNsdWRpbmcgcGx1Z2lucyBhbmQgZHJpdmVyc1xuICovXG5hc3luYyBmdW5jdGlvbiBpbml0KGFyZ3MpIHtcbiAgY29uc3QgYXBwaXVtSG9tZSA9IGFyZ3M/LmFwcGl1bUhvbWUgPz8gKGF3YWl0IHJlc29sdmVBcHBpdW1Ib21lKCkpO1xuXG4gIGNvbnN0IHtkcml2ZXJDb25maWcsIHBsdWdpbkNvbmZpZ30gPSBhd2FpdCBsb2FkRXh0ZW5zaW9ucyhhcHBpdW1Ib21lKTtcblxuICBjb25zdCBwYXJzZXIgPSBnZXRQYXJzZXIoKTtcbiAgbGV0IHRocm93SW5zdGVhZE9mRXhpdCA9IGZhbHNlO1xuICAvKiogQHR5cGUge0FyZ3M8VD59ICovXG4gIGxldCBwcmVDb25maWdBcmdzO1xuXG4gIGlmIChhcmdzKSB7XG4gICAgLy8gaWYgd2UgaGF2ZSBhIGNvbnRhaW5pbmcgcGFja2FnZSBpbnN0ZWFkIG9mIHJ1bm5pbmcgYXMgYSBDTEkgcHJvY2VzcyxcbiAgICAvLyB0aGF0IHBhY2thZ2UgbWlnaHQgbm90IGFwcHJlY2lhdGUgdXMgY2FsbGluZyAncHJvY2Vzcy5leGl0JyB3aWxseS1cbiAgICAvLyBuaWxseSwgc28gZ2l2ZSBpdCB0aGUgb3B0aW9uIHRvIGhhdmUgdXMgdGhyb3cgaW5zdGVhZCBvZiBleGl0XG4gICAgaWYgKGFyZ3MudGhyb3dJbnN0ZWFkT2ZFeGl0KSB7XG4gICAgICB0aHJvd0luc3RlYWRPZkV4aXQgPSB0cnVlO1xuICAgICAgLy8gYnV0IHJlbW92ZSBpdCBzaW5jZSBpdCdzIG5vdCBhIHJlYWwgc2VydmVyIGFyZyBwZXIgc2VcbiAgICAgIGRlbGV0ZSBhcmdzLnRocm93SW5zdGVhZE9mRXhpdDtcbiAgICB9XG4gICAgcHJlQ29uZmlnQXJncyA9IHsuLi5hcmdzLCBzdWJjb21tYW5kOiBhcmdzLnN1YmNvbW1hbmQgPz8gU0VSVkVSX1NVQkNPTU1BTkR9O1xuICB9IGVsc2Uge1xuICAgIC8vIG90aGVyd2lzZSBwYXJzZSBmcm9tIENMSVxuICAgIHByZUNvbmZpZ0FyZ3MgPSAvKiogQHR5cGUge0FyZ3M8VD59ICovIChwYXJzZXIucGFyc2VBcmdzKCkpO1xuICB9XG5cbiAgY29uc3QgY29uZmlnUmVzdWx0ID0gYXdhaXQgcmVhZENvbmZpZ0ZpbGUocHJlQ29uZmlnQXJncy5jb25maWdGaWxlKTtcblxuICBpZiAoIV8uaXNFbXB0eShjb25maWdSZXN1bHQuZXJyb3JzKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBFcnJvcnMgaW4gY29uZmlnIGZpbGUgJHtjb25maWdSZXN1bHQuZmlsZXBhdGh9OlxcbiAke1xuICAgICAgICBjb25maWdSZXN1bHQucmVhc29uID8/IGNvbmZpZ1Jlc3VsdC5lcnJvcnNcbiAgICAgIH1gXG4gICAgKTtcbiAgfVxuXG4gIC8vIG1lcmdlIGNvbmZpZyBhbmQgYXBwbHkgZGVmYXVsdHMuXG4gIC8vIHRoZSBvcmRlciBvZiBwcmVjZW5kZWNlIGlzOlxuICAvLyAxLiBjb21tYW5kIGxpbmUgYXJnc1xuICAvLyAyLiBjb25maWcgZmlsZVxuICAvLyAzLiBkZWZhdWx0cyBmcm9tIGNvbmZpZyBmaWxlLlxuICBpZiAoYXJlU2VydmVyQ29tbWFuZEFyZ3MocHJlQ29uZmlnQXJncykpIHtcbiAgICBjb25zdCBkZWZhdWx0cyA9IGdldERlZmF1bHRzRm9yU2NoZW1hKGZhbHNlKTtcblxuICAgIC8qKiBAdHlwZSB7UGFyc2VkQXJnc30gKi9cbiAgICBjb25zdCBzZXJ2ZXJBcmdzID0gXy5kZWZhdWx0c0RlZXAocHJlQ29uZmlnQXJncywgY29uZmlnUmVzdWx0LmNvbmZpZz8uc2VydmVyLCBkZWZhdWx0cyk7XG5cbiAgICBpZiAocHJlQ29uZmlnQXJncy5zaG93Q29uZmlnKSB7XG4gICAgICBzaG93Q29uZmlnKGdldE5vbkRlZmF1bHRTZXJ2ZXJBcmdzKHByZUNvbmZpZ0FyZ3MpLCBjb25maWdSZXN1bHQsIGRlZmF1bHRzLCBzZXJ2ZXJBcmdzKTtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG5cbiAgICBhd2FpdCBsb2dzaW5rSW5pdChzZXJ2ZXJBcmdzKTtcblxuICAgIGlmIChzZXJ2ZXJBcmdzLmxvZ0ZpbHRlcnMpIHtcbiAgICAgIGNvbnN0IHtpc3N1ZXMsIHJ1bGVzfSA9IGF3YWl0IGxvZ0ZhY3RvcnkubG9hZFNlY3VyZVZhbHVlc1ByZXByb2Nlc3NpbmdSdWxlcyhcbiAgICAgICAgc2VydmVyQXJncy5sb2dGaWx0ZXJzXG4gICAgICApO1xuICAgICAgaWYgKCFfLmlzRW1wdHkoaXNzdWVzKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYFRoZSBsb2cgZmlsdGVyaW5nIHJ1bGVzIGNvbmZpZyAnJHtzZXJ2ZXJBcmdzLmxvZ0ZpbHRlcnN9JyBoYXMgaXNzdWVzOiBgICtcbiAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KGlzc3VlcywgbnVsbCwgMilcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChfLmlzRW1wdHkocnVsZXMpKSB7XG4gICAgICAgIGxvZ2dlci53YXJuKFxuICAgICAgICAgIGBGb3VuZCBubyBsb2cgZmlsdGVyaW5nIHJ1bGVzIGluICcke3NlcnZlckFyZ3MubG9nRmlsdGVyc30nLiBJcyB0aGF0IGV4cGVjdGVkP2BcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvZ2dlci5pbmZvKFxuICAgICAgICAgIGBMb2FkZWQgJHt1dGlsLnBsdXJhbGl6ZSgnZmlsdGVyaW5nIHJ1bGUnLCBydWxlcy5sZW5ndGgsIHRydWUpfSBmcm9tICcke1xuICAgICAgICAgICAgc2VydmVyQXJncy5sb2dGaWx0ZXJzXG4gICAgICAgICAgfSdgXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgYXBwaXVtRHJpdmVyID0gbmV3IEFwcGl1bURyaXZlcihzZXJ2ZXJBcmdzKTtcbiAgICAvLyBzZXQgdGhlIGNvbmZpZyBvbiB0aGUgdW1icmVsbGEgZHJpdmVyIHNvIGl0IGNhbiBtYXRjaCBkcml2ZXJzIHRvIGNhcHNcbiAgICBhcHBpdW1Ecml2ZXIuZHJpdmVyQ29uZmlnID0gZHJpdmVyQ29uZmlnO1xuICAgIGF3YWl0IHByZWZsaWdodENoZWNrcyhzZXJ2ZXJBcmdzLCB0aHJvd0luc3RlYWRPZkV4aXQpO1xuXG4gICAgcmV0dXJuIC8qKiBAdHlwZSB7U2VydmVySW5pdFJlc3VsdH0gKi8gKHtcbiAgICAgIGFwcGl1bURyaXZlcixcbiAgICAgIHBhcnNlZEFyZ3M6IHNlcnZlckFyZ3MsXG4gICAgICBkcml2ZXJDb25maWcsXG4gICAgICBwbHVnaW5Db25maWcsXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgZXh0ZW5zaW9uQ29tbWFuZEFyZ3MgPSAvKiogQHR5cGUge0FyZ3M8aW1wb3J0KCdhcHBpdW0vdHlwZXMnKS5XaXRoRXh0U3ViY29tbWFuZD59ICovIChcbiAgICAgIHByZUNvbmZpZ0FyZ3NcbiAgICApO1xuICAgIC8vIGlmIHRoZSB1c2VyIGhhcyByZXF1ZXN0ZWQgdGhlICdkcml2ZXInIENMSSwgZG9uJ3QgcnVuIHRoZSBub3JtYWwgc2VydmVyLFxuICAgIC8vIGJ1dCBpbnN0ZWFkIHBhc3MgY29udHJvbCB0byB0aGUgZHJpdmVyIENMSVxuICAgIGlmIChwcmVDb25maWdBcmdzLnN1YmNvbW1hbmQgPT09IERSSVZFUl9UWVBFKSB7XG4gICAgICBhd2FpdCBydW5FeHRlbnNpb25Db21tYW5kKGV4dGVuc2lvbkNvbW1hbmRBcmdzLCBkcml2ZXJDb25maWcpO1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgICBpZiAocHJlQ29uZmlnQXJncy5zdWJjb21tYW5kID09PSBQTFVHSU5fVFlQRSkge1xuICAgICAgYXdhaXQgcnVuRXh0ZW5zaW9uQ29tbWFuZChleHRlbnNpb25Db21tYW5kQXJncywgcGx1Z2luQ29uZmlnKTtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICByZXR1cm4ge307IC8vIHNob3VsZCBuZXZlciBoYXBwZW5cbiAgfVxufVxuXG4vKipcbiAqIEluaXRpYWxpemVzIEFwcGl1bSdzIGNvbmZpZy4gIFN0YXJ0cyBzZXJ2ZXIgaWYgYXBwcm9wcmlhdGUgYW5kIHJlc29sdmVzIHRoZVxuICogc2VydmVyIGluc3RhbmNlIGlmIHNvOyBvdGhlcndpc2UgcmVzb2x2ZXMgdy8gYHVuZGVmaW5lZGAuXG4gKiBAdGVtcGxhdGUgW1Q9V2l0aFNlcnZlclN1YmNvbW1hbmRdXG4gKiBAcGFyYW0ge0FyZ3M8VD59IFthcmdzXSAtIEFyZ3VtZW50cyBmcm9tIENMSSBvciBvdGhlcndpc2VcbiAqIEByZXR1cm5zIHtQcm9taXNlPGltcG9ydCgnQGFwcGl1bS90eXBlcycpLkFwcGl1bVNlcnZlcnx1bmRlZmluZWQ+fVxuICovXG5hc3luYyBmdW5jdGlvbiBtYWluKGFyZ3MpIHtcbiAgY29uc3Qge2FwcGl1bURyaXZlciwgcGFyc2VkQXJncywgcGx1Z2luQ29uZmlnLCBkcml2ZXJDb25maWd9ID0gLyoqIEB0eXBlIHtTZXJ2ZXJJbml0UmVzdWx0fSAqLyAoXG4gICAgYXdhaXQgaW5pdChhcmdzKVxuICApO1xuXG4gIGlmICghYXBwaXVtRHJpdmVyIHx8ICFwYXJzZWRBcmdzIHx8ICFwbHVnaW5Db25maWcgfHwgIWRyaXZlckNvbmZpZykge1xuICAgIC8vIGlmIHRoaXMgYnJhbmNoIGlzIHRha2VuLCB3ZSd2ZSBydW4gYSBkaWZmZXJlbnQgc3ViY29tbWFuZCwgc28gdGhlcmUncyBub3RoaW5nXG4gICAgLy8gbGVmdCB0byBkbyBoZXJlLlxuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHBsdWdpbkNsYXNzZXMgPSBnZXRBY3RpdmVQbHVnaW5zKHBsdWdpbkNvbmZpZywgcGFyc2VkQXJncy51c2VQbHVnaW5zKTtcbiAgLy8gc2V0IHRoZSBhY3RpdmUgcGx1Z2lucyBvbiB0aGUgdW1icmVsbGEgZHJpdmVyIHNvIGl0IGNhbiB1c2UgdGhlbSBmb3IgY29tbWFuZHNcbiAgYXBwaXVtRHJpdmVyLnBsdWdpbkNsYXNzZXMgPSBwbHVnaW5DbGFzc2VzO1xuXG4gIGF3YWl0IGxvZ1N0YXJ0dXBJbmZvKHBhcnNlZEFyZ3MpO1xuICBsZXQgcm91dGVDb25maWd1cmluZ0Z1bmN0aW9uID0gbWFrZVJvdXRlcihhcHBpdW1Ecml2ZXIpO1xuXG4gIGNvbnN0IGRyaXZlckNsYXNzZXMgPSBnZXRBY3RpdmVEcml2ZXJzKGRyaXZlckNvbmZpZywgcGFyc2VkQXJncy51c2VEcml2ZXJzKTtcbiAgY29uc3Qgc2VydmVyVXBkYXRlcnMgPSBnZXRTZXJ2ZXJVcGRhdGVycyhkcml2ZXJDbGFzc2VzLCBwbHVnaW5DbGFzc2VzKTtcbiAgY29uc3QgZXh0cmFNZXRob2RNYXAgPSBnZXRFeHRyYU1ldGhvZE1hcChkcml2ZXJDbGFzc2VzLCBwbHVnaW5DbGFzc2VzKTtcblxuICAvKiogQHR5cGUge2ltcG9ydCgnQGFwcGl1bS9iYXNlLWRyaXZlcicpLlNlcnZlck9wdHN9ICovXG4gIGNvbnN0IHNlcnZlck9wdHMgPSB7XG4gICAgcm91dGVDb25maWd1cmluZ0Z1bmN0aW9uLFxuICAgIHBvcnQ6IHBhcnNlZEFyZ3MucG9ydCxcbiAgICBob3N0bmFtZTogcGFyc2VkQXJncy5hZGRyZXNzLFxuICAgIGFsbG93Q29yczogcGFyc2VkQXJncy5hbGxvd0NvcnMsXG4gICAgYmFzZVBhdGg6IHBhcnNlZEFyZ3MuYmFzZVBhdGgsXG4gICAgc2VydmVyVXBkYXRlcnMsXG4gICAgZXh0cmFNZXRob2RNYXAsXG4gICAgY2xpQXJnczogcGFyc2VkQXJncyxcbiAgfTtcbiAgaWYgKHBhcnNlZEFyZ3Mua2VlcEFsaXZlVGltZW91dCkge1xuICAgIHNlcnZlck9wdHMua2VlcEFsaXZlVGltZW91dCA9IHBhcnNlZEFyZ3Mua2VlcEFsaXZlVGltZW91dCAqIDEwMDA7XG4gIH1cbiAgbGV0IHNlcnZlcjtcbiAgdHJ5IHtcbiAgICBzZXJ2ZXIgPSBhd2FpdCBiYXNlU2VydmVyKHNlcnZlck9wdHMpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBsb2dnZXIuZXJyb3IoXG4gICAgICBgQ291bGQgbm90IGNvbmZpZ3VyZSBBcHBpdW0gc2VydmVyLiBJdCdzIHBvc3NpYmxlIHRoYXQgYSBkcml2ZXIgb3IgcGx1Z2luIHRyaWVkIGAgK1xuICAgICAgICBgdG8gdXBkYXRlIHRoZSBzZXJ2ZXIgYW5kIGZhaWxlZC4gT3JpZ2luYWwgZXJyb3I6ICR7ZXJyLm1lc3NhZ2V9YFxuICAgICk7XG4gICAgbG9nZ2VyLmRlYnVnKGVyci5zdGFjayk7XG4gICAgcmV0dXJuIHByb2Nlc3MuZXhpdCgxKTtcbiAgfVxuXG4gIGlmIChwYXJzZWRBcmdzLmFsbG93Q29ycykge1xuICAgIGxvZ2dlci53YXJuKFxuICAgICAgJ1lvdSBoYXZlIGVuYWJsZWQgQ09SUyByZXF1ZXN0cyBmcm9tIGFueSBob3N0LiBCZSBjYXJlZnVsIG5vdCAnICtcbiAgICAgICAgJ3RvIHZpc2l0IHNpdGVzIHdoaWNoIGNvdWxkIG1hbGljaW91c2x5IHRyeSB0byBzdGFydCBBcHBpdW0gJyArXG4gICAgICAgICdzZXNzaW9ucyBvbiB5b3VyIG1hY2hpbmUnXG4gICAgKTtcbiAgfVxuICBhcHBpdW1Ecml2ZXIuc2VydmVyID0gc2VydmVyO1xuICB0cnkge1xuICAgIC8vIGNvbmZpZ3VyZSBhcyBub2RlIG9uIGdyaWQsIGlmIG5lY2Vzc2FyeVxuICAgIC8vIGZhbHN5IHZhbHVlcyBzaG91bGQgbm90IGNhdXNlIHRoaXMgdG8gcnVuXG4gICAgaWYgKHBhcnNlZEFyZ3Mubm9kZWNvbmZpZykge1xuICAgICAgYXdhaXQgcmVnaXN0ZXJOb2RlKFxuICAgICAgICBwYXJzZWRBcmdzLm5vZGVjb25maWcsXG4gICAgICAgIHBhcnNlZEFyZ3MuYWRkcmVzcyxcbiAgICAgICAgcGFyc2VkQXJncy5wb3J0LFxuICAgICAgICBwYXJzZWRBcmdzLmJhc2VQYXRoXG4gICAgICApO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgYXdhaXQgc2VydmVyLmNsb3NlKCk7XG4gICAgdGhyb3cgZXJyO1xuICB9XG5cbiAgZm9yIChjb25zdCBzaWduYWwgb2YgWydTSUdJTlQnLCAnU0lHVEVSTSddKSB7XG4gICAgcHJvY2Vzcy5vbmNlKHNpZ25hbCwgYXN5bmMgZnVuY3Rpb24gb25TaWduYWwoKSB7XG4gICAgICBsb2dnZXIuaW5mbyhgUmVjZWl2ZWQgJHtzaWduYWx9IC0gc2h1dHRpbmcgZG93bmApO1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgYXBwaXVtRHJpdmVyLmRlbGV0ZUFsbFNlc3Npb25zKHtcbiAgICAgICAgICBmb3JjZTogdHJ1ZSxcbiAgICAgICAgICByZWFzb246IGBUaGUgcHJvY2VzcyBoYXMgcmVjZWl2ZWQgJHtzaWduYWx9IHNpZ25hbGAsXG4gICAgICAgIH0pO1xuICAgICAgICBhd2FpdCBzZXJ2ZXIuY2xvc2UoKTtcbiAgICAgICAgcHJvY2Vzcy5leGl0KDApO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBsb2dnZXIud2FybihlKTtcbiAgICAgICAgcHJvY2Vzcy5leGl0KDEpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgbG9nU2VydmVyUG9ydChwYXJzZWRBcmdzLmFkZHJlc3MsIHBhcnNlZEFyZ3MucG9ydCk7XG4gIGRyaXZlckNvbmZpZy5wcmludCgpO1xuICBwbHVnaW5Db25maWcucHJpbnQoWy4uLnBsdWdpbkNsYXNzZXMudmFsdWVzKCldKTtcblxuICByZXR1cm4gc2VydmVyO1xufVxuXG4vLyBOT1RFOiB0aGlzIGlzIGhlcmUgZm9yIGJhY2t3YXJkcyBjb21wYXQgZm9yIGFueSBzY3JpcHRzIHJlZmVyZW5jaW5nIGBtYWluLmpzYCBkaXJlY3RseVxuLy8gKG1vcmUgc3BlY2lmaWNhbGx5LCBgYnVpbGQvbGliL21haW4uanNgKVxuLy8gdGhlIGV4ZWN1dGFibGUgaXMgbm93IGAuLi9pbmRleC5qc2AsIHNvIHRoYXQgbW9kdWxlIHdpbGwgdHlwaWNhbGx5IGJlIGByZXF1aXJlLm1haW5gLlxuaWYgKHJlcXVpcmUubWFpbiA9PT0gbW9kdWxlKSB7XG4gIGFzeW5jaWZ5KG1haW4pO1xufVxuXG4vLyBldmVyeXRoaW5nIGJlbG93IGhlcmUgaXMgaW50ZW5kZWQgdG8gYmUgYSBwdWJsaWMgQVBJLlxuZXhwb3J0IHtyZWFkQ29uZmlnRmlsZX0gZnJvbSAnLi9jb25maWctZmlsZSc7XG5leHBvcnQge2ZpbmFsaXplU2NoZW1hLCBnZXRTY2hlbWEsIHZhbGlkYXRlfSBmcm9tICcuL3NjaGVtYS9zY2hlbWEnO1xuZXhwb3J0IHttYWluLCBpbml0LCByZXNvbHZlQXBwaXVtSG9tZX07XG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnQGFwcGl1bS90eXBlcycpLkRyaXZlclR5cGV9IERyaXZlclR5cGVcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ0BhcHBpdW0vdHlwZXMnKS5QbHVnaW5UeXBlfSBQbHVnaW5UeXBlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdAYXBwaXVtL3R5cGVzJykuRHJpdmVyQ2xhc3N9IERyaXZlckNsYXNzXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdAYXBwaXVtL3R5cGVzJykuUGx1Z2luQ2xhc3N9IFBsdWdpbkNsYXNzXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdhcHBpdW0vdHlwZXMnKS5XaXRoU2VydmVyU3ViY29tbWFuZH0gV2l0aFNlcnZlclN1YmNvbW1hbmRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4vZXh0ZW5zaW9uJykuRHJpdmVyTmFtZU1hcH0gRHJpdmVyTmFtZU1hcFxuICogQHR5cGVkZWYge2ltcG9ydCgnLi9leHRlbnNpb24nKS5QbHVnaW5OYW1lTWFwfSBQbHVnaW5OYW1lTWFwXG4gKi9cblxuLyoqXG4gKiBMaXRlcmFsbHkgYW4gZW1wdHkgb2JqZWN0XG4gKiBAdHlwZWRlZiB7IHt9IH0gRXh0Q29tbWFuZEluaXRSZXN1bHRcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIFNlcnZlckluaXREYXRhXG4gKiBAcHJvcGVydHkge2ltcG9ydCgnLi9hcHBpdW0nKS5BcHBpdW1Ecml2ZXJ9IGFwcGl1bURyaXZlciAtIFRoZSBBcHBpdW0gZHJpdmVyXG4gKiBAcHJvcGVydHkge2ltcG9ydCgnYXBwaXVtL3R5cGVzJykuUGFyc2VkQXJnc30gcGFyc2VkQXJncyAtIFRoZSBwYXJzZWQgYXJndW1lbnRzXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7U2VydmVySW5pdERhdGEgJiBpbXBvcnQoJy4vZXh0ZW5zaW9uJykuRXh0ZW5zaW9uQ29uZmlnc30gU2VydmVySW5pdFJlc3VsdFxuICovXG5cbi8qKlxuICogQHRlbXBsYXRlIFtUPVdpdGhTZXJ2ZXJTdWJjb21tYW5kXVxuICogQHR5cGVkZWYge2ltcG9ydCgnYXBwaXVtL3R5cGVzJykuQXJnczxUPn0gQXJnc1xuICovXG5cbi8qKlxuICogQHRlbXBsYXRlIFtUPVdpdGhTZXJ2ZXJTdWJjb21tYW5kXVxuICogQHR5cGVkZWYge2ltcG9ydCgnYXBwaXVtL3R5cGVzJykuUGFyc2VkQXJnczxUPn0gUGFyc2VkQXJnc1xuICovXG4iXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQVdBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVB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